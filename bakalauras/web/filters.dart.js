// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.ListIterable = {"": "IterableBase;",
  get$iterator: function(_) {
    return $.ListIterator$(this);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      if (!t1.$eq($length, this.get$length(this)))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  get$first: function(_) {
    if ($.$eq(this.get$length(this), 0))
      throw $.wrapException($.StateError$("No elements"));
    return this.elementAt$1(this, 0);
  },
  join$1: function(_, separator) {
    var $length, first, buffer, i, str;
    if (typeof separator !== "string")
      return this.join$1$bailout1(1, separator);
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.join$1$bailout1(2, separator, $length);
    if (!$.JSString_methods.get$isEmpty(separator)) {
      if ($length === 0)
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
      buffer = $.StringBuffer$(first);
      for (i = 1; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    } else {
      buffer = $.StringBuffer$("");
      for (i = 0; i < $length; ++i) {
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    }
  },
  join$1$bailout1: function(state0, separator, $length) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        $length = this.get$length(this);
      case 2:
        var t1, first, buffer, t2, i, str;
        state0 = 0;
        if ($.get$isEmpty$asx(separator) !== true) {
          t1 = $.getInterceptor($length);
          if (t1.$eq($length, 0))
            return "";
          first = $.S(this.elementAt$1(this, 0));
          if (!t1.$eq($length, this.get$length(this)))
            throw $.wrapException($.ConcurrentModificationError$(this));
          buffer = $.StringBuffer$(first);
          for (t2 = typeof separator === "string", i = 1; $.JSNumber_methods.$lt(i, $length); ++i) {
            str = t2 ? separator : $.S(separator);
            buffer._contents = buffer._contents + str;
            str = this.elementAt$1(this, i);
            str = typeof str === "string" ? str : $.S(str);
            buffer._contents = buffer._contents + str;
            if (!t1.$eq($length, this.get$length(this)))
              throw $.wrapException($.ConcurrentModificationError$(this));
          }
          return buffer._contents;
        } else {
          buffer = $.StringBuffer$("");
          for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
            str = this.elementAt$1(this, i);
            str = typeof str === "string" ? str : $.S(str);
            buffer._contents = buffer._contents + str;
            if (!t1.$eq($length, this.get$length(this)))
              throw $.wrapException($.ConcurrentModificationError$(this));
          }
          return buffer._contents;
        }
    }
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  skip$1: function(_, count) {
    return $.SubListIterable$(this, count, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else
      result = $.List_List(this.get$length(this));
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterable: null
};

$$.SubListIterable = {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.JSNull_methods.$gt(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.JSInt_methods.$gt(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 == null || $.JSNull_methods.$ge(t2, $length))
      return $length - t1;
    return $.JSNull_methods.$sub(t2, t1);
  },
  get$length$bailout2: function(state0, $length) {
    var t1, t2;
    t1 = this._start;
    if ($.JSInt_methods.$ge(t1, $length))
      return 0;
    t2 = this._endOrLength;
    if (t2 == null || $.JSNull_methods.$ge(t2, $length))
      return $.$sub$n($length, t1);
    return $.JSNull_methods.$sub(t2, t1);
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        return this.elementAt$1$bailout2(3, index, t1, realIndex);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1)
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
      case 3:
        if (state0 === 3 || state0 === 0 && $.$lt$n(index, 0) !== true)
          switch (state0) {
            case 0:
              t1 = this.get$_endIndex();
            case 3:
              state0 = 0;
              t1 = $.$ge$n(realIndex, t1) === true;
          }
        else
          t1 = true;
        if (t1)
          throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if (count < 0)
      throw $.wrapException($.ArgumentError$(count));
    return $.SubListIterable$(this._iterable, this._start + count, this._endOrLength);
  },
  $asIterable: null
};

$$.ListIterator = {"": "Object;_iterable,_liblib$_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib$_length;
    t2 = this._iterable;
    if (!$.$eq(t1, $.get$length$asx(t2)))
      throw $.wrapException($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._current = null;
      return false;
    }
    this._current = $.elementAt$1$ax(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.MappedIterable = {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.MappedIterator$(t1.get$iterator(t1), this._f);
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  get$first: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$first(t1));
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterable: function (S, T) { return [T]; }
};

$$.MappedIterator = {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  }
};

$$.MappedListIterable = {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._source, index));
  },
  $asIterable: function (S, T) { return [T]; }
};

$$.WhereIterable = {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    return $.WhereIterator$($.get$iterator$ax(this._iterable), this._f);
  },
  $asIterable: null
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.SkipIterable = {"": "IterableBase;_iterable,_skipCount",
  skip$1: function(_, n) {
    if (n < 0)
      throw $.wrapException($.ArgumentError$(n));
    return $.SkipIterable$(this._iterable, this._skipCount + n);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.SkipIterator$(t1.get$iterator(t1), this._skipCount);
  },
  SkipIterable$2: function(_iterable, _skipCount) {
    var t1 = this._skipCount;
    if (t1 < 0)
      throw $.wrapException($.ArgumentError$(t1));
  },
  $asIterable: null
};

$$.SkipIterator = {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount) {
  }
};

$$.UnmodifiableListMixin = {"": "Object;",
  $indexSet: function(_, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  add$1: function(_, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  removeLast$0: function(_) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  }
};

$$.UnmodifiableListBase = {"": "ListBase+UnmodifiableListMixin;", $asList: null, $asIterable: null};

$$.Symbol = {"": "Object;_liblib$_name<",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isSymbol && $.$eq(this._liblib$_name, other._liblib$_name);
  },
  get$hashCode: function(_) {
    var t1 = $.get$hashCode$(this._liblib$_name);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return 536870911 & 664597 * t1;
  },
  toString$0: function(_) {
    return "Symbol(\"" + $.S(this._liblib$_name) + "\")";
  },
  $isSymbol: true
};

$$.ToString__emitPair_closure = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      $.write$1$x(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.write$1$x(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  },
  $isFunction: true
};

$$.HashMap_values_closure = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
};

$$.HashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._length;
  },
  get$isEmpty: function(_) {
    return this._map._length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.HashMapKeyIterator$(t1, t1._computeKeys$0());
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException($.ConcurrentModificationError$(t1));
    }
  },
  $asIterable: null
};

$$.HashMapKeyIterator = {"": "Object;_map,_keys,_offset,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._liblib1$_current = null;
      return false;
    } else {
      this._liblib1$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
};

$$.LinkedHashMap_values_closure = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
};

$$.LinkedHashMapCell = {"": "Object;_key<,_value@,_next@,_previous@"};

$$.LinkedHashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._length;
  },
  get$isEmpty: function(_) {
    return this._map._length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.LinkedHashMapKeyIterator$(t1, t1._modifications);
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw $.wrapException($.ConcurrentModificationError$(t1));
      cell = cell.get$_next();
    }
  },
  $asIterable: null
};

$$.LinkedHashMapKeyIterator = {"": "Object;_map,_modifications,_cell,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib1$_current = null;
        return false;
      } else {
        this._liblib1$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications) {
    this._cell = this._map._first;
  }
};

$$.HashSetIterator = {"": "Object;_set,_elements,_offset,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._liblib1$_current = null;
      return false;
    } else {
      this._liblib1$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
};

$$.LinkedHashSetCell = {"": "Object;_liblib1$_element<,_next@,_previous@"};

$$.LinkedHashSetIterator = {"": "Object;_set,_modifications,_cell,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib1$_current = null;
        return false;
      } else {
        this._liblib1$_current = t1.get$_liblib1$_element();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  },
  LinkedHashSetIterator$2: function(_set, _modifications) {
    this._cell = this._set._first;
  }
};

$$._symbolMapToStringMap_closure = {"": "Closure;result_0",
  call$2: function(key, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, key.get$_liblib$_name(), value);
  },
  $isFunction: true
};

$$.Function__toMangledNames_closure = {"": "Closure;result_0",
  call$2: function(symbol, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, symbol.get$_liblib$_name(), value);
  },
  $isFunction: true
};

$$.NoSuchMethodError_toString_closure = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, str, t3;
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0) === true) {
      t2 = t1.sb_0;
      t2._contents = t2._contents + ", ";
    }
    t2 = t1.sb_0;
    str = typeof key === "string" ? key : $.S(key);
    t2._contents = t2._contents + str;
    t2 = t1.sb_0;
    t2._contents = t2._contents + ": ";
    t2 = t1.sb_0;
    t3 = $.Error_safeToString(value);
    t2._contents = t2._contents + t3;
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  },
  $isFunction: true
};

$$._symbolMapToStringMap_closure0 = {"": "Closure;result_0",
  call$2: function(key, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, key.get$_liblib$_name(), value);
  },
  $isFunction: true
};

$$.Interceptor = {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.Primitives_objectTypeName(receiver) + "'";
  },
  noSuchMethod$1: function(receiver, invocation) {
    throw $.wrapException($.NoSuchMethodError$(receiver, invocation.memberName._liblib$_name, invocation.get$positionalArguments(), $._symbolMapToStringMap0(invocation.get$namedArguments()), null));
  }
};

$$.JSBool = {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
};

$$.JSNull = {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$.CloseToken = {"": "Object;", $isCloseToken: true};

$$.JsIsolateSink = {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    $.send$1$x(this._port, message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
};

$$._Manager = {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    var t1, t2;
    if (this.isWorker === true) {
      t1 = this.isolates;
      t1.get$isEmpty;
      t1 = t1._length === 0 && this.topEventLoop.activeTimerCount === 0;
    } else
      t1 = false;
    if (t1) {
      t1 = this.mainManager;
      t2 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
      t1.postMessage$1;
      self.postMessage(t2);
    }
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map();
    this.managers = $.Map_Map();
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1 = this.ports;
    if (t1.containsKey$1(t1, portId))
      throw $.wrapException($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = $.Map_Map();
    this.isolateStatics = new Isolate();
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    var t1 = this.events;
    t1._add$1(t1, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null) {
      var t1 = $globalState.isolates;
      if (t1.containsKey$1(t1, $globalState.rootContext.id))
        if ($globalState.fromCommandLine === true) {
          t1 = $globalState.rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      throw $.wrapException($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $._StackTrace$(exception.stack);
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (this.this_0.runIteration$0() !== true)
      return;
    $.Timer_run(this);
  },
  $isFunction: true
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  postMessage$1: function(_, msg) {
    self.postMessage(msg);
  }
};

$$.IsolateNatives__processWorkerMessage_closure = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.lazyPort = $.ReceivePortImpl$();
    $.send$2$x(this.replyTo_1, "spawned", $._Isolate_port().toSendPort$0());
    this.entryPoint_0.call$0();
  },
  $isFunction: true
};

$$._BaseSendPort = {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._AsyncCompleter$();
    port = $.ReceivePortImpl$();
    this.send$2(this, message, $._NativeJsSendPort$(port, $.get$id$x($globalState.currentContext)));
    port._callback = new $._BaseSendPort_call_closure(completer, port);
    return completer.future;
  },
  $isFunction: true,
  $isSendPort: true
};

$$._BaseSendPort_call_closure = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1._callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException) {
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(value);
    } else {
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureValue$1(value);
    }
  },
  $isFunction: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_closure = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && !$.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId());
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  $isFunction: true
};

$$._NativeJsSendPort_send__closure = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort) {
      other;
      t1 = $.$eq(this._workerId, other._workerId) && $.$eq(this._isolateId, other._isolateId) && $.$eq(this._receivePortId, other._receivePortId);
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.$xor$n($.$xor$n($.$shl$n(this._workerId, 16), $.$shl$n(this._isolateId, 8)), this._receivePortId);
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_closure = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      t1 = $globalState.mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  $isFunction: true
};

$$.ReceivePortImpl = {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $.register$2$x($._globalState().currentContext, this._id, this);
  }
};

$$._waitForPendingPorts_closure = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax($.get$values$x(map), new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
    if (false)
      this.ports.push(t1.get$_futurePort());
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_closure = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._PendingSendPortFinder_visitMap_closure = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return $._NativeJsSendPort$(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return $._WorkerSendPort$(x._workerId, x._isolateId, x._receivePortId);
    throw $.wrapException("Illegal underlying port " + $.S(this.get$p()));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;_visited",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPortSync)
      return this.visitSendPortSync$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    $.throwExpression("Message serialization: Illegal value " + $.S(x) + " passed");
    return;
  }
};

$$._Copier = {"": "_MessageTraverser;_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      copy[i] = this._dispatch$1(list[i]);
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._visited;
        copy = t1.$index(t1, list);
        if (copy != null)
          return copy;
        t1 = $.getInterceptor$asx(list);
        len = t1.get$length(list);
      case 2:
        var copy, t2, i, t3;
        state0 = 0;
        copy = $.List_List(len);
        t2 = this._visited;
        t2.$indexSet(t2, list, copy);
        for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
          t3 = this._dispatch$1(t1.$index(list, i));
          if (i >= t2)
            throw $.ioore(i);
          copy[i] = t3;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$();
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    $.forEach$1$ax(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_closure = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $isFunction: true
};

$$._Serializer = {"": "_MessageTraverser;_nextFreeRefId,_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = $.getInterceptor$x(map);
    return ["map", id, this._serializeList$1($.toList$0$ax(t1.get$keys(map))), this._serializeList$1($.toList$0$ax(t1.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      result[i] = this._dispatch$1(list[i]);
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(list);
        len = t1.get$length(list);
      case 2:
        var result, t2, i, t3;
        state0 = 0;
        result = $.List_List(len);
        for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
          t3 = this._dispatch$1(t1.$index(list, i));
          if (i >= t2)
            throw $.ioore(i);
          result[i] = t3;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;_deserialized",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    t1 = $.getInterceptor(x);
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        $.throwExpression("Unexpected serialized object");
        return;
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.getInterceptor(dartList).$isJavaScriptIndexingBehavior)
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$();
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.getInterceptor(keys).$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.getInterceptor(values).$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values, len) {
    switch (state0) {
      case 0:
        result = $.HashMap$();
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
      case 3:
        var id, t2, i;
        state0 = 0;
        for (t2 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle?",
  cancel$0: function(_) {
    var t1;
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw $.wrapException($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.wrapException($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = !$.hasTimer() || $._globalState().isWorker === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().topEventLoop.enqueue$3($._globalState().currentContext, callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback(this, callback), 0), milliseconds);
    } else
      throw $.wrapException($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.TimerImpl_internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  },
  $isFunction: true
};

$$.JSArray = {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException($.RangeError$value(-1));
    return receiver.pop();
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0() === true;)
      this.add$1(receiver, t1.get$current());
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  join$1: function(receiver, separator) {
    var t1, list, i, t2;
    t1 = receiver.length;
    list = $.List_List(t1);
    for (i = 0; i < receiver.length; ++i) {
      t2 = $.S(receiver[i]);
      if (i >= t1)
        throw $.ioore(i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (start == null)
      $.throwExpression($.ArgumentError$(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    else
      start;
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (typeof end !== "number" || Math.floor(end) !== end)
        throw $.wrapException($.ArgumentError$(end));
      if (end < start || end > receiver.length)
        throw $.wrapException($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeRange$2: function(receiver, start, end) {
    var receiverLength;
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeRange"));
    receiverLength = receiver.length;
    if (start < 0 || start > receiverLength)
      throw $.wrapException($.RangeError$range(start, 0, receiverLength));
    if (end < start || end > receiverLength)
      throw $.wrapException($.RangeError$range(end, start, receiverLength));
    $.Arrays_copy(receiver, end, receiver, start, receiverLength - end);
    this.set$length(receiver, receiverLength - (end - start));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  indexOf$2: function(receiver, element, start) {
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($));
    return result._contents;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.wrapException($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    receiver[index] = value;
  },
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
};

$$.JSMutableArray = {"": "JSArray;", $asList: function() { return [null]; }, $asIterable: function() { return [null]; }};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.JSInvocationMirror = {"": "Object;memberName,_internalName,_kind,_liblib3$_arguments,_namedArgumentNames,_namedIndices",
  get$isGetter: function() {
    return $.$eq(this._kind, 1);
  },
  get$isSetter: function() {
    return $.$eq(this._kind, 2);
  },
  get$isAccessor: function() {
    return !$.$eq(this._kind, 0);
  },
  get$positionalArguments: function() {
    var list, t1, t2, t3, argumentCount, index;
    if (this.get$isGetter())
      return;
    list = [];
    t1 = this._liblib3$_arguments;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return this.get$positionalArguments$bailout(1, t1, list);
    t2 = t1.length;
    t3 = $.get$length$asx(this._namedArgumentNames);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    argumentCount = t2 - t3;
    for (index = 0; index < argumentCount; ++index) {
      if (index >= t1.length)
        throw $.ioore(index);
      list.push(t1[index]);
    }
    return list;
  },
  get$positionalArguments$bailout: function(state0, t1, list) {
    var argumentCount, t2, index;
    argumentCount = $.$sub$n($.get$length$asx(t1), $.get$length$asx(this._namedArgumentNames));
    for (t2 = $.getInterceptor$asx(t1), index = 0; $.JSNumber_methods.$lt(index, argumentCount); ++index)
      list.push(t2.$index(t1, index));
    return list;
  },
  get$namedArguments: function() {
    var map, t1, namedArgumentCount, t2, namedArgumentsStartIndex, t3, i, t4, t5;
    if (this.get$isAccessor())
      return;
    map = $.Map_Map();
    t1 = this._namedArgumentNames;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return this.get$namedArguments$bailout(1, map, t1);
    namedArgumentCount = t1.length;
    t2 = this._liblib3$_arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior))
      return this.get$namedArguments$bailout(3, map, t1, namedArgumentCount, t2);
    namedArgumentsStartIndex = t2.length - namedArgumentCount;
    for (t3 = $.getInterceptor$ax(map), i = 0; i < namedArgumentCount; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t4 = $.Symbol$unvalidated(t1[i]);
      t5 = namedArgumentsStartIndex + i;
      if (t5 < 0 || t5 >= t2.length)
        throw $.ioore(t5);
      t3.$indexSet(map, t4, t2[t5]);
    }
    return map;
  },
  get$namedArguments$bailout: function(state0, map, t1, namedArgumentCount, t2) {
    switch (state0) {
      case 0:
        if (this.get$isAccessor())
          return;
        map = $.Map_Map();
        t1 = this._namedArgumentNames;
      case 1:
        state0 = 0;
        namedArgumentCount = $.get$length$asx(t1);
      case 2:
        state0 = 0;
        t2 = this._liblib3$_arguments;
      case 3:
        var namedArgumentsStartIndex, t3, t4, t5, t6, i;
        state0 = 0;
        namedArgumentsStartIndex = $.$sub$n($.get$length$asx(t2), namedArgumentCount);
        for (t3 = $.getInterceptor$asx(t1), t4 = $.getInterceptor$ns(namedArgumentsStartIndex), t5 = $.getInterceptor$asx(t2), t6 = $.getInterceptor$ax(map), i = 0; $.JSNumber_methods.$lt(i, namedArgumentCount); ++i)
          t6.$indexSet(map, $.Symbol$unvalidated(t3.$index(t1, i)), t5.$index(t2, t4.$add(namedArgumentsStartIndex, i)));
        return map;
    }
  }
};

$$.Primitives_applyFunction_closure = {"": "Closure;namedArguments_0,buffer_1,arguments_2",
  call$1: function($name) {
    var t1, t2;
    t1 = this.buffer_1;
    t2 = "$" + $.S($name);
    t1._contents = t1._contents + t2;
    t1 = this.namedArguments_0;
    this.arguments_2.push(t1.$index(t1, $name));
  },
  $isFunction: true
};

$$.DartError = {"": "Object;",
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.stack == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.stack);
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper$closure.call$0;
  }
};

$$._StackTrace = {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_closure = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true
};

$$.invokeClosure_closure0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true
};

$$.invokeClosure_closure1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true
};

$$.Creates = {"": "Object;types"};

$$.Returns = {"": "Object;types"};

$$.JSName = {"": "Object;name"};

$$.Null = {"": "Object;"};

$$.TypeErrorImplementation = {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
};

$$.CastErrorImplementation = {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
};

$$.FallThroughErrorImplementation = {"": "Object;",
  toString$0: function(_) {
    return "Switch case fall-through.";
  }
};

$$.JSNumber = {"": "num/Interceptor;",
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    var t1, truncated;
    t1 = receiver / other;
    if (isNaN(t1))
      $.throwExpression($.UnsupportedError$("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression($.UnsupportedError$("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    return (receiver & other) >>> 0;
  },
  $xor: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {"": "int/JSNumber;", $isint: true, $isnum: true};

$$.JSDouble = {"": "double/JSNumber;", $isdouble: true, $isnum: true};

$$.TypeImpl = {"": "Object;_typeName",
  toString$0: function(_) {
    return this._typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isTypeImpl && $.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
};

$$.JSString = {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.wrapException($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    return receiver.split(pattern);
  },
  startsWith$1: function(receiver, other) {
    var otherLength = other.length;
    if (otherLength > receiver.length)
      return false;
    return other == receiver.substring(0, otherLength);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression($.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.JSInt_methods.$gt(startIndex, endIndex))
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length) === true)
      throw $.wrapException($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  trim$0: function(receiver) {
    return receiver.trim();
  },
  indexOf$2: function(receiver, other, start) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    else
      start;
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i;
    for (hash = 0, i = 0; i < receiver.length; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$._convertJsonToDart_closure = {"": "Closure;",
  call$2: function(key, value) {
    return value;
  },
  $isFunction: true
};

$$._convertJsonToDart_walk = {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = $.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  },
  $isFunction: true
};

$$._Random = {"": "Object;"};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    matchStart = m.index;
    if (0 >= m.length)
      throw $.ioore(0);
    t1 = $.get$length$asx(m[0]);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this._pattern, str, matchStart, matchStart + t1, m);
  },
  get$pattern: function(_) {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern,str,start,end,_groups",
  $index: function(_, index) {
    var t1 = this._groups;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  }
};

$$._AllMatchesIterable = {"": "IterableBase;_re,_str",
  get$iterator: function(_) {
    return $._AllMatchesIterator$(this._re, this._str);
  },
  $asIterable: function() { return [$.Match]; }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib3$_current",
  get$current: function() {
    return this._liblib3$_current;
  },
  moveNext$0: function() {
    this._liblib3$_current = this._re.firstMatch$1(this._str);
    return this._liblib3$_current != null;
  }
};

$$.StringMatch = {"": "Object;start,str,pattern",
  $index: function(_, g) {
    if (!$.$eq(g, 0))
      $.throwExpression($.RangeError$value(g));
    return this.pattern;
  }
};

$$._Completer = {"": "Object;"};

$$._AsyncCompleter = {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    $.get$_asyncCallbacks().push(new $._AsyncCompleter__setFutureValue_closure(value, this.future));
    if (!$._callbacksAreEnqueued) {
      $.Timer_run($._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  _setFutureError$1: function(error) {
    $.get$_asyncCallbacks().push(new $._AsyncCompleter__setFutureError_closure(error, this.future));
    if (!$._callbacksAreEnqueued) {
      $.Timer_run($._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  }
};

$$._AsyncCompleter__setFutureValue_closure = {"": "Closure;value_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.value_0);
  },
  $isFunction: true
};

$$._AsyncCompleter__setFutureError_closure = {"": "Closure;error_0,future_1",
  call$0: function() {
    this.future_1._setError$1(this.error_0);
  },
  $isFunction: true
};

$$._SyncCompleter = {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _setFutureError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state@,_resultOrListeners<",
  then$2$onError: function(f, onError) {
    var t1;
    if (onError == null) {
      t1 = $._ThenFuture$(f);
      t1._subscribeTo$1(this);
      return t1;
    }
    t1 = $._SubscribeFuture$(f, onError);
    t1._subscribeTo$1(this);
    return t1;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1 = $._CatchErrorFuture$(f, test);
    t1._subscribeTo$1(this);
    return t1;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this._state !== 0)
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this._state !== 0)
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.get$_asyncCallbacks().push(new $._FutureImpl__scheduleUnhandledError_closure(this));
    if (!$._callbacksAreEnqueued) {
      $.Timer_run($._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  _addListener$1: function(listener) {
    var t1 = this._state;
    if (t1 !== 0) {
      this._state = (t1 & 4294967291) >>> 0;
      $.get$_asyncCallbacks().push(new $._FutureImpl__addListener_closure(this, listener));
      if (!$._callbacksAreEnqueued) {
        $.Timer_run($._asyncRunCallback$closure);
        $._callbacksAreEnqueued = true;
      }
    } else {
      listener.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1 = this._state;
    if (t1 === 0)
      this._addListener$1($._FutureListenerWrapper$(future));
    else if (t1 === 1)
      future._setValue$1(this._resultOrListeners);
    else {
      this._state = (t1 & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture) {
      result;
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    } else
      this._setValue$1(result);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  _FutureImpl$immediateError$2: function(error, stackTrace) {
    if (stackTrace != null)
      $._attachStackTrace(error, stackTrace);
    this._setError$1(error);
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1 = t1.completer_0;
      t1.completeError$2;
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(error);
    }
  },
  $isFunction: true
};

$$._FutureImpl__FutureImpl$wait_closure = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2.complete$1;
      if (t2._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t2._isComplete = true;
      t2._setFutureValue$1(t1);
    }
  },
  $isFunction: true
};

$$._FutureImpl__scheduleUnhandledError_closure = {"": "Closure;this_0",
  call$0: function() {
    var t1, error, trace;
    t1 = this.this_0;
    if (!$.$eq($.$and$n(t1.get$_state(), 4), 0)) {
      t1.set$_state($.$and$n(t1.get$_state(), 4294967291));
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error));
      trace = $.getAttachedStackTrace(error);
      if (trace != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
      throw $.wrapException(error);
    }
  },
  $isFunction: true
};

$$._FutureImpl__addListener_closure = {"": "Closure;this_0,listener_1",
  call$0: function() {
    var t1, t2, value;
    t1 = this.this_0;
    t2 = $.$eq(t1.get$_state(), 1);
    value = t1.get$_resultOrListeners();
    t1 = this.listener_1;
    if (t2)
      t1._sendValue$1(value);
    else
      t1._sendError$1(value);
  },
  $isFunction: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $._StackTrace$(exception.stack);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error);
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $._StackTrace$(exception.stack);
        this._setError$1($._asyncError(e, s));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $._StackTrace$(exception.stack);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $._StackTrace$(exception.stack);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$.Stream = {"": "Object;",
  map$1: function(_, convert) {
    return $._MapStream$(this, convert);
  },
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_forEach_closure(t1, action, future), true, new $.Stream_forEach_closure0(future), future.get$_setError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$();
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_isEmpty_closure(t1, future), true, new $.Stream_isEmpty_closure0(future), future.get$_setError());
    return future;
  },
  toList$0: function(_) {
    var result, future;
    result = [];
    future = $._FutureImpl$();
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_toList_closure(result), true, new $.Stream_toList_closure0(result, future), future.get$_setError());
    return future;
  },
  skip$1: function(_, count) {
    return $._SkipStream$(this, count);
  },
  get$first: function(_) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_first_closure(t1, future), true, new $.Stream_first_closure0(future), future.get$_setError());
    return future;
  },
  elementAt$1: function(_, index) {
    var t1, t2, future;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0) === true)
      throw $.wrapException($.ArgumentError$(t1.index_0));
    future = $._FutureImpl$();
    t1.subscription_1 = null;
    t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_elementAt_closure(t1, future), true, new $.Stream_elementAt_closure0(future), future.get$_setError());
    return future;
  }
};

$$.Stream_forEach_closure = {"": "Closure;box_0,action_1,future_2",
  call$1: function(element) {
    $._runUserCode(new $.Stream_forEach__closure(this.action_1, element), new $.Stream_forEach__closure0(), $._cancelAndError(this.box_0.subscription_0, this.future_2));
  },
  $isFunction: true
};

$$.Stream_forEach__closure = {"": "Closure;action_3,element_4",
  call$0: function() {
    return this.action_3.call$1(this.element_4);
  },
  $isFunction: true
};

$$.Stream_forEach__closure0 = {"": "Closure;",
  call$1: function(_) {
  },
  $isFunction: true
};

$$.Stream_forEach_closure0 = {"": "Closure;future_5",
  call$0: function() {
    this.future_5._setValue$1(null);
  },
  $isFunction: true
};

$$.Stream_length_closure = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  },
  $isFunction: true
};

$$.Stream_length_closure0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  },
  $isFunction: true
};

$$.Stream_isEmpty_closure = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    var t1 = this.box_0.subscription_0;
    t1.cancel$0(t1);
    this.future_1._setValue$1(false);
  },
  $isFunction: true
};

$$.Stream_isEmpty_closure0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setValue$1(true);
  },
  $isFunction: true
};

$$.Stream_toList_closure = {"": "Closure;result_0",
  call$1: function(data) {
    this.result_0.push(data);
  },
  $isFunction: true
};

$$.Stream_toList_closure0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  },
  $isFunction: true
};

$$.Stream_first_closure = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1 = this.box_0.subscription_0;
    t1.cancel$0(t1);
    this.future_1._setValue$1(value);
    return;
  },
  $isFunction: true
};

$$.Stream_first_closure0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.StateError$("No elements"));
  },
  $isFunction: true
};

$$.Stream_elementAt_closure = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1 = this.box_0;
    if ($.$eq(t1.index_0, 0)) {
      t1 = t1.subscription_1;
      t1.cancel$0(t1);
      this.future_1._setValue$1(value);
      return;
    }
    t1.index_0 = $.$sub$n(t1.index_0, 1);
  },
  $isFunction: true
};

$$.Stream_elementAt_closure0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.StateError$("Not enough elements for elementAt"));
  },
  $isFunction: true
};

$$.StreamSubscription = {"": "Object;"};

$$.EventSink = {"": "Object;"};

$$._throwDelayed_closure = {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    var t1, t2, trace, t3;
    t1 = this.stackTrace_1;
    if (t1 != null)
      $.Primitives_printString($.JSNull_methods.toString$0(t1));
    t2 = this.error_0;
    trace = $.getAttachedStackTrace(t2);
    t3 = $.getInterceptor(trace);
    if (trace != null && !t3.$eq(trace, t1))
      $.Primitives_printString(t3.toString$0(trace));
    throw $.wrapException(t2);
  },
  $isFunction: true
};

$$._cancelAndError_closure = {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    var t1 = this.subscription_0;
    t1.cancel$0(t1);
    this.future_1._setError$1(error);
  },
  $isFunction: true
};

$$._ForwardingStream = {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    if (onError == null)
      onError = $._nullErrorHandler$closure;
    if (onDone == null)
      onDone = $._nullDoneHandler$closure;
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, true === cancelOnError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    sink._liblib5$_onData$1(data);
  }
};

$$._BaseStreamSubscription = {"": "Object;",
  _liblib5$_onData$1: function(arg0) {
    return this._liblib5$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  _BaseStreamSubscription$3: function(_onData, _onError, _onDone) {
    if (this._onError == null)
      this._onError = $._nullErrorHandler$closure;
    if (this._onDone == null)
      this._onDone = $._nullDoneHandler$closure;
  }
};

$$._ForwardingStreamSubscription = {"": "_BaseStreamSubscription;_stream,_cancelOnError<,_subscription@,_liblib5$_onData,_onError,_onDone",
  cancel$0: function(_) {
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0(t1);
      this._subscription = null;
    }
  },
  _sendError$1: function(error) {
    var t1;
    this._onError$1(error);
    if (this._cancelOnError) {
      t1 = this._subscription;
      t1.cancel$0(t1);
      this._subscription = null;
    }
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    var t1;
    this._onError$1(error);
    if (this._cancelOnError) {
      t1 = this._subscription;
      t1.cancel$0(t1);
      this._subscription = null;
    }
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._subscription = null;
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0(t1);
      this._subscription = null;
    }
    this._onDone$0();
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, _cancelOnError) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._liblib5$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  }
};

$$._WhereStream = {"": "_ForwardingStream;_test,_liblib5$_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $._StackTrace$(exception.stack);
      t1 = sink;
      t1._onError$1($._asyncError(e, s));
      if (t1.get$_cancelOnError() === true) {
        $.cancel$0$x(t1.get$_subscription());
        t1.set$_subscription(null);
      }
      return;
    }

    if (satisfies === true)
      sink._liblib5$_onData$1(inputEvent);
  }
};

$$._MapStream = {"": "_ForwardingStream;_transform,_liblib5$_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $._StackTrace$(exception.stack);
      t1 = sink;
      t1._onError$1($._asyncError(e, s));
      if (t1.get$_cancelOnError() === true) {
        $.cancel$0$x(t1.get$_subscription());
        t1.set$_subscription(null);
      }
      return;
    }

    sink._liblib5$_onData$1(outputEvent);
  }
};

$$._SkipStream = {"": "_ForwardingStream;_remaining,_liblib5$_source",
  _handleData$2: function(inputEvent, sink) {
    var t1 = this._remaining;
    if (t1 > 0) {
      this._remaining = t1 - 1;
      return;
    }
    sink._liblib5$_onData$1(inputEvent);
    return;
  },
  _SkipStream$2: function(source, count) {
    if (count < 0)
      throw $.wrapException($.ArgumentError$(count));
  }
};

$$.Timer_run_closure = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)) === true; i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.JSArray_methods.addAll$1($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.JSArray_methods.addAll$1($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  },
  $isFunction: true
};

$$.UnmodifiableListView = {"": "UnmodifiableListBase;_liblib1$_source",
  get$length: function(_) {
    return this._liblib1$_source.length;
  },
  $index: function(_, index) {
    var t1 = this._liblib1$_source;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $asList: null,
  $asIterable: null
};

$$.HashMap = {"": "Object;_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._length;
  },
  get$isEmpty: function(_) {
    return this._length === 0;
  },
  get$keys: function(_) {
    return $.HashMapKeyIterable$(this);
  },
  get$values: function(_) {
    var t1 = this.get$keys(this);
    return t1.map$1(t1, new $.HashMap_values_closure(this));
  },
  containsKey$1: function(_, key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._length = this._length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._length = this._length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._length = this._length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._length = this._length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._length = this._length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($));
    return result._contents;
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._length);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._length = this._length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true,
  $asMap: null
};

$$._HashSetBase = {"": "IterableBase;",
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($));
    return result._contents;
  },
  $asIterable: null,
  $isIterable: true
};

$$.HashSet = {"": "_HashSetBase;_length,_strings,_nums,_rest,_elements",
  get$iterator: function(_) {
    return $.HashSetIterator$(this, this._computeElements$0());
  },
  get$length: function(_) {
    return this._length;
  },
  get$isEmpty: function(_) {
    return this._length === 0;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashSet__findBucketIndex(rest[$.get$hashCode$(object) & 0x3ffffff], object) >= 0;
    }
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(element) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if ($.HashSet__findBucketIndex(bucket, element) >= 0)
          return;
        bucket.push(element);
      }
      this._length = this._length + 1;
      this._elements = null;
    }
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[$.get$hashCode$(object) & 0x3ffffff];
      index = $.HashSet__findBucketIndex(bucket, object);
      if (index < 0)
        return false;
      this._length = this._length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    }
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = $.List_List(this._length);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return;
    table[element] = 0;
    this._length = this._length + 1;
    this._elements = null;
  },
  _removeHashTableEntry$2: function(table, element) {
    if (table != null && table[element] != null) {
      delete table[element];
      this._length = this._length - 1;
      this._elements = null;
      return true;
    } else
      return false;
  },
  $asIterable: null
};

$$.IterableBase = {"": "Object;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, f);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(_, separator) {
    var iterator, buffer, t1;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator === "")
      do {
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      buffer._contents = buffer._contents + t1;
      for (; iterator.moveNext$0() === true;) {
        buffer._contents = buffer._contents + separator;
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      }
    }
    return buffer._contents;
  },
  join$1$bailout: function(state0, separator) {
    var iterator, buffer, t1, str, t2;
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator == null || $.$eq(separator, ""))
      do {
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      buffer._contents = buffer._contents + t1;
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        buffer._contents = buffer._contents + str;
        t2 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t2;
      }
    }
    return buffer._contents;
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  skip$1: function(_, n) {
    return $.SkipIterable$(this, n);
  },
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.wrapException($.StateError$("No elements"));
    return it.get$current();
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException($.RangeError$value(index));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = $.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw $.wrapException($.RangeError$value(index));
  },
  $isIterable: true,
  $asIterable: null
};

$$.LinkedHashMap = {"": "Object;_length,_strings,_nums,_rest,_first,_last,_modifications",
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw $.wrapException($.ConcurrentModificationError$(this));
      cell = cell.get$_next();
    }
  },
  get$keys: function(_) {
    return $.LinkedHashMapKeyIterable$(this);
  },
  get$values: function(_) {
    var t1 = this.get$keys(this);
    return t1.map$1(t1, new $.LinkedHashMap_values_closure(this));
  },
  get$length: function(_) {
    return this._length;
  },
  get$isEmpty: function(_) {
    return this._length === 0;
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($));
    return result._contents;
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = $.LinkedHashMapCell$(key, value);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._length = this._length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._length = this._length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  $isMap: true,
  $asMap: null
};

$$.LinkedHashSet = {"": "_HashSetBase;_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    return $.LinkedHashSetIterator$(this, this._modifications);
  },
  get$length: function(_) {
    return this._length;
  },
  get$isEmpty: function(_) {
    return this._length === 0;
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_liblib1$_element());
      if (modifications !== this._modifications)
        throw $.wrapException($.ConcurrentModificationError$(this));
      cell = cell.get$_next();
    }
  },
  get$first: function(_) {
    var t1 = this._first;
    if (t1 == null)
      throw $.wrapException($.StateError$("No elements"));
    return t1._liblib1$_element;
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(element) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if ($.LinkedHashSet__findBucketIndex(bucket, element) >= 0)
          return;
        bucket.push(this._newLinkedCell$1(element));
      }
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = $.get$iterator$ax(objects); t1.moveNext$0() === true;)
      this.add$1(this, t1.get$current());
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return;
    table[element] = this._newLinkedCell$1(element);
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = $.LinkedHashSetCell$(element);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._length = this._length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  $asIterable: null
};

$$.ListBase = {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null};

$$.ListMixin = {"": "Object;",
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      return this.forEach$1$bailout(1, action, receiver, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException($.ConcurrentModificationError$(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.$index(receiver, i));
      if (!t1.$eq($length, this.get$length(receiver)))
        throw $.wrapException($.ConcurrentModificationError$(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    return $.$eq(this.get$length(receiver), 0);
  },
  get$first: function(receiver) {
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException($.StateError$("No elements"));
    return this.$index(receiver, 0);
  },
  get$last: function(receiver) {
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException($.StateError$("No elements"));
    return this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
  },
  join$1: function(receiver, separator) {
    var $length, first, buffer, i, str;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator, receiver);
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      return this.join$1$bailout(2, separator, receiver, $length);
    if (!$.JSString_methods.get$isEmpty(separator)) {
      if ($length === 0)
        return "";
      first = $.S(this.$index(receiver, 0));
      if ($length !== this.get$length(receiver))
        throw $.wrapException($.ConcurrentModificationError$(receiver));
      buffer = $.StringBuffer$(first);
      for (i = 1; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.$index(receiver, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(receiver))
          throw $.wrapException($.ConcurrentModificationError$(receiver));
      }
      return buffer._contents;
    } else {
      buffer = $.StringBuffer$("");
      for (i = 0; i < $length; ++i) {
        str = this.$index(receiver, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(receiver))
          throw $.wrapException($.ConcurrentModificationError$(receiver));
      }
      return buffer._contents;
    }
  },
  join$1$bailout: function(state0, separator, receiver, $length) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        $length = this.get$length(receiver);
      case 2:
        var t1, first, buffer, t2, i, str;
        state0 = 0;
        if ($.get$isEmpty$asx(separator) !== true) {
          t1 = $.getInterceptor($length);
          if (t1.$eq($length, 0))
            return "";
          first = $.S(this.$index(receiver, 0));
          if (!t1.$eq($length, this.get$length(receiver)))
            throw $.wrapException($.ConcurrentModificationError$(receiver));
          buffer = $.StringBuffer$(first);
          for (t2 = typeof separator === "string", i = 1; $.JSNumber_methods.$lt(i, $length); ++i) {
            str = t2 ? separator : $.S(separator);
            buffer._contents = buffer._contents + str;
            str = this.$index(receiver, i);
            str = typeof str === "string" ? str : $.S(str);
            buffer._contents = buffer._contents + str;
            if (!t1.$eq($length, this.get$length(receiver)))
              throw $.wrapException($.ConcurrentModificationError$(receiver));
          }
          return buffer._contents;
        } else {
          buffer = $.StringBuffer$("");
          for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
            str = this.$index(receiver, i);
            str = typeof str === "string" ? str : $.S(str);
            buffer._contents = buffer._contents + str;
            if (!t1.$eq($length, this.get$length(receiver)))
              throw $.wrapException($.ConcurrentModificationError$(receiver));
          }
          return buffer._contents;
        }
    }
  },
  where$1: function(receiver, test) {
    return $.WhereIterable$(receiver, test);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  skip$1: function(receiver, count) {
    return $.SubListIterable$(receiver, count, null);
  },
  toList$1$growable: function(receiver, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, this.get$length(receiver));
    } else
      result = $.List_List(this.get$length(receiver));
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(receiver)); ++i) {
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, $.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  removeLast$0: function(receiver) {
    var result;
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException($.StateError$("No elements"));
    result = this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  _rangeCheck$2: function(receiver, start, end) {
    var t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) === true || t1.$gt(start, this.get$length(receiver)) === true)
      throw $.wrapException($.RangeError$range(start, 0, this.get$length(receiver)));
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) === true || t1.$gt(end, this.get$length(receiver)) === true)
      throw $.wrapException($.RangeError$range(end, start, this.get$length(receiver)));
  },
  sublist$2: function(receiver, start, end) {
    var $length, result, i, t1;
    if (typeof start !== "number")
      return this.sublist$2$bailout(1, start, end, receiver);
    if (end == null)
      end = this.get$length(receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = $.$sub$n(end, start);
    if (typeof $length !== "number")
      return this.sublist$2$bailout(2, start, 0, receiver, $length);
    result = $.List_List($);
    $.JSArray_methods.set$length(result, $length);
    for (i = 0; i < $length; ++i) {
      t1 = this.$index(receiver, start + i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  sublist$2$bailout: function(state0, start, end, receiver, $length) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (end == null)
          end = this.get$length(receiver);
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
      case 2:
        var result, t1, i, t2;
        state0 = 0;
        result = $.List_List($);
        $.JSArray_methods.set$length(result, $length);
        for (t1 = $.getInterceptor$ns(start), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
          t2 = this.$index(receiver, t1.$add(start, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  indexOf$2: function(receiver, element, startIndex) {
    var i;
    if ($.JSInt_methods.$ge(startIndex, this.get$length(receiver)))
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; $.JSNumber_methods.$lt(i, this.get$length(receiver)); ++i)
      if ($.$eq(this.$index(receiver, i), element))
        return i;
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($));
    return result._contents;
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
};

$$.ListQueue = {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
  },
  get$first: function(_) {
    var t1, t2;
    t1 = this._head;
    if (t1 === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    t2 = this._table;
    if (t1 < 0 || t1 >= t2.length)
      throw $.ioore(t1);
    return t2[t1];
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) === true || t1.$gt(index, $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1)) === true)
      throw $.wrapException($.RangeError$range(index, 0, $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1)));
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t2 = (t2 + index & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    return t1[t2];
  },
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = $.List_List($);
      $.JSArray_methods.set$length(list, $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1));
    } else
      list = $.List_List($.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1));
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(this, element);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($));
    return result._contents;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _add$1: function(_, element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$and$n(t2 + 1, this._table.length - 1);
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    if (!!newTable.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    if (!!newTable.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.JSInt_methods.$le(this._head, this._tail);
    t2 = this._head;
    if (t1) {
      $length = $.$sub$n(this._tail, t2);
      $.JSArray_methods.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t1, t2);
      t2 = this._tail;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      $.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + t2, this._table, 0);
      return $.$add$ns(this._tail, firstPartSize);
    }
  },
  ListQueue$1: function(initialCapacity) {
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    this._table = $.List_List(initialCapacity);
  },
  $asIterable: null,
  $isIterable: true
};

$$._ListQueueIterator = {"": "Object;_queue,_end,_modificationCount,_liblib1$_position,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression($.ConcurrentModificationError$(t1));
    if ($.$eq(this._liblib1$_position, this._end)) {
      this._liblib1$_current = null;
      return false;
    }
    t2 = t1._table;
    t3 = this._liblib1$_position;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    this._liblib1$_current = t2[t3];
    t3 = this._liblib1$_position;
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout(1, t3, t1);
    this._liblib1$_position = (t3 + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  moveNext$0$bailout: function(state0, t3, t1) {
    this._liblib1$_position = $.$and$n($.$add$ns(t3, 1), t1._table.length - 1);
    return true;
  }
};

$$.Duration = {"": "Object;_duration<",
  $add: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.Duration$(0, 0, this._duration + t1, 0, 0, 0);
  },
  $sub: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.Duration$(0, 0, this._duration - t1, 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $lt: function(_, other) {
    return $.JSNumber_methods.$lt(this._duration, other.get$_duration());
  },
  $gt: function(_, other) {
    return $.JSNumber_methods.$gt(this._duration, other.get$_duration());
  },
  $le: function(_, other) {
    return $.JSNumber_methods.$le(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return $.JSNumber_methods.$ge(this._duration, other.get$_duration());
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  toString$0: function(_) {
    var t1, t2, t3, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + $.S($.Duration$(0, 0, -t2, 0, 0, 0));
    t3 = $.JSNumber_methods.$tdiv(t2, 60000000);
    twoDigitMinutes = t1.call$1(t3 % 60);
    t3 = $.JSNumber_methods.$tdiv(t2, 1000000);
    twoDigitSeconds = t1.call$1(t3 % 60);
    sixDigitUs = new $.Duration_toString_sixDigits().call$1(t2 % 1000000);
    return $.S($.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000) === true)
      return $.S(n);
    if (t1.$ge(n, 10000) === true)
      return "0" + $.S(n);
    if (t1.$ge(n, 1000) === true)
      return "00" + $.S(n);
    if (t1.$ge(n, 100) === true)
      return "000" + $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  },
  $isFunction: true
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
};

$$.Error = {"": "Object;"};

$$.AssertionError = {"": "Object;"};

$$.TypeError = {"": "Object;"};

$$.CastError = {"": "Object;"};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.FallThroughError = {"": "Object;"};

$$.AbstractClassInstantiationError = {"": "Object;_className",
  toString$0: function(_) {
    return "Cannot instantiate abstract class: '" + $.S(this._className) + "'";
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, str, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior))
      return this.toString$0$bailout1(1, t1, t2);
    for (; $.$lt$n(t1.i_1, t2.length) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if ($.$gt$n(t1.i_1, 0) === true) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      t4 = $.Error_safeToString(t2[t4]);
      t3._contents = t3._contents + t4;
    }
    t2 = this._namedArguments;
    if (t2 != null)
      $.forEach$1$ax(t2, new $.NoSuchMethodError_toString_closure(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      actualParameters = t1.sb_0._contents;
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; i < t2.length; ++i) {
        if (i > 0) {
          t3 = t1.sb_0;
          t3._contents = t3._contents + ", ";
        }
        t3 = t1.sb_0;
        if (i >= t2.length)
          throw $.ioore(i);
        str = t2[i];
        str = $.S(str);
        t3._contents = t3._contents + str;
      }
      formalParameters = t1.sb_0._contents;
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  },
  toString$0$bailout1: function(state0, t1, t2) {
    var t3, t4, t5, actualParameters, i, str, formalParameters;
    if (t2 != null)
      for (t3 = $.getInterceptor$asx(t2); $.$lt$n(t1.i_1, $.get$length$asx(t2)) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
        if ($.$gt$n(t1.i_1, 0) === true) {
          t4 = t1.sb_0;
          t4._contents = t4._contents + ", ";
        }
        t4 = t1.sb_0;
        t5 = $.Error_safeToString(t3.$index(t2, t1.i_1));
        t4._contents = t4._contents + t5;
      }
    t2 = this._namedArguments;
    if (t2 != null)
      $.forEach$1$ax(t2, new $.NoSuchMethodError_toString_closure(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      actualParameters = t1.sb_0._contents;
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; i < t2.length; ++i) {
        if (i > 0) {
          t3 = t1.sb_0;
          t3._contents = t3._contents + ", ";
        }
        t3 = t1.sb_0;
        if (i >= t2.length)
          throw $.ioore(i);
        str = t2[i];
        str = $.S(str);
        t3._contents = t3._contents + str;
      }
      formalParameters = t1.sb_0._contents;
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.UnimplementedError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.Error_safeToString(t1) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
};

$$.IntegerDivisionByZeroException = {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
};

$$.Expando = {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + $.S(this.name);
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = $.Object$();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
};

$$.Iterator = {"": "Object;"};

$$.Map = {"": "Object;", $isMap: true, $asMap: null};

$$.Object = {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.Primitives_objectTypeName(this) + "'";
  },
  noSuchMethod$1: function(_, invocation) {
    throw $.wrapException($.NoSuchMethodError$(this, invocation.memberName._liblib$_name, invocation.get$positionalArguments(), $._symbolMapToStringMap(invocation.get$namedArguments()), null));
  },
  $$dom_initCustomEvent$4: function($receiver, $0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_initCustomEvent", "$$dom_initCustomEvent$4", 0, [$0, $1, $2, $3], []));
  },
  $$dom_replaceChild$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_replaceChild", "$$dom_replaceChild$2", 0, [$0, $1], []));
  },
  $add: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("+", "$add", 0, [$0], []));
  },
  $and: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("&", "$and", 0, [$0], []));
  },
  $div: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("/", "$div", 0, [$0], []));
  },
  $ge: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">=", "$ge", 0, [$0], []));
  },
  $gt: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">", "$gt", 0, [$0], []));
  },
  $index: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("[]", "$index", 0, [$0], []));
  },
  $indexSet: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("[]=", "$indexSet", 0, [$0, $1], []));
  },
  $le: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<=", "$le", 0, [$0], []));
  },
  $lt: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<", "$lt", 0, [$0], []));
  },
  $mul: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("*", "$mul", 0, [$0], []));
  },
  $shl: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<<", "$shl", 0, [$0], []));
  },
  $shr: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">>", "$shr", 0, [$0], []));
  },
  $sub: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("-", "$sub", 0, [$0], []));
  },
  $xor: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("^", "$xor", 0, [$0], []));
  },
  abs$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("abs", "abs$0", 0, [], []));
  },
  add$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("add", "add$1", 0, [$0], []));
  },
  call$2$onError: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$2$onError", 0, [$0, $1], ["onError"]));
  },
  call$3$onDone$onError: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
  },
  call$4$cancelOnError$onDone$onError: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$4$cancelOnError$onDone$onError", 0, [$0, $1, $2, $3], ["cancelOnError", "onDone", "onError"]));
  },
  cancel$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("cancel", "cancel$0", 0, [], []));
  },
  clone$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("clone", "clone$0", 0, [], []));
  },
  codeUnitAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("codeUnitAt", "codeUnitAt$1", 0, [$0], []));
  },
  elementAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("elementAt", "elementAt$1", 0, [$0], []));
  },
  endsWith$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("endsWith", "endsWith$1", 0, [$0], []));
  },
  forEach$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
  },
  get$$$dom_className: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_className", "get$$$dom_className", 1, [], []));
  },
  get$attributes: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("attributes", "get$attributes", 1, [], []));
  },
  get$children: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("children", "get$children", 1, [], []));
  },
  get$classes: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("classes", "get$classes", 1, [], []));
  },
  get$detail: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("detail", "get$detail", 1, [], []));
  },
  get$files: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("files", "get$files", 1, [], []));
  },
  get$first: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("first", "get$first", 1, [], []));
  },
  get$id: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("id", "get$id", 1, [], []));
  },
  get$isEmpty: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isEmpty", "get$isEmpty", 1, [], []));
  },
  get$iterator: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("iterator", "get$iterator", 1, [], []));
  },
  get$length: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("length", "get$length", 1, [], []));
  },
  get$nodes: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("nodes", "get$nodes", 1, [], []));
  },
  get$onClick: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onClick", "get$onClick", 1, [], []));
  },
  get$value: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("value", "get$value", 1, [], []));
  },
  indexOf$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("indexOf", "indexOf$1", 0, [$0], []));
  },
  join$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("join", "join$1", 0, [$0], []));
  },
  load$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("load", "load$3", 0, [$0, $1, $2], []));
  },
  map$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("map", "map$1", 0, [$0], []));
  },
  modify$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("modify", "modify$1", 0, [$0], []));
  },
  preventDefault$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("preventDefault", "preventDefault$0", 0, [], []));
  },
  register$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("register", "register$2", 0, [$0, $1], []));
  },
  remove$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("remove", "remove$0", 0, [], []));
  },
  removeLast$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("removeLast", "removeLast$0", 0, [], []));
  },
  replaceWith$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("replaceWith", "replaceWith$1", 0, [$0], []));
  },
  send$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("send", "send$1", 0, [$0], []));
  },
  send$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("send", "send$2", 0, [$0, $1], []));
  },
  set$$$dom_className: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_className=", "set$$$dom_className", 2, [$0], []));
  },
  set$innerHtml: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("innerHtml=", "set$innerHtml", 2, [$0], []));
  },
  set$length: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("length=", "set$length", 2, [$0], []));
  },
  set$type: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("type=", "set$type", 2, [$0], []));
  },
  setMap$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setMap", "setMap$1", 0, [$0], []));
  },
  skip$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("skip", "skip$1", 0, [$0], []));
  },
  split$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("split", "split$1", 0, [$0], []));
  },
  startsWith$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("startsWith", "startsWith$1", 0, [$0], []));
  },
  stringifyValue$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("stringifyValue", "stringifyValue$1", 0, [$0], []));
  },
  sublist$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("sublist", "sublist$1", 0, [$0], []));
  },
  substring$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("substring", "substring$1", 0, [$0], []));
  },
  substring$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
  },
  toList$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toList", "toList$0", 0, [], []));
  },
  toLowerCase$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toLowerCase", "toLowerCase$0", 0, [], []));
  },
  trim$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("trim", "trim$0", 0, [], []));
  },
  write$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("write", "write$1", 0, [$0], []));
  }
};

$$.Match = {"": "Object;"};

$$.StringBuffer = {"": "Object;_contents@",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  write$1: function(_, obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    if (typeof separator !== "string")
      return this.writeAll$2$bailout(1, objects, separator);
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.JSString_methods.get$isEmpty(separator))
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (; iterator.moveNext$0() === true;) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  writeAll$2$bailout: function(state0, objects, separator) {
    var iterator, str, t1;
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.get$isEmpty$asx(separator) === true)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        this._contents = this._contents + str;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
};

$$.Symbol0 = {"": "Object;"};

$$.Interceptor_ListMixin = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.JSString]; }, $isIterable: true, $asIterable: function() { return [$.JSString]; }};

$$.Interceptor_ListMixin_ImmutableListMixin = {"": "Interceptor_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.JSString]; }, $isIterable: true, $asIterable: function() { return [$.JSString]; }};

$$._ChildrenElementList = {"": "ListBase;_element,_childElements",
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw $.wrapException($.UnsupportedError$("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this.toList$0(this));
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._element;
    result = t1.lastElementChild;
    t2 = result == null;
    if (t2)
      $.throwExpression($.StateError$("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  get$first: function(_) {
    var result = this._element.firstElementChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  $asList: function() { return [$.Element]; },
  $asIterable: function() { return [$.Element]; }
};

$$._FrozenElementList = {"": "ListBase;_nodeList",
  get$length: function(_) {
    return this._nodeList.length;
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot modify list"));
  },
  set$length: function(_, newLength) {
    throw $.wrapException($.UnsupportedError$("Cannot modify list"));
  },
  get$first: function(_) {
    return $.NodeList_methods.get$first(this._nodeList);
  },
  get$classes: function(_) {
    return $._MultiElementCssClassSet$($.NodeList_methods.where$1(this._nodeList, new $._FrozenElementList_classes_closure()));
  },
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
};

$$._FrozenElementList_classes_closure = {"": "Closure;",
  call$1: function(e) {
    return typeof e === "object" && e !== null && !!$.getInterceptor(e).$isElement;
  },
  $isFunction: true
};

$$.Entry_remove_closure = {"": "Closure;completer_0",
  call$0: function() {
    var t1 = this.completer_0;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureValue$1(null);
  },
  $isFunction: true
};

$$.Entry_remove_closure0 = {"": "Closure;completer_1",
  call$1: function(error) {
    var t1 = this.completer_1;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureError$1(error);
  },
  $isFunction: true
};

$$.Events = {"": "Object;_ptr",
  $index: function(_, type) {
    return $._EventStream$(this._ptr, type, false);
  }
};

$$.Interceptor_ListMixin0 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.File]; }, $isIterable: true, $asIterable: function() { return [$.File]; }};

$$.Interceptor_ListMixin_ImmutableListMixin0 = {"": "Interceptor_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function() { return [$.File]; }, $isIterable: true, $asIterable: function() { return [$.File]; }};

$$.Interceptor_ListMixin1 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin_ImmutableListMixin1 = {"": "Interceptor_ListMixin1+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin2 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin_ImmutableListMixin2 = {"": "Interceptor_ListMixin2+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin3 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.MimeType]; }, $isIterable: true, $asIterable: function() { return [$.MimeType]; }};

$$.Interceptor_ListMixin_ImmutableListMixin3 = {"": "Interceptor_ListMixin3+ImmutableListMixin;", $isList: true, $asList: function() { return [$.MimeType]; }, $isIterable: true, $asIterable: function() { return [$.MimeType]; }};

$$._ChildNodeListLazy = {"": "ListBase;_this",
  get$first: function(_) {
    var result = this._this.firstChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i, t3;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i) {
          t3 = t1.childNodes;
          if (0 >= t3.length)
            throw $.ioore(0);
          t2.appendChild(t3[0]);
        }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._this;
    result = t1.lastChild;
    t2 = result == null;
    if (t2)
      $.throwExpression($.StateError$("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return $.NodeList_methods.get$iterator(this._this.childNodes);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw $.wrapException($.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $is_ChildNodeListLazy: true,
  $asList: function() { return [$.Node]; },
  $asIterable: function() { return [$.Node]; }
};

$$.Interceptor_ListMixin4 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin_ImmutableListMixin4 = {"": "Interceptor_ListMixin4+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin5 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Plugin]; }, $isIterable: true, $asIterable: function() { return [$.Plugin]; }};

$$.Interceptor_ListMixin_ImmutableListMixin5 = {"": "Interceptor_ListMixin5+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Plugin]; }, $isIterable: true, $asIterable: function() { return [$.Plugin]; }};

$$.EventTarget_ListMixin = {"": "EventTarget+ListMixin;", $isList: true, $asList: function() { return [$.SourceBuffer]; }, $isIterable: true, $asIterable: function() { return [$.SourceBuffer]; }};

$$.EventTarget_ListMixin_ImmutableListMixin = {"": "EventTarget_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.SourceBuffer]; }, $isIterable: true, $asIterable: function() { return [$.SourceBuffer]; }};

$$.Interceptor_ListMixin6 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.SpeechGrammar]; }, $isIterable: true, $asIterable: function() { return [$.SpeechGrammar]; }};

$$.Interceptor_ListMixin_ImmutableListMixin6 = {"": "Interceptor_ListMixin6+ImmutableListMixin;", $isList: true, $asList: function() { return [$.SpeechGrammar]; }, $isIterable: true, $asIterable: function() { return [$.SpeechGrammar]; }};

$$.Storage_keys_closure = {"": "Closure;keys_0",
  call$2: function(k, v) {
    return this.keys_0.push(k);
  },
  $isFunction: true
};

$$.Storage_values_closure = {"": "Closure;values_0",
  call$2: function(k, v) {
    return this.values_0.push(v);
  },
  $isFunction: true
};

$$.Interceptor_ListMixin7 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.TextTrackCue]; }, $isIterable: true, $asIterable: function() { return [$.TextTrackCue]; }};

$$.Interceptor_ListMixin_ImmutableListMixin7 = {"": "Interceptor_ListMixin7+ImmutableListMixin;", $isList: true, $asList: function() { return [$.TextTrackCue]; }, $isIterable: true, $asIterable: function() { return [$.TextTrackCue]; }};

$$.EventTarget_ListMixin0 = {"": "EventTarget+ListMixin;", $isList: true, $asList: function() { return [$.TextTrack]; }, $isIterable: true, $asIterable: function() { return [$.TextTrack]; }};

$$.EventTarget_ListMixin_ImmutableListMixin0 = {"": "EventTarget_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function() { return [$.TextTrack]; }, $isIterable: true, $asIterable: function() { return [$.TextTrack]; }};

$$.Interceptor_ListMixin8 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Touch]; }, $isIterable: true, $asIterable: function() { return [$.Touch]; }};

$$.Interceptor_ListMixin_ImmutableListMixin8 = {"": "Interceptor_ListMixin8+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Touch]; }, $isIterable: true, $asIterable: function() { return [$.Touch]; }};

$$.Interceptor_ListMixin9 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Rect]; }, $isIterable: true, $asIterable: function() { return [$.Rect]; }};

$$.Interceptor_ListMixin_ImmutableListMixin9 = {"": "Interceptor_ListMixin9+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Rect]; }, $isIterable: true, $asIterable: function() { return [$.Rect]; }};

$$.Interceptor_ListMixin10 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.CssRule]; }, $isIterable: true, $asIterable: function() { return [$.CssRule]; }};

$$.Interceptor_ListMixin_ImmutableListMixin10 = {"": "Interceptor_ListMixin10+ImmutableListMixin;", $isList: true, $asList: function() { return [$.CssRule]; }, $isIterable: true, $asIterable: function() { return [$.CssRule]; }};

$$._CSSValue_ListMixin = {"": "_CSSValue+ListMixin;", $isList: true, $asList: function() { return [$._CSSValue]; }, $isIterable: true, $asIterable: function() { return [$._CSSValue]; }};

$$._CSSValue_ListMixin_ImmutableListMixin = {"": "_CSSValue_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$._CSSValue]; }, $isIterable: true, $asIterable: function() { return [$._CSSValue]; }};

$$.Interceptor_ListMixin11 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Entry]; }, $isIterable: true, $asIterable: function() { return [$.Entry]; }};

$$.Interceptor_ListMixin_ImmutableListMixin11 = {"": "Interceptor_ListMixin11+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Entry]; }, $isIterable: true, $asIterable: function() { return [$.Entry]; }};

$$.Interceptor_ListMixin12 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$._EntrySync]; }, $isIterable: true, $asIterable: function() { return [$._EntrySync]; }};

$$.Interceptor_ListMixin_ImmutableListMixin12 = {"": "Interceptor_ListMixin12+ImmutableListMixin;", $isList: true, $asList: function() { return [$._EntrySync]; }, $isIterable: true, $asIterable: function() { return [$._EntrySync]; }};

$$.Interceptor_ListMixin13 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Gamepad]; }, $isIterable: true, $asIterable: function() { return [$.Gamepad]; }};

$$.Interceptor_ListMixin_ImmutableListMixin13 = {"": "Interceptor_ListMixin13+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Gamepad]; }, $isIterable: true, $asIterable: function() { return [$.Gamepad]; }};

$$.Interceptor_ListMixin14 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin_ImmutableListMixin14 = {"": "Interceptor_ListMixin14+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin15 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.SpeechInputResult]; }, $isIterable: true, $asIterable: function() { return [$.SpeechInputResult]; }};

$$.Interceptor_ListMixin_ImmutableListMixin15 = {"": "Interceptor_ListMixin15+ImmutableListMixin;", $isList: true, $asList: function() { return [$.SpeechInputResult]; }, $isIterable: true, $asIterable: function() { return [$.SpeechInputResult]; }};

$$.Interceptor_ListMixin16 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.SpeechRecognitionResult]; }, $isIterable: true, $asIterable: function() { return [$.SpeechRecognitionResult]; }};

$$.Interceptor_ListMixin_ImmutableListMixin16 = {"": "Interceptor_ListMixin16+ImmutableListMixin;", $isList: true, $asList: function() { return [$.SpeechRecognitionResult]; }, $isIterable: true, $asIterable: function() { return [$.SpeechRecognitionResult]; }};

$$.Interceptor_ListMixin17 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.StyleSheet]; }, $isIterable: true, $asIterable: function() { return [$.StyleSheet]; }};

$$.Interceptor_ListMixin_ImmutableListMixin17 = {"": "Interceptor_ListMixin17+ImmutableListMixin;", $isList: true, $asList: function() { return [$.StyleSheet]; }, $isIterable: true, $asIterable: function() { return [$.StyleSheet]; }};

$$._AttributeMap = {"": "Object;",
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys(this)); t1.moveNext$0();) {
      key = t1.get$current();
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function(_) {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = $.List_List($);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push(t1.localName);
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = $.List_List($);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push($.get$value$x(t1));
    }
    return values;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  $isMap: true,
  $asMap: function() { return [$.JSString, $.JSString]; }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_element",
  containsKey$1: function(_, key) {
    return this._element.hasAttribute(key);
  },
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$length: function(_) {
    return this.get$keys(this).length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
};

$$._MultiElementCssClassSet = {"": "CssClassSetImpl;_elementIterable,_elementCssClassSetIterable",
  readClasses$0: function() {
    var s, t1;
    s = $.LinkedHashSet$();
    t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new $._MultiElementCssClassSet_readClasses_closure(s));
    return s;
  },
  writeClasses$1: function(s) {
    var classes, t1;
    classes = $.join$1$ax($.List_List$from(s, true), " ");
    for (t1 = this._elementIterable, t1 = t1.get$iterator(t1); t1.moveNext$0();)
      $.set$$$dom_className$x(t1.get$current(), classes);
  },
  modify$1: function(_, f) {
    var t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new $._MultiElementCssClassSet_modify_closure(f));
  },
  _MultiElementCssClassSet$1: function(_elementIterable) {
    this._elementCssClassSetIterable = $.map$1$ax($.List_List$from(this._elementIterable, true), new $._MultiElementCssClassSet_closure());
  }
};

$$._MultiElementCssClassSet_closure = {"": "Closure;",
  call$1: function(e) {
    return $._ElementCssClassSet$(e);
  },
  $isFunction: true
};

$$._MultiElementCssClassSet_readClasses_closure = {"": "Closure;s_0",
  call$1: function(e) {
    var t1 = this.s_0;
    return t1.addAll$1(t1, e.readClasses$0());
  },
  $isFunction: true
};

$$._MultiElementCssClassSet_modify_closure = {"": "Closure;f_0",
  call$1: function(e) {
    return $.modify$1$x(e, this.f_0);
  },
  $isFunction: true
};

$$._ElementCssClassSet = {"": "CssClassSetImpl;_element",
  readClasses$0: function() {
    var s, t1, trimmed;
    s = $.LinkedHashSet$();
    for (t1 = $.get$iterator$ax($.split$1$s($.get$$$dom_className$x(this._element), " ")); t1.moveNext$0() === true;) {
      trimmed = $.trim$0$s(t1.get$current());
      if ($.get$isEmpty$asx(trimmed) !== true)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    $.List_List$from(s, true);
    $.set$$$dom_className$x(this._element, s.join$1(s, " "));
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  }
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function(_) {
    var t1, t2;
    t1 = this._target;
    if (t1 == null)
      return;
    t2 = this._onData;
    if (t2 != null)
      $.$$dom_removeEventListener$3$x(t1, this._eventType, t2, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      $.$$dom_addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$.ImmutableListMixin = {"": "Object;",
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
};

$$.Rect = {"": "Object;left>,top>,width>,height>",
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = $.getInterceptor$x(other);
    return $.$eq(this.left, t1.get$left(other)) && $.$eq(this.top, t1.get$top(other)) && $.$eq(this.width, t1.get$width(other)) && $.$eq(this.height, t1.get$height(other));
  },
  $isRect: true,
  $asRect: null
};

$$._JsSerializer0 = {"": "_Serializer0;_liblib0$_nextFreeRefId,_liblib0$_visited",
  visitSendPortSync$1: function(x) {
    if (!!$.getInterceptor(x).$is_JsSendPortSync)
      return ["sendport", "nativejs", x._liblib0$_id];
    if (!!$.getInterceptor(x).$is_LocalSendPortSync) {
      if ($.ReceivePortSync__cachedIsolateId == null)
        $.ReceivePortSync__cachedIsolateId = $._getNewIsolateId();
      return ["sendport", "dart", $.ReceivePortSync__cachedIsolateId, x._liblib0$_receivePort._portId];
    }
    if (!!$.getInterceptor(x).$is_RemoteSendPortSync)
      return ["sendport", "dart", x._liblib0$_isolateId, x._portId];
    throw $.wrapException("Unknown port type " + $.S(x));
  },
  visitSendPort$1: function(x) {
    throw $.wrapException($.UnimplementedError$("Asynchronous send port not yet implemented."));
  }
};

$$._JsDeserializer0 = {"": "_Deserializer0;_liblib0$_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, tag;
    t1 = $.getInterceptor$asx(x);
    tag = t1.$index(x, 1);
    switch (tag) {
      case "nativejs":
        return $._JsSendPortSync$(t1.$index(x, 2));
      case "dart":
        return $.ReceivePortSync__lookup(t1.$index(x, 2), t1.$index(x, 3));
      default:
        throw $.wrapException("Illegal SendPortSync type: " + $.S(tag));
    }
  }
};

$$._JsSendPortSync = {"": "Object;_liblib0$_id",
  callSync$1: function(message) {
    var result = ReceivePortSync.dispatchCall(this._liblib0$_id, $._JsSerializer$0().traverse$1(message));
    return $._JsDeserializer$0().deserialize$1(result);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_JsSendPortSync && $.$eq(this._liblib0$_id, other._liblib0$_id);
  },
  get$hashCode: function(_) {
    return this._liblib0$_id;
  },
  $is_JsSendPortSync: true,
  $isSendPortSync: true
};

$$._RemoteSendPortSync = {"": "Object;_liblib0$_isolateId,_portId",
  callSync$1: function(message) {
    var serialized, result;
    serialized = $._JsSerializer$0().traverse$1(message);
    result = $._RemoteSendPortSync__call(this._liblib0$_isolateId, this._portId, serialized);
    return $._JsDeserializer$0().deserialize$1(result);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_RemoteSendPortSync)
      t1 = $.$eq(this._liblib0$_isolateId, other._liblib0$_isolateId) && $.$eq(this._portId, other._portId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1 = this._portId;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.$shr$n(this._liblib0$_isolateId, 16 + t1);
  },
  $is_RemoteSendPortSync: true,
  $isSendPortSync: true
};

$$._RemoteSendPortSync__call_closure = {"": "Closure;box_0",
  call$1: function(e) {
    this.box_0.result_0 = $.parse($.get$detail$x(e), null);
  },
  $isFunction: true
};

$$._LocalSendPortSync = {"": "Object;_liblib0$_receivePort",
  callSync$1: function(message) {
    var t1, result;
    t1 = $._JsSerializer$0().traverse$1(message);
    result = this._liblib0$_receivePort._liblib0$_callback$1($._JsDeserializer$0().deserialize$1(t1));
    t1 = $._JsSerializer$0().traverse$1(result);
    return $._JsDeserializer$0().deserialize$1(t1);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_LocalSendPortSync && this._liblib0$_receivePort === other._liblib0$_receivePort;
  },
  get$hashCode: function(_) {
    var t1 = this._liblib0$_receivePort;
    return t1.get$hashCode(t1);
  },
  $is_LocalSendPortSync: true,
  $isSendPortSync: true
};

$$.ReceivePortSync = {"": "Object;_portId,_liblib0$_callback,_portSubscription",
  _liblib0$_callback$1: function(arg0) {
    return this._liblib0$_callback.call$1(arg0);
  },
  receive$1: function(callback) {
    var t1;
    this._liblib0$_callback = callback;
    if (this._portSubscription == null) {
      t1 = $.Window_methods.get$on(window);
      this._portSubscription = t1.$index(t1, $.ReceivePortSync__getListenerName($.ReceivePortSync__isolateId(), this._portId)).listen$1(new $.ReceivePortSync_receive_closure(this));
    }
  },
  toSendPort$0: function() {
    return $._LocalSendPortSync$_internal(this);
  },
  ReceivePortSync$0: function() {
    if ($.ReceivePortSync__portIdCount == null) {
      $.ReceivePortSync__portIdCount = 0;
      $.ReceivePortSync__portMap = $.Map_Map();
    }
    var t1 = $.ReceivePortSync__portIdCount;
    $.ReceivePortSync__portIdCount = $.$add$ns(t1, 1);
    this._portId = t1;
    t1 = $.ReceivePortSync__portMap;
    t1.$indexSet(t1, this._portId, this);
  }
};

$$.ReceivePortSync_receive_closure = {"": "Closure;this_0",
  call$1: function(e) {
    var data, t1, replyTo, result, output;
    data = $.parse($.get$detail$x(e), null);
    t1 = $.getInterceptor$asx(data);
    replyTo = t1.$index(data, 0);
    t1 = t1.$index(data, 1);
    result = this.this_0._liblib0$_callback$1($._JsDeserializer$0().deserialize$1(t1));
    t1 = $._JsSerializer$0().traverse$1(result);
    output = $.StringBuffer$("");
    $._JsonStringifier$(output).stringifyValue$1(t1);
    t1 = output._contents;
    e = document.createEvent("CustomEvent");
    $.$$dom_initCustomEvent$4$x(e, replyTo, false, false, t1);
    window.dispatchEvent(e);
  },
  $isFunction: true
};

$$._MessageTraverserVisitedMap0 = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  }
};

$$._MessageTraverser0 = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    result = null;
    try {
      result = this._liblib0$_dispatch$1(x);
    } finally {
    }
    return result;
  },
  _liblib0$_dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPortSync)
      return this.visitSendPortSync$1(x);
    $.throwExpression("Message serialization: Illegal value " + $.S(x) + " passed");
    return;
  }
};

$$._Serializer0 = {"": "_MessageTraverser0;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var id = this._liblib0$_nextFreeRefId;
    this._liblib0$_nextFreeRefId = id + 1;
    return ["list", id, this._liblib0$_serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var id, t1;
    id = this._liblib0$_nextFreeRefId;
    this._liblib0$_nextFreeRefId = id + 1;
    t1 = $.getInterceptor$x(map);
    return ["map", id, this._liblib0$_serializeList$1($.toList$0$ax(t1.get$keys(map))), this._liblib0$_serializeList$1($.toList$0$ax(t1.get$values(map)))];
  },
  _liblib0$_serializeList$1: function(list) {
    var len, result, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this._liblib0$_serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      result[i] = this._liblib0$_dispatch$1(list[i]);
    }
    return result;
  },
  _liblib0$_serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(list);
        len = t1.get$length(list);
      case 2:
        var result, t2, i, t3;
        state0 = 0;
        result = $.List_List(len);
        for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
          t3 = this._liblib0$_dispatch$1(t1.$index(list, i));
          if (i >= t2)
            throw $.ioore(i);
          result[i] = t3;
        }
        return result;
    }
  }
};

$$._Deserializer0 = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._liblib0$_deserialized = $.HashMap$();
    return this._liblib0$_deserializeHelper$1(x);
  },
  _liblib0$_deserializeHelper$1: function(x) {
    var t1, id;
    t1 = $.getInterceptor(x);
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._liblib0$_deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._liblib0$_deserializeList$1(x);
      case "map":
        return this._liblib0$_deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        $.throwExpression("Unexpected serialized object");
        return;
    }
  },
  _liblib0$_deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.getInterceptor(dartList).$isJavaScriptIndexingBehavior)
      return this._liblib0$_deserializeList$1$bailout(1, dartList, id);
    t1 = this._liblib0$_deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._liblib0$_deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _liblib0$_deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._liblib0$_deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t1.$indexSet(dartList, i, this._liblib0$_deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _liblib0$_deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$();
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._liblib0$_deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.getInterceptor(keys).$isJavaScriptIndexingBehavior))
      return this._liblib0$_deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.getInterceptor(values).$isJavaScriptIndexingBehavior))
      return this._liblib0$_deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._liblib0$_deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._liblib0$_deserializeHelper$1(values[i]));
    }
    return result;
  },
  _liblib0$_deserializeMap$1$bailout: function(state0, x, result, keys, t1, values, len) {
    switch (state0) {
      case 0:
        result = $.HashMap$();
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._liblib0$_deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
      case 3:
        var id, t2, i;
        state0 = 0;
        for (t2 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._liblib0$_deserializeHelper$1(t1.$index(keys, i)), this._liblib0$_deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  }
};

$$._WrappedList = {"": "ListBase;_list",
  get$iterator: function(_) {
    return $._WrappedIterator$($.get$iterator$ax(this._list));
  },
  get$length: function(_) {
    return this._list.length;
  },
  add$1: function(_, element) {
    $.add$1$ax(this._list, element);
  },
  $index: function(_, index) {
    var t1 = this._list;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._list;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  set$length: function(_, newLength) {
    $.set$length$asx(this._list, newLength);
  },
  indexOf$2: function(_, element, start) {
    return $.indexOf$2$asx(this._list, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  $asList: null,
  $asIterable: null
};

$$._WrappedIterator = {"": "Object;_liblib0$_iterator",
  moveNext$0: function() {
    return this._liblib0$_iterator.moveNext$0();
  },
  get$current: function() {
    return this._liblib0$_iterator.get$current();
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window"};

$$.FixedSizeListIterator = {"": "Object;_array,_liblib0$_length,_position,_liblib0$_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib0$_length;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout(2, t1, nextPosition);
    if (nextPosition < t1) {
      this._liblib0$_current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._liblib0$_current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
        t1 = this._liblib0$_length;
      case 2:
        state0 = 0;
        if ($.$lt$n(nextPosition, t1) === true) {
          this._liblib0$_current = $.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._liblib0$_current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$.convertDartToNative_Dictionary_closure = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_2.push(null);
    return $length;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, $length, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
      throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFile)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isBlob)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFileList)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isImageData)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isByteBuffer)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isTypedData)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (t2 != null)
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      $.forEach$1$ax(e, new $._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || !!$.getInterceptor(e).$isList)) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(1, e);
      $length = e.length;
      slot = this.findSlot_5.call$1(e);
      t1 = this.readSlot_6;
      copy = t1.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t2 = e instanceof Array && !!!e.immutable$list;
      t3 = this.writeSlot_7;
      if (t2) {
        t3.call$2(slot, true);
        for (i = 0; i < $length; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (elementCopy == null ? element != null : elementCopy !== element) {
            copy0 = t1.call$1(slot);
            if (true === copy0) {
              copy0 = new Array($length);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !$.getInterceptor(copy0).$isJavaScriptIndexingBehavior)
              return this.call$1$bailout(2, e, t3, elementCopy, copy0, $.JSArray_methods, $length, slot, t1, copy, i);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array($length);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(3, e, 0, 0, 0, $.JSArray_methods, $length, 0, 0, copy, i);
      for (; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.wrapException($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, e, t4, elementCopy, copy0, t1, $length, slot, t2, copy, i) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
          throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFile)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isBlob)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFileList)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isImageData)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isByteBuffer)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isTypedData)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (t2 != null)
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          $.forEach$1$ax(e, new $._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
          return t1.copy_0;
        }
      default:
        var t3, element, j;
        if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || !!$.getInterceptor(e).$isList))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t1 = $.getInterceptor$asx(e);
              $length = t1.get$length(e);
              slot = this.findSlot_5.call$1(e);
              t2 = this.readSlot_6;
              copy = t2.call$1(slot);
              if (copy != null) {
                if (true === copy) {
                  copy = new Array($length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t3 = e instanceof Array && !!!e.immutable$list;
              t4 = this.writeSlot_7;
            case 2:
              if (state0 === 2 || state0 === 0 && t3)
                switch (state0) {
                  case 0:
                    t4.call$2(slot, true);
                    i = 0;
                  case 2:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.JSNumber_methods.$lt(i, $length))
                              break L0;
                            element = t1.$index(e, i);
                            elementCopy = this.call$1(element);
                          case 2:
                            if (state0 === 2 || state0 === 0 && (elementCopy == null ? element != null : elementCopy !== element))
                              switch (state0) {
                                case 0:
                                  copy0 = t2.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array($length);
                                    t4.call$2(slot, copy0);
                                  }
                                case 2:
                                  state0 = 0;
                                  for (t2 = $.getInterceptor$ax(copy0), j = 0; j < i; ++j)
                                    t2.$indexSet(copy0, j, t1.$index(e, j));
                                  t2.$indexSet(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t4.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array($length);
                t4.call$2(slot, copy);
                i = 0;
              }
            case 3:
              state0 = 0;
              for (t2 = $.getInterceptor$ax(copy); $.JSNumber_methods.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        throw $.wrapException($.UnimplementedError$("structured clone of other type"));
    }
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk_closure = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, key, $length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior)
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = $.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
        key = t1.get$current();
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4)
        copy = new Array($length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(2, e, copy, $length, slot, $.JSArray_methods);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, copy, $length, slot, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
        if (Object.getPrototypeOf(e) === Object.prototype) {
          slot = this.findSlot_5.call$1(e);
          copy = this.readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = $.makeLiteralMap([]);
          this.writeSlot_7.call$2(slot, copy);
          for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
            key = t1.get$current();
            copy.$indexSet(copy, key, this.call$1(e[key]));
          }
          return copy;
        }
      case 2:
        var key, t2, i;
        if (state0 === 2 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null)
                return copy;
              $length = t1.get$length(e);
              copy = this.mustCopy_4 ? new Array($length) : e;
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$ax(copy), i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  },
  $isFunction: true
};

$$.CssClassSetImpl = {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$iterator(t1);
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  join$1: function(_, separator) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, separator);
  },
  map$1: function(_, f) {
    return $.MappedIterable$(this.readClasses$0(), f);
  },
  get$isEmpty: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$isEmpty(t1);
  },
  get$length: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$length(t1);
  },
  add$1: function(_, value) {
    this.modify$1(this, new $.CssClassSetImpl_add_closure(value));
  },
  get$first: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$first(t1);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this.readClasses$0(), growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(_, n) {
    return $.SkipIterable$(this.readClasses$0(), n);
  },
  elementAt$1: function(_, index) {
    var t1 = this.readClasses$0();
    return t1.elementAt$1(t1, index);
  },
  modify$1: function(_, f) {
    var s = this.readClasses$0();
    f.call$1(s);
    this.writeClasses$1(s);
  },
  $isIterable: true,
  $asIterable: function() { return [$.JSString]; }
};

$$.CssClassSetImpl_add_closure = {"": "Closure;value_0",
  call$1: function(s) {
    return $.add$1$ax(s, this.value_0);
  },
  $isFunction: true
};

$$.FilteredElementList = {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_closure()), true);
  },
  forEach$1: function(_, f) {
    $.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len;
    if (typeof newLength !== "number")
      return this.set$length$bailout(1, newLength);
    len = this.get$length(this);
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len, t1;
    len = this.get$length(this);
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len) === true)
      return;
    else if (t1.$lt(newLength, 0) === true)
      throw $.wrapException($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  removeRange$2: function(_, start, end) {
    $.IterableMixinWorkaround_forEach($.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.get$_filtered());
  },
  $asList: null,
  $asIterable: null
};

$$.FilteredElementList__filtered_closure = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  },
  $isFunction: true
};

$$.FilteredElementList_removeRange_closure = {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$ax(el);
  },
  $isFunction: true
};

$$.SupportedBrowser = {"": "Object;browserName,minimumVersion"};

$$.DomName = {"": "Object;name"};

$$._completeRequest_closure = {"": "Closure;request_0,completer_1",
  call$1: function(e) {
    var t1, t2;
    t1 = this.completer_1;
    t2 = this.request_0;
    t2.get$result;
    t2 = $._convertNativeToDart_IDBAny(t2.result);
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureValue$1(t2);
  },
  $isFunction: true
};

$$._completeRequest_closure0 = {"": "Closure;completer_2",
  call$1: function(e) {
    var t1 = this.completer_2;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureError$1(e);
  },
  $isFunction: true
};

$$.ReceivePort = {"": "Object;"};

$$.JsonUnsupportedObjectError = {"": "Object;unsupportedObject,cause",
  toString$0: function(_) {
    if (this.cause != null)
      return "Calling toJson method on object failed.";
    else
      return "Object toJson method returns non-serializable value.";
  }
};

$$.JsonCyclicError = {"": "JsonUnsupportedObjectError;unsupportedObject,cause",
  toString$0: function(_) {
    return "Cyclic error in JSON stringify";
  }
};

$$._JsonStringifier = {"": "Object;sb<,seen",
  checkCycle$1: function(object) {
    var t1, t2, i, t3;
    for (t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      if (t3 == null ? object == null : t3 === object)
        throw $.wrapException($.JsonCyclicError$(object));
    }
    t1.push(object);
  },
  stringifyValue$1: function(object) {
    var customJson, e, t1, exception;
    if (!this.stringifyJsonValue$1(object)) {
      this.checkCycle$1(object);
      try {
        customJson = object.toJson$0();
        if (!this.stringifyJsonValue$1(customJson)) {
          t1 = $.JsonUnsupportedObjectError$(object, null);
          throw $.wrapException(t1);
        }
        t1 = this.seen;
        if (0 >= t1.length)
          throw $.ioore(0);
        t1.pop();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        throw $.wrapException($.JsonUnsupportedObjectError$(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, t2, i;
    t1 = {};
    if (typeof object === "number") {
      t1 = this.sb;
      t2 = $.JSNumber_methods.toString$0(object);
      t1._contents = t1._contents + t2;
      return true;
    } else if (object === true) {
      t1 = this.sb;
      t1._contents = t1._contents + "true";
      return true;
    } else if (object === false) {
      t1 = this.sb;
      t1._contents = t1._contents + "false";
      return true;
    } else if (object == null) {
      t1 = this.sb;
      t1._contents = t1._contents + "null";
      return true;
    } else if (typeof object === "string") {
      t1 = this.sb;
      t1._contents = t1._contents + "\"";
      $._JsonStringifier_escape(t1, object);
      t1._contents = t1._contents + "\"";
      return true;
    } else if (typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList)) {
      if (typeof object !== "string" && (typeof object !== "object" || object === null || object.constructor !== Array && !$.getInterceptor(object).$isJavaScriptIndexingBehavior))
        return this.stringifyJsonValue$1$bailout(1, object);
      this.checkCycle$1(object);
      t1 = this.sb;
      t1._contents = t1._contents + "[";
      if (object.length > 0) {
        this.stringifyValue$1(object[0]);
        for (i = 1; i < object.length; ++i) {
          t1._contents = t1._contents + ",";
          if (i >= object.length)
            throw $.ioore(i);
          this.stringifyValue$1(object[i]);
        }
      }
      t1._contents = t1._contents + "]";
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
      this.checkCycle$1(object);
      t2 = this.sb;
      t2._contents = t2._contents + "{";
      t1.first_0 = true;
      $.forEach$1$ax(object, new $._JsonStringifier_stringifyJsonValue_closure(t1, this));
      t2._contents = t2._contents + "}";
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else
      return false;
  },
  stringifyJsonValue$1$bailout: function(state0, object) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        var t1, t2, i;
        if (state0 === 0 && typeof object === "number") {
          t1 = this.sb;
          t2 = $.JSNumber_methods.toString$0(object);
          t1._contents = t1._contents + t2;
          return true;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && object === true) {
                t1 = this.sb;
                t1._contents = t1._contents + "true";
                return true;
              } else
                switch (state0) {
                  case 0:
                  case 1:
                    if (state0 === 0 && object === false) {
                      t1 = this.sb;
                      t1._contents = t1._contents + "false";
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        case 1:
                          if (state0 === 0 && object == null) {
                            t1 = this.sb;
                            t1._contents = t1._contents + "null";
                            return true;
                          } else
                            switch (state0) {
                              case 0:
                              case 1:
                                if (state0 === 0 && typeof object === "string") {
                                  t1 = this.sb;
                                  t1._contents = t1._contents + "\"";
                                  $._JsonStringifier_escape(t1, object);
                                  t1._contents = t1._contents + "\"";
                                  return true;
                                } else
                                  switch (state0) {
                                    case 0:
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList))
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            state0 = 0;
                                            this.checkCycle$1(object);
                                            t1 = this.sb;
                                            t1._contents = t1._contents + "[";
                                            t2 = $.getInterceptor$asx(object);
                                            if ($.$gt$n(t2.get$length(object), 0) === true) {
                                              this.stringifyValue$1(t2.$index(object, 0));
                                              for (i = 1; $.JSNumber_methods.$lt(i, t2.get$length(object)); ++i) {
                                                t1._contents = t1._contents + ",";
                                                this.stringifyValue$1(t2.$index(object, i));
                                              }
                                            }
                                            t1._contents = t1._contents + "]";
                                            t1 = this.seen;
                                            if (0 >= t1.length)
                                              throw $.ioore(0);
                                            t1.pop();
                                            return true;
                                        }
                                      else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
                                        this.checkCycle$1(object);
                                        t2 = this.sb;
                                        t2._contents = t2._contents + "{";
                                        t1.first_0 = true;
                                        $.forEach$1$ax(object, new $._JsonStringifier_stringifyJsonValue_closure(t1, this));
                                        t2._contents = t2._contents + "}";
                                        t1 = this.seen;
                                        if (0 >= t1.length)
                                          throw $.ioore(0);
                                        t1.pop();
                                        return true;
                                      } else
                                        return false;
                                  }
                            }
                      }
                }
          }
    }
  }
};

$$._JsonStringifier_stringifyJsonValue_closure = {"": "Closure;box_0,this_1",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = this.this_1;
    if (!t1.first_0) {
      t2 = t2.get$sb();
      t2.set$_contents(t2.get$_contents() + ",\"");
    } else {
      t2 = t2.get$sb();
      t2.set$_contents(t2.get$_contents() + "\"");
    }
    t2 = this.this_1;
    $._JsonStringifier_escape(t2.get$sb(), key);
    t3 = t2.get$sb();
    t3.set$_contents(t3.get$_contents() + "\":");
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  },
  $isFunction: true
};

$$.Interceptor_ListMixin18 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Length]; }, $isIterable: true, $asIterable: function() { return [$.Length]; }};

$$.Interceptor_ListMixin_ImmutableListMixin18 = {"": "Interceptor_ListMixin18+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Length]; }, $isIterable: true, $asIterable: function() { return [$.Length]; }};

$$.Interceptor_ListMixin19 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Number]; }, $isIterable: true, $asIterable: function() { return [$.Number]; }};

$$.Interceptor_ListMixin_ImmutableListMixin19 = {"": "Interceptor_ListMixin19+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Number]; }, $isIterable: true, $asIterable: function() { return [$.Number]; }};

$$.Interceptor_ListMixin20 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.PathSeg]; }, $isIterable: true, $asIterable: function() { return [$.PathSeg]; }};

$$.Interceptor_ListMixin_ImmutableListMixin20 = {"": "Interceptor_ListMixin20+ImmutableListMixin;", $isList: true, $asList: function() { return [$.PathSeg]; }, $isIterable: true, $asIterable: function() { return [$.PathSeg]; }};

$$.Interceptor_ListMixin21 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.JSString]; }, $isIterable: true, $asIterable: function() { return [$.JSString]; }};

$$.Interceptor_ListMixin_ImmutableListMixin21 = {"": "Interceptor_ListMixin21+ImmutableListMixin;", $isList: true, $asList: function() { return [$.JSString]; }, $isIterable: true, $asIterable: function() { return [$.JSString]; }};

$$._AttributeClassSet = {"": "CssClassSetImpl;_liblib4$_element",
  readClasses$0: function() {
    var classname, s, t1, trimmed;
    classname = $._ElementAttributeMap$(this._liblib4$_element)._element.getAttribute("class");
    s = $.LinkedHashSet$();
    if (classname == null)
      return s;
    for (t1 = $.JSArray_methods.get$iterator($.split$1$s(classname, " ")); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1.get$current());
      if ($.get$isEmpty$asx(trimmed) !== true)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    $._ElementAttributeMap$(this._liblib4$_element)._element.setAttribute("class", s.join$1(s, " "));
  }
};

$$.Interceptor_ListMixin22 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Transform]; }, $isIterable: true, $asIterable: function() { return [$.Transform]; }};

$$.Interceptor_ListMixin_ImmutableListMixin22 = {"": "Interceptor_ListMixin22+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Transform]; }, $isIterable: true, $asIterable: function() { return [$.Transform]; }};

$$.Interceptor_ListMixin23 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.ElementInstance]; }, $isIterable: true, $asIterable: function() { return [$.ElementInstance]; }};

$$.Interceptor_ListMixin_ImmutableListMixin23 = {"": "Interceptor_ListMixin23+ImmutableListMixin;", $isList: true, $asList: function() { return [$.ElementInstance]; }, $isIterable: true, $asIterable: function() { return [$.ElementInstance]; }};

$$.Endianness = {"": "Object;_littleEndian"};

$$.Interceptor_ListMixin24 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Map]; }, $isIterable: true, $asIterable: function() { return [$.Map]; }};

$$.Interceptor_ListMixin_ImmutableListMixin24 = {"": "Interceptor_ListMixin24+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Map]; }, $isIterable: true, $asIterable: function() { return [$.Map]; }};

$$.GoogleChats = {"": "Object;listData,options,div",
  drawVisualization$0: function() {
    var gviz, tableData, chart;
    $._enterScopeIfNeeded();
    gviz = $._deserialize($._jsPortSync.callSync$1([])).get$google().get$visualization();
    $._enterScopeIfNeeded();
    tableData = gviz.arrayToDataTable$1($._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(this.listData))));
    chart = $.Proxy_Proxy$withArgList(gviz.get$LineChart(), $._pruneUndefined(document.querySelector(this.div), $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined));
    $._enterScopeIfNeeded();
    chart.draw$2(tableData, $._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(this.options))));
  },
  get$drawVisualization: function() {
    return new $.BoundClosure$0(this, "drawVisualization$0");
  },
  GoogleChats$3: function(listData, options, div) {
    $.load$3$x($.context().get$google(), "visualization", "1", $.map($.makeLiteralMap(["packages", ["corechart"], "callback", $.Callback$once(this.get$drawVisualization(), false)])));
  }
};

$$.GoogleMaps = {"": "Object;init,maps<,map",
  map$1: function($receiver, arg0) {
    return this.map.call$1(arg0);
  },
  draw$2: function(listData, color) {
    var flightPlanCoordinates, fpo, t1;
    if (!this.init) {
      this.init = true;
      this.drawVisualization$1(listData);
    }
    flightPlanCoordinates = $.List_List($);
    $.forEach$1$ax(listData, new $.GoogleMaps_draw_closure(this, flightPlanCoordinates));
    $._enterScopeIfNeeded();
    fpo = $.makeLiteralMap(["path", $._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(flightPlanCoordinates))), "strokeColor", color, "strokeOpacity", 1, "strokeWeight", 1]);
    t1 = this.maps.get$Polyline();
    $._enterScopeIfNeeded();
    $.Proxy_Proxy$withArgList(t1, $._pruneUndefined($._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(fpo))), $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined)).setMap$1(this.map);
  },
  drawVisualization$1: function(listData) {
    var t1, mapOptions, t2;
    t1 = $.getInterceptor$ax(listData);
    mapOptions = $.makeLiteralMap(["center", $.Proxy_Proxy$withArgList(this.maps.get$LatLng(), $._pruneUndefined($.$div$n($.$index$asx(t1.get$first(listData), 0), 100000), $.$div$n($.$index$asx(t1.get$first(listData), 1), 100000), $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined)), "zoom", 16, "mapTypeId", this.maps.get$MapTypeId().get$ROADMAP()]);
    t1 = this.maps.get$Map();
    t2 = document.querySelector("#map1");
    $._enterScopeIfNeeded();
    this.map = $.Proxy_Proxy$withArgList(t1, $._pruneUndefined(t2, $._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(mapOptions))), $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined));
  },
  GoogleMaps$0: function() {
    this.maps = $.context().get$google().get$maps();
  }
};

$$.GoogleMaps_draw_closure = {"": "Closure;this_0,flightPlanCoordinates_1",
  call$1: function(coords) {
    var t1 = $.getInterceptor$asx(coords);
    this.flightPlanCoordinates_1.push($.Proxy_Proxy$withArgList(this.this_0.get$maps().get$LatLng(), $._pruneUndefined($.$div$n(t1.$index(coords, 0), 100000), $.$div$n(t1.$index(coords, 1), 100000), $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined)));
  },
  $isFunction: true
};

$$.main_closure = {"": "Closure;",
  call$1: function($event) {
    var pNoise;
    $.preventDefault$0$x($event);
    pNoise = $.Primitives_parseDouble($.get$value$x(document.querySelector("#kalmanPNoise")), null);
    $.KalmanTest$($.Primitives_parseDouble($.get$value$x(document.querySelector("#kalmanMNoise")), null), pNoise, $.Primitives_parseDouble($.get$value$x(document.querySelector("#kalmanEx")), null), $.Primitives_parseDouble($.get$value$x(document.querySelector("#kalmanEz")), null));
  },
  $isFunction: true
};

$$.main_closure0 = {"": "Closure;",
  call$1: function($event) {
    var pNoise;
    $.preventDefault$0$x($event);
    pNoise = $.Primitives_parseDouble($.get$value$x(document.querySelector("#pNoise")), null);
    $.SimpleTest$($.Primitives_parseDouble($.get$value$x(document.querySelector("#mNoise")), null), pNoise, $.Primitives_parseInt($.get$value$x(document.querySelector("#pCount")), null, null));
  },
  $isFunction: true
};

$$.main_closure1 = {"": "Closure;",
  call$1: function($event) {
    var pNoise;
    $.preventDefault$0$x($event);
    pNoise = $.Primitives_parseDouble($.get$value$x(document.querySelector("#pNoise1")), null);
    $.MoveTest$($.Primitives_parseDouble($.get$value$x(document.querySelector("#mNoise1")), null), pNoise, $.Primitives_parseInt($.get$value$x(document.querySelector("#pCount1")), null, null));
  },
  $isFunction: true
};

$$.initMenu_select = {"": "Closure;",
  call$1: function(newActive) {
    var t1, t2;
    t1 = $.get$selected();
    t2 = $.active;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = "hide";
    t2 = $.get$activeTab();
    t1 = $.active;
    if (t1 >>> 0 !== t1 || t1 >= t2.length)
      throw $.ioore(t1);
    t2[t1] = "";
    $.active = newActive;
    t1 = $.get$selected();
    t2 = $.active;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = "show";
    t2 = $.get$activeTab();
    t1 = $.active;
    if (t1 >>> 0 !== t1 || t1 >= t2.length)
      throw $.ioore(t1);
    t2[t1] = "active";
    $.dispatch();
  },
  $isFunction: true
};

$$.initMenu_closure = {"": "Closure;select_0",
  call$1: function(e) {
    var t1 = $.getInterceptor$x(e);
    $.add$1$ax(t1.get$classes(e), "hide");
    t1.get$onClick(e).listen$1(new $.initMenu__closure(this.select_0, e));
  },
  $isFunction: true
};

$$.initMenu__closure = {"": "Closure;select_1,e_2",
  call$1: function($event) {
    this.select_1.call$1($.Primitives_parseInt($.$index$asx($.get$attributes$x(this.e_2), "x-tab"), null, null));
  },
  $isFunction: true
};

$$.Kalman = {"": "Object;s",
  filter$1: function(_, measurement) {
    var t1, t2, S, K, Z, y, t3;
    t1 = this.s;
    t2 = t1.H;
    t2 = t2.$mul(t2, t1.P);
    t2 = t2.$mul(t2, t1.H.transpose$0());
    S = t2.$add(t2, t1.Ez);
    t2 = t1.P;
    t2 = t2.$mul(t2, t1.H.transpose$0());
    K = t2.$mul(t2, S.invert$0());
    Z = $.Matrix$fromList(measurement);
    t2 = t1.H;
    y = Z.$sub(Z, t2.$mul(t2, t1.x));
    t2 = t1.x;
    if (typeof t2 !== "number")
      return this.filter$1$bailout(1, t1, t2, K, y);
    t3 = K.$mul(K, y);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t1.x = t2 + t3;
    t1.out = $.clone$0$x(t1.x);
    t3 = t1.I;
    t3 = t3.$sub(t3, K.$mul(K, t1.H));
    t1.P = t3.$mul(t3, t1.P);
    t3 = t1.F;
    t1.x = t3.$mul(t3, t1.x);
    t3 = t1.x;
    if (typeof t3 !== "number")
      return this.filter$1$bailout(2, t1, t3);
    t2 = t1.B;
    t2 = t2.$mul(t2, t1.u);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t1.x = t3 + t2;
    t2 = t1.F;
    t2 = t2.$mul(t2, t1.P);
    t2 = t2.$mul(t2, t1.F.transpose$0());
    t1.P = t2.$add(t2, t1.Ex);
  },
  filter$1$bailout: function(state0, t1, t2, K, y) {
    switch (state0) {
      case 0:
        t1 = this.s;
        t2 = t1.H;
        t2 = t2.$mul(t2, t1.P);
        t2 = t2.$mul(t2, t1.H.transpose$0());
        S = t2.$add(t2, t1.Ez);
        t2 = t1.P;
        t2 = t2.$mul(t2, t1.H.transpose$0());
        K = t2.$mul(t2, S.invert$0());
        Z = $.Matrix$fromList(measurement);
        t2 = t1.H;
        y = Z.$sub(Z, t2.$mul(t2, t1.x));
        t2 = t1.x;
      case 1:
        state0 = 0;
        t1.x = $.$add$ns(t2, K.$mul(K, y));
        t1.out = $.clone$0$x(t1.x);
        t2 = t1.I;
        t2 = t2.$sub(t2, K.$mul(K, t1.H));
        t1.P = t2.$mul(t2, t1.P);
        t2 = t1.F;
        t1.x = t2.$mul(t2, t1.x);
        t2 = t1.x;
      case 2:
        var S, Z, t3;
        state0 = 0;
        t3 = t1.B;
        t1.x = $.$add$ns(t2, t3.$mul(t3, t1.u));
        t3 = t1.F;
        t3 = t3.$mul(t3, t1.P);
        t3 = t3.$mul(t3, t1.F.transpose$0());
        t1.P = t3.$add(t3, t1.Ex);
    }
  }
};

$$.KalmanModel = {"": "Object;x,z,u,F,B,P,H,Ez,Ex,I,out",
  toString$0: function(_) {
    return $.JSString_methods.$add("", $.toString$0(this.x));
  }
};

$$.Particles = {"": "Object;r,s",
  generate$2: function(m, o) {
    var t1, i, t2, t3;
    for (t1 = this.s, i = 0; $.JSNumber_methods.$lt(i, t1.count); ++i) {
      t2 = t1.particles;
      t3 = t1.generate$2(m, o);
      if (i >= t2.length)
        throw $.ioore(i);
      t2[i] = t3;
    }
  },
  move$0: function() {
    var t1, i, t2;
    t1 = this.s;
    i = 0;
    while (true) {
      t2 = t1.count;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t2 = t1.particles;
      if (i >= t2.length)
        throw $.ioore(i);
      t1.move$1(t2[i]);
      ++i;
    }
  },
  weight$1: function(_, measured) {
    var t1, sum, i, t2, t3, t4;
    t1 = this.s;
    t1.maxWeight = 0;
    sum = 0;
    i = 0;
    while (true) {
      t2 = t1.count;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t2 = t1.weights;
      t3 = t1.particles;
      if (i >= t3.length)
        throw $.ioore(i);
      t3 = t1.weight$2(t1, measured, t3[i]);
      if (i >= t2.length)
        throw $.ioore(i);
      t2[i] = t3;
      t3 = t1.weights;
      if (i >= t3.length)
        throw $.ioore(i);
      t3 = t3[i];
      if (typeof t3 !== "number")
        throw $.iae(t3);
      sum += t3;
      ++i;
    }
    if (sum === 0)
      sum = 1;
    for (i = 0; i < t2; ++i) {
      t3 = t1.weights;
      if (i >= t3.length)
        throw $.ioore(i);
      t4 = t3[i];
      if (typeof t4 !== "number")
        return this.weight$1$bailout(2, sum, t2, t1, t3, t4, i);
      t3[i] = t4 / sum;
      t3 = t3[i];
      if (typeof t3 !== "number")
        return this.weight$1$bailout(3, sum, t2, t1, t3, 0, i);
      t4 = t1.maxWeight;
      if (typeof t4 !== "number")
        return this.weight$1$bailout(4, sum, t2, t1, t3, t4, i);
      if (t3 > t4)
        t1.maxWeight = t3;
    }
  },
  weight$1$bailout: function(state0, sum, t2, t1, t3, t4, i) {
    switch (state0) {
      case 0:
        t1 = this.s;
        t1.maxWeight = 0;
        sum = 0;
        i = 0;
        while (true) {
          t2 = t1.count;
          if (typeof t2 !== "number")
            throw $.iae(t2);
          if (!$.JSNumber_methods.$lt(i, t2))
            break;
          t2 = t1.weights;
          t3 = t1.particles;
          if (i >= t3.length)
            throw $.ioore(i);
          t3 = t1.weight$2(t1, measured, t3[i]);
          if (i >= t2.length)
            throw $.ioore(i);
          t2[i] = t3;
          t3 = t1.weights;
          if (i >= t3.length)
            throw $.ioore(i);
          t3 = t3[i];
          if (typeof t3 !== "number")
            throw $.iae(t3);
          sum += t3;
          ++i;
        }
        if (sum === 0)
          sum = 1;
      case 1:
        state0 = 0;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.JSNumber_methods.$lt(i, t2))
                  break L0;
                t3 = t1.weights;
                if (i >= t3.length)
                  throw $.ioore(i);
                t4 = t3[i];
              case 2:
                state0 = 0;
                t3[i] = $.$div$n(t4, sum);
                t3 = t1.weights;
                if (i >= t3.length)
                  throw $.ioore(i);
                t3 = t3[i];
              case 3:
                state0 = 0;
                t4 = t1.maxWeight;
              case 4:
                state0 = 0;
                if ($.$gt$n(t3, t4) === true) {
                  t3 = t1.weights;
                  if (i >= t3.length)
                    throw $.ioore(i);
                  t1.maxWeight = t3[i];
                }
                ++i;
            }
    }
  },
  resample$0: function() {
    var t1, t2, newParticles, max, index, t3, i, t4, t5, beta, t6;
    t1 = this.s;
    t2 = t1.count;
    if (typeof t2 !== "number")
      return this.resample$0$bailout(1, t1, t2);
    newParticles = $.List_List(t2);
    if (t2 < 0)
      $.throwExpression($.ArgumentError$("negative max: " + $.S(t2)));
    if (t2 > 4294967295)
      max = 4294967295;
    else
      max = t2;
    index = Math.random() * max >>> 0;
    for (t3 = newParticles.length, i = 0; i < t2; ++i) {
      t4 = Math.random();
      t5 = t1.maxWeight;
      if (typeof t5 !== "number")
        throw $.iae(t5);
      beta = t4 * 2 * t5;
      t4 = t1.weights;
      t5 = t4.length;
      while (true) {
        if (index < 0 || index >= t5)
          throw $.ioore(index);
        t6 = t4[index];
        if (typeof t6 !== "number")
          return this.resample$0$bailout(2, t1, t2, beta, newParticles, t3, t6, i, index);
        if (!(beta > t6))
          break;
        beta -= t6;
        t6 = index + 1;
        if (t2 !== (t2 | 0))
          return this.resample$0$bailout(3, t1, t2, beta, newParticles, t3, t6, i, 0, t5, t4);
        index = $.JSNumber_methods.$mod(t6, t2);
        if (index !== (index | 0))
          return this.resample$0$bailout(4, t1, t2, beta, newParticles, t3, 0, i, index, t5, t4);
      }
      t4 = t1.particles;
      if (index >= t4.length)
        throw $.ioore(index);
      t4 = t1.clone$1(t1, t4[index]);
      if (i >= t3)
        throw $.ioore(i);
      newParticles[i] = t4;
    }
    t1.particles = newParticles;
  },
  resample$0$bailout: function(state0, t1, t2, beta, newParticles, t3, t6, i, index, t5, t4) {
    switch (state0) {
      case 0:
        t1 = this.s;
        t2 = t1.count;
      case 1:
        state0 = 0;
        newParticles = $.List_List(t2);
        t3 = $.getInterceptor$n(t2);
        if (t3.$lt(t2, 0) === true)
          $.throwExpression($.ArgumentError$("negative max: " + $.S(t2)));
        max = t3.$gt(t2, 4294967295) === true ? 4294967295 : t2;
        index = Math.random() * max >>> 0;
        t3 = newParticles.length;
        i = 0;
      default:
        var max;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.JSNumber_methods.$lt(i, t2))
                  break L0;
                t4 = Math.random();
                t5 = t1.maxWeight;
                if (typeof t5 !== "number")
                  throw $.iae(t5);
                beta = t4 * 2 * t5;
                t4 = t1.weights;
                t5 = t4.length;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (index >>> 0 !== index || index >= t5)
                          throw $.ioore(index);
                        t6 = t4[index];
                      case 2:
                        state0 = 0;
                        if (!$.JSNumber_methods.$gt(beta, t6))
                          break L1;
                        if (typeof t6 !== "number")
                          throw $.iae(t6);
                        beta -= t6;
                        t6 = index + 1;
                        if (typeof t2 !== "number")
                          throw $.iae(t2);
                      case 3:
                        state0 = 0;
                        index = $.JSNumber_methods.$mod(t6, t2);
                      case 4:
                        state0 = 0;
                    }
                t4 = t1.particles;
                if (index >= t4.length)
                  throw $.ioore(index);
                t4 = t1.clone$1(t1, t4[index]);
                if (i >= t3)
                  throw $.ioore(i);
                newParticles[i] = t4;
                ++i;
            }
        t1.particles = newParticles;
    }
  }
};

$$.ParticlesModel = {"": "Object;count,particles,weights,move,generate,mean,aNoise,mNoise,weight,clone,maxWeight",
  particles$1: function(arg0) {
    return this.particles.call$1(arg0);
  },
  move$1: function(arg0) {
    return this.move.call$1(arg0);
  },
  generate$2: function(arg0, arg1) {
    return this.generate.call$2(arg0, arg1);
  },
  mean$2: function(arg0, arg1) {
    return this.mean.call$2(arg0, arg1);
  },
  weight$2: function($receiver, arg0, arg1) {
    return this.weight.call$2(arg0, arg1);
  },
  clone$0: function($receiver) {
    return this.clone.call$0();
  },
  clone$1: function($receiver, arg0) {
    return this.clone.call$1(arg0);
  },
  ParticlesModel$8: function(count, move, generate, mean, aNoise, mNoise, weight, clone) {
    var t1 = this.count;
    this.particles = $.List_List(t1);
    this.weights = $.List_List(t1);
  }
};

$$.Matrix = {"": "Object;m<,rows,columns",
  $mul: function(_, m) {
    var t1, result, sum, row, column, i, t2;
    if (typeof m !== "number")
      return this.$$mul$bailout(1, m);
    t1 = this.rows;
    if (typeof m === "object" && m !== null && !!$.getInterceptor(m).$isMatrix) {
      result = $.Matrix$(t1, m.columns);
      for (sum = null, row = 0; $.JSNumber_methods.$lt(row, this.rows); ++row)
        for (column = 0; $.JSNumber_methods.$lt(column, m.columns); ++column) {
          for (sum = 0, i = 0; $.JSNumber_methods.$lt(i, this.columns); ++i) {
            t1 = this.m;
            if (row >= t1.length)
              throw $.ioore(row);
            t1 = t1[row];
            if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
              return this.$$mul$bailout(2, m, column, t1, row, sum, result, i);
            if (i >= t1.length)
              throw $.ioore(i);
            t1 = t1[i];
            t2 = m.m;
            if (i >= t2.length)
              throw $.ioore(i);
            t2 = t2[i];
            if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior))
              return this.$$mul$bailout(3, m, column, t1, row, sum, result, i, t2);
            if (column >= t2.length)
              throw $.ioore(column);
            t2 = $.$mul$n(t1, t2[column]);
            if (typeof t2 !== "number")
              throw $.iae(t2);
            sum += t2;
          }
          t1 = result.m;
          if (row >= t1.length)
            throw $.ioore(row);
          t1 = t1[row];
          if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior)
            return this.$$mul$bailout(4, m, column, t1, row, sum, result);
          if (column >= t1.length)
            throw $.ioore(column);
          t1[column] = sum;
        }
    } else {
      result = $.Matrix$(t1, this.columns);
      for (row = 0; $.JSNumber_methods.$lt(row, this.rows); ++row)
        for (column = 0; $.JSNumber_methods.$lt(column, this.columns); ++column) {
          t1 = result.m;
          if (row >= t1.length)
            throw $.ioore(row);
          t1 = t1[row];
          if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior)
            return this.$$mul$bailout(5, m, column, t1, row, 0, result);
          t2 = this.m;
          if (row >= t2.length)
            throw $.ioore(row);
          t2 = t2[row];
          if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior))
            return this.$$mul$bailout(6, m, column, t1, row, 0, result, 0, t2);
          if (column >= t2.length)
            throw $.ioore(column);
          t2 = $.$mul$n(t2[column], m);
          if (column >= t1.length)
            throw $.ioore(column);
          t1[column] = t2;
        }
    }
    return result;
  },
  $$mul$bailout: function(state0, m, column, t1, row, sum, result, i, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.rows;
      default:
        if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && typeof m === "object" && m !== null && !!$.getInterceptor(m).$isMatrix)
          switch (state0) {
            case 0:
              result = $.Matrix$(t1, m.columns);
              sum = null;
              row = 0;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.JSNumber_methods.$lt(row, this.rows))
                        break L0;
                      column = 0;
                    default:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              if (!$.JSNumber_methods.$lt(column, m.columns))
                                break L1;
                              sum = 0;
                              i = 0;
                            default:
                              L2:
                                while (true)
                                  switch (state0) {
                                    case 0:
                                      if (!$.JSNumber_methods.$lt(i, this.columns))
                                        break L2;
                                      t1 = this.m;
                                      if (row >= t1.length)
                                        throw $.ioore(row);
                                      t1 = t1[row];
                                    case 2:
                                      state0 = 0;
                                      t1 = $.$index$asx(t1, i);
                                      t2 = m.m;
                                      if (i >= t2.length)
                                        throw $.ioore(i);
                                      t2 = t2[i];
                                    case 3:
                                      state0 = 0;
                                      t2 = $.$mul$n(t1, $.$index$asx(t2, column));
                                      if (typeof t2 !== "number")
                                        throw $.iae(t2);
                                      sum += t2;
                                      ++i;
                                  }
                              t1 = result.m;
                              if (row >= t1.length)
                                throw $.ioore(row);
                              t1 = t1[row];
                            case 4:
                              state0 = 0;
                              $.$indexSet$ax(t1, column, sum);
                              ++column;
                          }
                      ++row;
                  }
          }
        else
          switch (state0) {
            case 0:
              result = $.Matrix$(t1, this.columns);
              row = 0;
            default:
              L3:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.JSNumber_methods.$lt(row, this.rows))
                        break L3;
                      column = 0;
                    default:
                      L4:
                        while (true)
                          switch (state0) {
                            case 0:
                              if (!$.JSNumber_methods.$lt(column, this.columns))
                                break L4;
                              t1 = result.m;
                              if (row >= t1.length)
                                throw $.ioore(row);
                              t1 = t1[row];
                            case 5:
                              state0 = 0;
                              t2 = this.m;
                              if (row >= t2.length)
                                throw $.ioore(row);
                              t2 = t2[row];
                            case 6:
                              state0 = 0;
                              $.$indexSet$ax(t1, column, $.$mul$n($.$index$asx(t2, column), m));
                              ++column;
                          }
                      ++row;
                  }
          }
        return result;
    }
  },
  $div: function(_, a) {
    var result, row, column, t1, t2;
    if (typeof a !== "number")
      return this.$$div$bailout(1, a);
    result = $.Matrix$(this.rows, this.columns);
    for (row = 0; $.JSNumber_methods.$lt(row, this.rows); ++row)
      for (column = 0; $.JSNumber_methods.$lt(column, this.columns); ++column) {
        t1 = result.m;
        if (row >= t1.length)
          throw $.ioore(row);
        t1 = t1[row];
        if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior)
          return this.$$div$bailout(2, a, t1, column, result, row);
        t2 = this.m;
        if (row >= t2.length)
          throw $.ioore(row);
        t2 = t2[row];
        if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior))
          return this.$$div$bailout(3, a, t1, column, result, row, t2);
        if (column >= t2.length)
          throw $.ioore(column);
        t2 = $.$div$n(t2[column], a);
        if (column >= t1.length)
          throw $.ioore(column);
        t1[column] = t2;
      }
    return result;
  },
  $$div$bailout: function(state0, a, t1, column, result, row, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        result = $.Matrix$(this.rows, this.columns);
        row = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.JSNumber_methods.$lt(row, this.rows))
                  break L0;
                column = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!$.JSNumber_methods.$lt(column, this.columns))
                          break L1;
                        t1 = result.m;
                        if (row >= t1.length)
                          throw $.ioore(row);
                        t1 = t1[row];
                      case 2:
                        state0 = 0;
                        t2 = this.m;
                        if (row >= t2.length)
                          throw $.ioore(row);
                        t2 = t2[row];
                      case 3:
                        state0 = 0;
                        $.$indexSet$ax(t1, column, $.$div$n($.$index$asx(t2, column), a));
                        ++column;
                    }
                ++row;
            }
        return result;
    }
  },
  $add: function(_, m) {
    var result, row, column, t1, t2;
    result = $.Matrix$(this.rows, this.columns);
    for (row = 0; $.JSNumber_methods.$lt(row, this.rows); ++row)
      for (column = 0; $.JSNumber_methods.$lt(column, this.columns); ++column) {
        t1 = result.m;
        if (row >= t1.length)
          throw $.ioore(row);
        t1 = t1[row];
        t2 = this.m;
        if (row >= t2.length)
          throw $.ioore(row);
        $.$indexSet$ax(t1, column, $.$add$ns($.$index$asx(t2[row], column), $.$index$asx($.$index$asx(m.get$m(), row), column)));
      }
    return result;
  },
  $sub: function(_, m) {
    var result, row, column, t1, t2;
    result = $.Matrix$(this.rows, this.columns);
    for (row = 0; $.JSNumber_methods.$lt(row, this.rows); ++row)
      for (column = 0; $.JSNumber_methods.$lt(column, this.columns); ++column) {
        t1 = result.m;
        if (row >= t1.length)
          throw $.ioore(row);
        t1 = t1[row];
        t2 = this.m;
        if (row >= t2.length)
          throw $.ioore(row);
        $.$indexSet$ax(t1, column, $.$sub$n($.$index$asx(t2[row], column), $.$index$asx($.$index$asx(m.get$m(), row), column)));
      }
    return result;
  },
  invert$0: function() {
    var t1, nm, determinant, row, column, t2, t3;
    if ($.$eq(this.rows, 1)) {
      t1 = this.m;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1 = $.$index$asx(t1[0], 0);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      return $.Matrix$fromList([[1 / t1]]);
    }
    nm = $.Matrix$(this.rows, this.columns);
    determinant = this.det$0();
    for (row = 0; $.JSNumber_methods.$lt(row, this.rows); ++row)
      for (column = 0; $.JSNumber_methods.$lt(column, this.columns); ++column) {
        t1 = nm.m;
        if (row >= t1.length)
          throw $.ioore(row);
        t1 = t1[row];
        t2 = row + column;
        t2 = Math.pow(-1, t2);
        t3 = this.minor$2(row, column).det$0();
        if (typeof t3 !== "number")
          throw $.iae(t3);
        $.$indexSet$ax(t1, column, t2 * t3);
      }
    return nm.$div(nm, determinant);
  },
  transpose$0: function() {
    var nm, row, column, t1, t2;
    nm = $.Matrix$(this.columns, this.rows);
    for (row = 0; $.JSNumber_methods.$lt(row, this.rows); ++row)
      for (column = 0; $.JSNumber_methods.$lt(column, this.columns); ++column) {
        t1 = nm.m;
        if (column >= t1.length)
          throw $.ioore(column);
        t1 = t1[column];
        t2 = this.m;
        if (row >= t2.length)
          throw $.ioore(row);
        $.$indexSet$ax(t1, row, $.$index$asx(t2[row], column));
      }
    return nm;
  },
  det$0: function() {
    var t1, t2, t3, t4, determinant, c;
    t1 = this.rows;
    if (typeof t1 !== "number")
      return this.det$0$bailout(1, t1);
    if (t1 === 1) {
      t1 = this.m;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1 = t1[0];
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
        return this.det$0$bailout(2, t1);
      if (0 >= t1.length)
        throw $.ioore(0);
      return t1[0];
    } else if (t1 === 2) {
      t1 = this.m;
      t2 = t1.length;
      if (0 >= t2)
        throw $.ioore(0);
      t3 = t1[0];
      if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !$.getInterceptor(t3).$isJavaScriptIndexingBehavior))
        return this.det$0$bailout(4, t3);
      if (0 >= t3.length)
        throw $.ioore(0);
      t4 = t3[0];
      if (typeof t4 !== "number")
        return this.det$0$bailout(5, t4);
      if (1 >= t2)
        throw $.ioore(1);
      t1 = t1[1];
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
        return this.det$0$bailout(6, t4, t1);
      if (1 >= t1.length)
        throw $.ioore(1);
      t2 = t1[1];
      if (typeof t2 !== "number")
        return this.det$0$bailout(7, t4, t2);
      t2 = t4 * t2;
      if (1 >= t3.length)
        throw $.ioore(1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return this.det$0$bailout(9, t3, t2);
      if (0 >= t1.length)
        throw $.ioore(0);
      t1 = t1[0];
      if (typeof t1 !== "number")
        return this.det$0$bailout(11, t3, t2, t1);
      return t2 - t3 * t1;
    } else {
      determinant = 0;
      c = 0;
      while (true) {
        t1 = this.columns;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        if (!(c < t1))
          break;
        t1 = Math.pow(-1, c);
        t2 = this.m;
        if (0 >= t2.length)
          throw $.ioore(0);
        t2 = t2[0];
        if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior))
          return this.det$0$bailout(12, t1, t2, 0, c, determinant);
        if (c >= t2.length)
          throw $.ioore(c);
        t2 = t2[c];
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t3 = this.minor$2(0, c).det$0();
        if (typeof t3 !== "number")
          throw $.iae(t3);
        determinant += t1 * t2 * t3;
        ++c;
      }
      return determinant;
    }
  },
  det$0$bailout: function(state0, t1, t2, t3, c, determinant) {
    switch (state0) {
      case 0:
        t1 = this.rows;
      case 1:
        state0 = 0;
      default:
        if (state0 === 2 || state0 === 0 && $.$eq(t1, 1))
          switch (state0) {
            case 0:
              t1 = this.m;
              if (0 >= t1.length)
                throw $.ioore(0);
              t1 = t1[0];
            case 2:
              state0 = 0;
              return $.$index$asx(t1, 0);
          }
        else
          switch (state0) {
            case 0:
              t1 = this.rows;
            case 3:
              state0 = 0;
            default:
              if (state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && $.$eq(t1, 2))
                switch (state0) {
                  case 0:
                    t1 = this.m;
                    if (0 >= t1.length)
                      throw $.ioore(0);
                    t1 = t1[0];
                  case 4:
                    state0 = 0;
                    t1 = $.$index$asx(t1, 0);
                  case 5:
                    state0 = 0;
                    t2 = this.m;
                    if (1 >= t2.length)
                      throw $.ioore(1);
                    t2 = t2[1];
                  case 6:
                    state0 = 0;
                    t2 = $.$index$asx(t2, 1);
                  case 7:
                    state0 = 0;
                    t2 = $.$mul$n(t1, t2);
                    t1 = this.m;
                    if (0 >= t1.length)
                      throw $.ioore(0);
                    t1 = t1[0];
                  case 8:
                    state0 = 0;
                    t1 = $.$index$asx(t1, 1);
                  case 9:
                    state0 = 0;
                    t3 = this.m;
                    if (1 >= t3.length)
                      throw $.ioore(1);
                    t3 = t3[1];
                  case 10:
                    state0 = 0;
                    t3 = $.$index$asx(t3, 0);
                  case 11:
                    state0 = 0;
                    return $.$sub$n(t2, $.$mul$n(t1, t3));
                }
              else
                switch (state0) {
                  case 0:
                    determinant = 0;
                    c = 0;
                  case 12:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            t1 = this.columns;
                            if (typeof t1 !== "number")
                              throw $.iae(t1);
                            if (!$.JSNumber_methods.$lt(c, t1))
                              break L0;
                            t1 = Math.pow(-1, c);
                            t2 = this.m;
                            if (0 >= t2.length)
                              throw $.ioore(0);
                            t2 = t2[0];
                          case 12:
                            state0 = 0;
                            t2 = $.$index$asx(t2, c);
                            if (typeof t2 !== "number")
                              throw $.iae(t2);
                            t3 = this.minor$2(0, c).det$0();
                            if (typeof t3 !== "number")
                              throw $.iae(t3);
                            determinant += t1 * t2 * t3;
                            ++c;
                        }
                    return determinant;
                }
          }
    }
  },
  minor$2: function(row, column) {
    var t1, t2, nm, t3, t4, t5, i, r, t6, j, c, t7, t8;
    t1 = this.rows;
    if (typeof t1 !== "number")
      return this.minor$2$bailout(1, row, column, t1);
    --t1;
    t2 = this.columns;
    if (typeof t2 !== "number")
      return this.minor$2$bailout(2, row, column, t1, t2);
    nm = $.Matrix$(t1, t2 - 1);
    t1 = this.columns;
    t2 = nm.m;
    t3 = t2.length;
    t4 = this.m;
    t5 = t4.length;
    i = 0;
    r = 0;
    while (true) {
      t6 = this.rows;
      if (typeof t6 !== "number")
        throw $.iae(t6);
      if (!(r < t6))
        break;
      t6 = r !== row;
      if (t6) {
        j = 0;
        c = 0;
        while (true) {
          if (typeof t1 !== "number")
            throw $.iae(t1);
          if (!(c < t1))
            break;
          if (t6 && c !== column) {
            if (i >= t3)
              throw $.ioore(i);
            t7 = t2[i];
            if (typeof t7 !== "object" || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !$.getInterceptor(t7).$isJavaScriptIndexingBehavior)
              return this.minor$2$bailout(3, row, column, t6, t7, r, i, j, c, nm);
            if (r >= t5)
              throw $.ioore(r);
            t8 = t4[r];
            if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !$.getInterceptor(t8).$isJavaScriptIndexingBehavior))
              return this.minor$2$bailout(4, row, column, t6, t7, r, i, j, c, nm, t8);
            if (c >= t8.length)
              throw $.ioore(c);
            t8 = t8[c];
            if (j >= t7.length)
              throw $.ioore(j);
            t7[j] = t8;
            ++j;
          }
          ++c;
        }
        ++i;
      }
      ++r;
    }
    return nm;
  },
  minor$2$bailout: function(state0, row, column, t1, t2, r, i, j, c, nm, t3) {
    switch (state0) {
      case 0:
        t1 = this.rows;
      case 1:
        state0 = 0;
        t1 = $.$sub$n(t1, 1);
        t2 = this.columns;
      case 2:
        state0 = 0;
        nm = $.Matrix$(t1, $.$sub$n(t2, 1));
        i = 0;
        r = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.rows;
                if (typeof t1 !== "number")
                  throw $.iae(t1);
                if (!$.JSNumber_methods.$lt(r, t1))
                  break L0;
                t1 = r !== row;
              default:
                if (state0 === 4 || state0 === 3 || state0 === 0 && t1)
                  switch (state0) {
                    case 0:
                      j = 0;
                      c = 0;
                    default:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t2 = this.columns;
                              if (typeof t2 !== "number")
                                throw $.iae(t2);
                              if (!$.JSNumber_methods.$lt(c, t2))
                                break L1;
                            default:
                              if (state0 === 4 || state0 === 3 || state0 === 0 && t1 && c !== column)
                                switch (state0) {
                                  case 0:
                                    t2 = nm.m;
                                    if (i >= t2.length)
                                      throw $.ioore(i);
                                    t2 = t2[i];
                                  case 3:
                                    state0 = 0;
                                    t3 = this.m;
                                    if (r >= t3.length)
                                      throw $.ioore(r);
                                    t3 = t3[r];
                                  case 4:
                                    state0 = 0;
                                    $.$indexSet$ax(t2, j, $.$index$asx(t3, c));
                                    ++j;
                                }
                              ++c;
                          }
                      ++i;
                  }
                ++r;
            }
        return nm;
    }
  },
  clone$0: function(_) {
    return $.Matrix$fromList(this.m);
  },
  toString$0: function(_) {
    var s, row, column, t1;
    for (s = "", row = 0; $.JSNumber_methods.$lt(row, this.rows); ++row) {
      s = $.JSString_methods.$add(s, "[");
      for (column = 0; $.JSNumber_methods.$lt(column, this.columns); ++column) {
        t1 = this.m;
        if (row >= t1.length)
          throw $.ioore(row);
        s = $.JSString_methods.$add(s, $.$add$ns($.toString$0($.$index$asx(t1[row], column)), ", "));
      }
      s = $.JSString_methods.$add(s, "]\n");
    }
    return s;
  },
  Matrix$fromList$1: function(values) {
    var row, t1, t2, column;
    this.rows = values.length;
    if (0 >= values.length)
      throw $.ioore(0);
    this.columns = $.get$length$asx(values[0]);
    this.m = $.List_List(this.rows);
    for (row = 0; $.JSNumber_methods.$lt(row, this.rows); ++row) {
      t1 = this.m;
      t2 = $.List_List(this.columns);
      if (row >= t1.length)
        throw $.ioore(row);
      t1[row] = t2;
      for (column = 0; $.JSNumber_methods.$lt(column, this.columns); ++column) {
        t1 = this.m;
        if (row >= t1.length)
          throw $.ioore(row);
        t1 = t1[row];
        if (row >= values.length)
          throw $.ioore(row);
        $.$indexSet$ax(t1, column, $.$index$asx(values[row], column));
      }
    }
  },
  Matrix$2: function(rows, columns) {
    var row, t1, t2;
    this.m = $.List_List(this.rows);
    for (row = 0; $.JSNumber_methods.$lt(row, this.rows); ++row) {
      t1 = this.m;
      t2 = $.List_List(this.columns);
      if (row >= t1.length)
        throw $.ioore(row);
      t1[row] = t2;
    }
  },
  $isMatrix: true
};

$$.KalmanTest = {"": "Object;pNoise,mNoise,Ex,Ez",
  graph$1: function(m) {
    var data, data2, met, kt, i, t1, t2, me, k, options;
    data = $.List_List($);
    data2 = $.List_List($);
    data.push(["t", "real", "measured", "kalman"]);
    data2.push(["t", "m", "m total", "k", "k total"]);
    for (met = 0, kt = 0, i = 0; i < m.length; ++i) {
      t1 = $.$index$asx(m[i], "real");
      if (i >= m.length)
        throw $.ioore(i);
      t2 = $.$index$asx(m[i], "measured");
      if (i >= m.length)
        throw $.ioore(i);
      data.push([i, t1, t2, $.$index$asx(m[i], "kalman")]);
      if (i >= m.length)
        throw $.ioore(i);
      t2 = $.$index$asx(m[i], "real");
      if (i >= m.length)
        throw $.ioore(i);
      me = $.abs$0$n($.$sub$n(t2, $.$index$asx(m[i], "measured")));
      if (typeof me !== "number")
        throw $.iae(me);
      met += me;
      if (i >= m.length)
        throw $.ioore(i);
      t2 = $.$index$asx(m[i], "real");
      if (i >= m.length)
        throw $.ioore(i);
      k = $.abs$0$n($.$sub$n(t2, $.$index$asx(m[i], "kalman")));
      if (typeof k !== "number")
        throw $.iae(k);
      kt += k;
      data2.push([i, me, met, k, kt]);
    }
    options = $.makeLiteralMap(["title", "Kalman filter"]);
    $.GoogleChats$(data, options, "#kalmanc1");
    $.GoogleChats$(data2, options, "#kalmanc2");
  },
  kalman$3: function(measurements, mNoise, pNoise) {
    var s, filter, i;
    s = $.KalmanModel$();
    filter = $.Kalman$(s);
    s.x = $.Matrix$fromList([[0]]);
    s.P = $.Matrix$fromList([[1000000000]]);
    s.u = $.Matrix$fromList([[0]]);
    s.B = $.Matrix$fromList([[0]]);
    s.F = $.Matrix$fromList([[1]]);
    s.H = $.Matrix$fromList([[1]]);
    s.Ez = $.Matrix$fromList([[this.Ez]]);
    s.Ex = $.Matrix$fromList([[this.Ex]]);
    s.I = $.Matrix$fromList([[1]]);
    for (i = 0; i < measurements.length; ++i) {
      filter.filter$1(filter, [[$.$index$asx(measurements[i], "measured")]]);
      if (i >= measurements.length)
        throw $.ioore(i);
      $.$indexSet$ax(measurements[i], "kalman", $.$index$asx($.$index$asx(s.out.get$m(), 0), 0));
    }
    return measurements;
  },
  KalmanTest$4: function(mNoise, pNoise, Ex, Ez) {
    var measurements, i, t1;
    measurements = $.List_List($);
    for (i = 0; t1 = this.pNoise, i < 50; ++i)
      measurements.push($.makeLiteralMap(["real", 10 + $.Gaussian_normal(0, t1), "measured", 10 + $.Gaussian_normal(0, this.mNoise)]));
    this.graph$1(this.kalman$3(measurements, this.mNoise, t1));
  }
};

$$.MoveTest = {"": "Object;pNoise,mNoise,pCount",
  graph$1: function(m) {
    var data, data2, met, kt, pt, i, t1, t2, t3, me, k, p, options;
    if (typeof m !== "string" && (typeof m !== "object" || m === null || m.constructor !== Array && !$.getInterceptor(m).$isJavaScriptIndexingBehavior))
      return this.graph$1$bailout(1, m);
    data = $.List_List($);
    data2 = $.List_List($);
    data.push(["t", "real", "measured", "kalman", "particles"]);
    data2.push(["t", "m", "m total", "k", "k total", "p", "p total"]);
    for (met = 0, kt = 0, pt = 0, i = 0; i < m.length; ++i) {
      t1 = $.$index$asx(m[i], "real");
      if (i >= m.length)
        throw $.ioore(i);
      t2 = $.$index$asx(m[i], "measured");
      if (i >= m.length)
        throw $.ioore(i);
      t3 = $.$index$asx(m[i], "kalman");
      if (i >= m.length)
        throw $.ioore(i);
      data.push([i, t1, t2, t3, $.$index$asx(m[i], "particles")]);
      if (i >= m.length)
        throw $.ioore(i);
      t3 = $.$index$asx(m[i], "real");
      if (i >= m.length)
        throw $.ioore(i);
      me = $.abs$0$n($.$sub$n(t3, $.$index$asx(m[i], "measured")));
      if (typeof me !== "number")
        throw $.iae(me);
      met += me;
      if (i >= m.length)
        throw $.ioore(i);
      t3 = $.$index$asx(m[i], "real");
      if (i >= m.length)
        throw $.ioore(i);
      k = $.abs$0$n($.$sub$n(t3, $.$index$asx(m[i], "kalman")));
      if (typeof k !== "number")
        throw $.iae(k);
      kt += k;
      if (i >= m.length)
        throw $.ioore(i);
      t3 = $.$index$asx(m[i], "real");
      if (i >= m.length)
        throw $.ioore(i);
      p = $.abs$0$n($.$sub$n(t3, $.$index$asx(m[i], "particles")));
      if (typeof p !== "number")
        throw $.iae(p);
      pt += p;
      data2.push([i, me, met, k, kt, p, pt]);
    }
    options = $.makeLiteralMap(["title", "title"]);
    $.GoogleChats$(data, options, "#movec1");
    $.GoogleChats$(data2, options, "#movec2");
  },
  graph$1$bailout: function(state0, m) {
    var data, data2, t1, met, kt, pt, i, me, k, p, options;
    data = $.List_List($);
    data2 = $.List_List($);
    data.push(["t", "real", "measured", "kalman", "particles"]);
    data2.push(["t", "m", "m total", "k", "k total", "p", "p total"]);
    for (t1 = $.getInterceptor$asx(m), met = 0, kt = 0, pt = 0, i = 0; $.JSNumber_methods.$lt(i, t1.get$length(m)); ++i) {
      data.push([i, $.$index$asx(t1.$index(m, i), "real"), $.$index$asx(t1.$index(m, i), "measured"), $.$index$asx(t1.$index(m, i), "kalman"), $.$index$asx(t1.$index(m, i), "particles")]);
      me = $.abs$0$n($.$sub$n($.$index$asx(t1.$index(m, i), "real"), $.$index$asx(t1.$index(m, i), "measured")));
      if (typeof me !== "number")
        throw $.iae(me);
      met += me;
      k = $.abs$0$n($.$sub$n($.$index$asx(t1.$index(m, i), "real"), $.$index$asx(t1.$index(m, i), "kalman")));
      if (typeof k !== "number")
        throw $.iae(k);
      kt += k;
      p = $.abs$0$n($.$sub$n($.$index$asx(t1.$index(m, i), "real"), $.$index$asx(t1.$index(m, i), "particles")));
      if (typeof p !== "number")
        throw $.iae(p);
      pt += p;
      data2.push([i, me, met, k, kt, p, pt]);
    }
    options = $.makeLiteralMap(["title", "title"]);
    $.GoogleChats$(data, options, "#movec1");
    $.GoogleChats$(data2, options, "#movec2");
  },
  kalman$3: function(measurements, mNoise, pNoise) {
    var s, filter, t1, i;
    if (typeof measurements !== "string" && (typeof measurements !== "object" || measurements === null || measurements.constructor !== Array && !$.getInterceptor(measurements).$isJavaScriptIndexingBehavior))
      return this.kalman$3$bailout(1, measurements, mNoise, pNoise);
    s = $.KalmanModel$();
    filter = $.Kalman$(s);
    s.F = $.Matrix$fromList([[1, 1], [0, 1]]);
    s.x = $.Matrix$fromList([[0], [0]]);
    s.B = $.Matrix$fromList([[0.5], [1]]);
    s.u = $.Matrix$fromList([[1]]);
    t1 = $.Matrix$fromList([[0.25, 0.3333333333333333], [0.5, 1]]);
    s.Ex = t1.$mul(t1, $.$mul$n(pNoise, pNoise));
    s.H = $.Matrix$fromList([[1, 0]]);
    s.Ez = $.Matrix$fromList([[$.$mul$n(mNoise, mNoise)]]);
    s.P = $.Matrix$fromList([[1000, 0], [0, 1000]]);
    s.I = $.Matrix$fromList([[1, 0], [0, 1]]);
    for (i = 0; i < measurements.length; ++i) {
      filter.filter$1(filter, [[$.$index$asx(measurements[i], "measured")]]);
      if (i >= measurements.length)
        throw $.ioore(i);
      $.$indexSet$ax(measurements[i], "kalman", $.$index$asx($.$index$asx(s.out.get$m(), 0), 0));
    }
    return measurements;
  },
  kalman$3$bailout: function(state0, measurements, mNoise, pNoise) {
    var s, filter, t1, i;
    s = $.KalmanModel$();
    filter = $.Kalman$(s);
    s.F = $.Matrix$fromList([[1, 1], [0, 1]]);
    s.x = $.Matrix$fromList([[0], [0]]);
    s.B = $.Matrix$fromList([[0.5], [1]]);
    s.u = $.Matrix$fromList([[1]]);
    t1 = $.Matrix$fromList([[0.25, 0.3333333333333333], [0.5, 1]]);
    s.Ex = t1.$mul(t1, $.$mul$n(pNoise, pNoise));
    s.H = $.Matrix$fromList([[1, 0]]);
    s.Ez = $.Matrix$fromList([[$.$mul$n(mNoise, mNoise)]]);
    s.P = $.Matrix$fromList([[1000, 0], [0, 1000]]);
    s.I = $.Matrix$fromList([[1, 0], [0, 1]]);
    for (t1 = $.getInterceptor$asx(measurements), i = 0; $.JSNumber_methods.$lt(i, t1.get$length(measurements)); ++i) {
      filter.filter$1(filter, [[$.$index$asx(t1.$index(measurements, i), "measured")]]);
      $.$indexSet$ax(t1.$index(measurements, i), "kalman", $.$index$asx($.$index$asx(s.out.get$m(), 0), 0));
    }
    return measurements;
  },
  particles$4: function(measurements, meNoise, peNoise, pCount) {
    var aNoise, mNoise, filter, t1, i, filtered;
    if (typeof measurements !== "string" && (typeof measurements !== "object" || measurements === null || measurements.constructor !== Array && !$.getInterceptor(measurements).$isJavaScriptIndexingBehavior))
      return this.particles$4$bailout(1, measurements, meNoise, peNoise, pCount);
    aNoise = new $.MoveTest_particles_closure(peNoise);
    mNoise = new $.MoveTest_particles_closure0(meNoise);
    filter = $.Particles$($.ParticlesModel$(pCount, new $.MoveTest_particles_closure1(aNoise, mNoise), new $.MoveTest_particles_closure2(aNoise, mNoise), new $.MoveTest_particles_closure3(), aNoise, mNoise, new $.MoveTest_particles_closure4(meNoise), new $.MoveTest_particles_closure5()));
    if (0 >= measurements.length)
      throw $.ioore(0);
    t1 = measurements[0];
    $.$indexSet$ax(t1, "particles", $.$index$asx(t1, "measured"));
    if (1 >= measurements.length)
      throw $.ioore(1);
    t1 = measurements[1];
    $.$indexSet$ax(t1, "particles", $.$index$asx(t1, "measured"));
    if (1 >= measurements.length)
      throw $.ioore(1);
    t1 = $.$index$asx(measurements[1], "measured");
    if (0 >= measurements.length)
      throw $.ioore(0);
    filter.generate$2([t1], [$.$index$asx(measurements[0], "measured")]);
    for (t1 = filter.s, i = 2; i < measurements.length; ++i) {
      filter.move$0();
      if (i >= measurements.length)
        throw $.ioore(i);
      filter.weight$1(filter, [$.$index$asx(measurements[i], "measured")]);
      filter.resample$0();
      filtered = t1.mean$2(t1.particles, t1.weights);
      if (i >= measurements.length)
        throw $.ioore(i);
      $.$indexSet$ax(measurements[i], "particles", filtered);
    }
    return measurements;
  },
  particles$4$bailout: function(state0, measurements, meNoise, peNoise, pCount) {
    var aNoise, mNoise, filter, t1, t2, i, filtered;
    aNoise = new $.MoveTest_particles_closure(peNoise);
    mNoise = new $.MoveTest_particles_closure0(meNoise);
    filter = $.Particles$($.ParticlesModel$(pCount, new $.MoveTest_particles_closure1(aNoise, mNoise), new $.MoveTest_particles_closure2(aNoise, mNoise), new $.MoveTest_particles_closure3(), aNoise, mNoise, new $.MoveTest_particles_closure4(meNoise), new $.MoveTest_particles_closure5()));
    t1 = $.getInterceptor$asx(measurements);
    $.$indexSet$ax(t1.$index(measurements, 0), "particles", $.$index$asx(t1.$index(measurements, 0), "measured"));
    $.$indexSet$ax(t1.$index(measurements, 1), "particles", $.$index$asx(t1.$index(measurements, 1), "measured"));
    filter.generate$2([$.$index$asx(t1.$index(measurements, 1), "measured")], [$.$index$asx(t1.$index(measurements, 0), "measured")]);
    for (t2 = filter.s, i = 2; $.JSNumber_methods.$lt(i, t1.get$length(measurements)); ++i) {
      filter.move$0();
      filter.weight$1(filter, [$.$index$asx(t1.$index(measurements, i), "measured")]);
      filter.resample$0();
      filtered = t2.mean$2(t2.particles, t2.weights);
      $.$indexSet$ax(t1.$index(measurements, i), "particles", filtered);
    }
    return measurements;
  },
  MoveTest$3: function(mNoise, pNoise, pCount) {
    var measurements, x, v, i, t1;
    this.pNoise = 0.05;
    this.mNoise = 5;
    measurements = $.List_List($);
    for (x = 0, v = 5, i = 0; t1 = this.mNoise, i < 50; ++i) {
      measurements.push($.makeLiteralMap(["real", x, "measured", x + $.randn(0, t1)]));
      x += v;
      v += 1 + $.randn(0, this.pNoise);
    }
    this.graph$1(this.kalman$3(this.particles$4(measurements, t1, this.pNoise, this.pCount), this.mNoise, this.pNoise));
  }
};

$$.MoveTest_particles_closure = {"": "Closure;peNoise_0",
  call$0: function() {
    return $.Gaussian_normal(0, this.peNoise_0);
  },
  $isFunction: true
};

$$.MoveTest_particles_closure0 = {"": "Closure;meNoise_1",
  call$0: function() {
    return $.Gaussian_normal(0, this.meNoise_1);
  },
  $isFunction: true
};

$$.MoveTest_particles_closure1 = {"": "Closure;aNoise_2,mNoise_3",
  call$1: function(p) {
    var t1, nx;
    t1 = $.getInterceptor$asx(p);
    nx = $.$add$ns($.$add$ns($.$add$ns($.$add$ns(t1.$index(p, 0), t1.$index(p, 1)), this.mNoise_3.call$0()), this.aNoise_2.call$0()), 1);
    t1.$indexSet(p, 1, $.$sub$n(nx, t1.$index(p, 0)));
    t1.$indexSet(p, 0, nx);
  },
  $isFunction: true
};

$$.MoveTest_particles_closure2 = {"": "Closure;aNoise_4,mNoise_5",
  call$2: function(m, o) {
    var nx = $.$add$ns($.$add$ns($.$index$asx(m, 0), $.$mul$n(this.mNoise_5.call$0(), 2)), this.aNoise_4.call$0());
    return [nx, $.$sub$n(nx, $.$index$asx(o, 0))];
  },
  $isFunction: true
};

$$.MoveTest_particles_closure4 = {"": "Closure;meNoise_6",
  call$2: function(m, p) {
    return $.Gaussian_gaussian($.$index$asx(m, 0), $.$index$asx(p, 0), this.meNoise_6);
  },
  $isFunction: true
};

$$.MoveTest_particles_closure3 = {"": "Closure;",
  call$2: function(p, w) {
    var sum, i, t1;
    if (typeof p !== "string" && (typeof p !== "object" || p === null || p.constructor !== Array && !$.getInterceptor(p).$isJavaScriptIndexingBehavior))
      return this.call$2$bailout(1, p, w);
    if (typeof w !== "string" && (typeof w !== "object" || w === null || w.constructor !== Array && !$.getInterceptor(w).$isJavaScriptIndexingBehavior))
      return this.call$2$bailout(1, p, w);
    for (sum = 0, i = 0; i < p.length; ++i) {
      t1 = $.$index$asx(p[i], 0);
      if (i >= w.length)
        throw $.ioore(i);
      t1 = $.$mul$n(t1, w[i]);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      sum += t1;
    }
    return sum;
  },
  call$2$bailout: function(state0, p, w) {
    var t1, t2, sum, i, t3;
    for (t1 = $.getInterceptor$asx(p), t2 = $.getInterceptor$asx(w), sum = 0, i = 0; $.JSNumber_methods.$lt(i, t1.get$length(p)); ++i) {
      t3 = $.$mul$n($.$index$asx(t1.$index(p, i), 0), t2.$index(w, i));
      if (typeof t3 !== "number")
        throw $.iae(t3);
      sum += t3;
    }
    return sum;
  },
  $isFunction: true
};

$$.MoveTest_particles_closure5 = {"": "Closure;",
  call$1: function(p) {
    var t1 = $.getInterceptor$asx(p);
    return [t1.$index(p, 0), t1.$index(p, 1)];
  },
  $isFunction: true
};

$$.SimpleTest = {"": "Object;pNoise,mNoise,pCount",
  graph$1: function(m) {
    var data, data2, met, kt, pt, pt1, i, t1, t2, t3, me, k, p, p1, options;
    if (typeof m !== "string" && (typeof m !== "object" || m === null || m.constructor !== Array && !$.getInterceptor(m).$isJavaScriptIndexingBehavior))
      return this.graph$1$bailout(1, m);
    data = $.List_List($);
    data2 = $.List_List($);
    data.push(["t", "real", "measured", "kalman", "particles"]);
    data2.push(["t", "m", "m total", "k", "k total", "p", "p total", "p1 tot"]);
    for (met = 0, kt = 0, pt = 0, pt1 = 0, i = 0; i < m.length; ++i) {
      t1 = $.$index$asx(m[i], "real");
      if (i >= m.length)
        throw $.ioore(i);
      t2 = $.$index$asx(m[i], "measured");
      if (i >= m.length)
        throw $.ioore(i);
      t3 = $.$index$asx(m[i], "kalman");
      if (i >= m.length)
        throw $.ioore(i);
      data.push([i, t1, t2, t3, $.$index$asx(m[i], "particles")]);
      if (i >= m.length)
        throw $.ioore(i);
      t3 = $.$index$asx(m[i], "real");
      if (i >= m.length)
        throw $.ioore(i);
      me = $.abs$0$n($.$sub$n(t3, $.$index$asx(m[i], "measured")));
      if (typeof me !== "number")
        throw $.iae(me);
      met += me;
      if (i >= m.length)
        throw $.ioore(i);
      t3 = $.$index$asx(m[i], "real");
      if (i >= m.length)
        throw $.ioore(i);
      k = $.abs$0$n($.$sub$n(t3, $.$index$asx(m[i], "kalman")));
      if (typeof k !== "number")
        throw $.iae(k);
      kt += k;
      if (i >= m.length)
        throw $.ioore(i);
      t3 = $.$index$asx(m[i], "real");
      if (i >= m.length)
        throw $.ioore(i);
      p = $.abs$0$n($.$sub$n(t3, $.$index$asx(m[i], "particles")));
      if (typeof p !== "number")
        throw $.iae(p);
      pt += p;
      if (i >= m.length)
        throw $.ioore(i);
      t3 = $.$index$asx(m[i], "real");
      if (i >= m.length)
        throw $.ioore(i);
      p1 = $.abs$0$n($.$sub$n(t3, $.$index$asx(m[i], "particles1")));
      if (typeof p1 !== "number")
        throw $.iae(p1);
      pt1 += p1;
      data2.push([i, me, met, k, kt, p, pt, pt1]);
    }
    options = $.makeLiteralMap(["title", "title"]);
    $.GoogleChats$(data, options, "#simplec1");
    $.GoogleChats$(data2, options, "#simplec2");
  },
  graph$1$bailout: function(state0, m) {
    var data, data2, t1, met, kt, pt, pt1, i, me, k, p, p1, options;
    data = $.List_List($);
    data2 = $.List_List($);
    data.push(["t", "real", "measured", "kalman", "particles"]);
    data2.push(["t", "m", "m total", "k", "k total", "p", "p total", "p1 tot"]);
    for (t1 = $.getInterceptor$asx(m), met = 0, kt = 0, pt = 0, pt1 = 0, i = 0; $.JSNumber_methods.$lt(i, t1.get$length(m)); ++i) {
      data.push([i, $.$index$asx(t1.$index(m, i), "real"), $.$index$asx(t1.$index(m, i), "measured"), $.$index$asx(t1.$index(m, i), "kalman"), $.$index$asx(t1.$index(m, i), "particles")]);
      me = $.abs$0$n($.$sub$n($.$index$asx(t1.$index(m, i), "real"), $.$index$asx(t1.$index(m, i), "measured")));
      if (typeof me !== "number")
        throw $.iae(me);
      met += me;
      k = $.abs$0$n($.$sub$n($.$index$asx(t1.$index(m, i), "real"), $.$index$asx(t1.$index(m, i), "kalman")));
      if (typeof k !== "number")
        throw $.iae(k);
      kt += k;
      p = $.abs$0$n($.$sub$n($.$index$asx(t1.$index(m, i), "real"), $.$index$asx(t1.$index(m, i), "particles")));
      if (typeof p !== "number")
        throw $.iae(p);
      pt += p;
      p1 = $.abs$0$n($.$sub$n($.$index$asx(t1.$index(m, i), "real"), $.$index$asx(t1.$index(m, i), "particles1")));
      if (typeof p1 !== "number")
        throw $.iae(p1);
      pt1 += p1;
      data2.push([i, me, met, k, kt, p, pt, pt1]);
    }
    options = $.makeLiteralMap(["title", "title"]);
    $.GoogleChats$(data, options, "#simplec1");
    $.GoogleChats$(data2, options, "#simplec2");
  },
  kalman$3: function(measurements, mNoise, pNoise) {
    var s, filter, i;
    if (typeof measurements !== "string" && (typeof measurements !== "object" || measurements === null || measurements.constructor !== Array && !$.getInterceptor(measurements).$isJavaScriptIndexingBehavior))
      return this.kalman$3$bailout(1, measurements, mNoise, pNoise);
    s = $.KalmanModel$();
    filter = $.Kalman$(s);
    s.x = $.Matrix$fromList([[0]]);
    s.P = $.Matrix$fromList([[1000000000]]);
    s.u = $.Matrix$fromList([[0]]);
    s.B = $.Matrix$fromList([[0]]);
    s.F = $.Matrix$fromList([[1]]);
    s.H = $.Matrix$fromList([[1]]);
    s.Ez = $.Matrix$fromList([[mNoise]]);
    s.Ex = $.Matrix$fromList([[$.Gaussian_normal(0, pNoise)]]);
    s.I = $.Matrix$fromList([[1]]);
    for (i = 0; i < measurements.length; ++i) {
      s.Ex = $.Matrix$fromList([[$.Gaussian_normal(0, pNoise)]]);
      if (i >= measurements.length)
        throw $.ioore(i);
      filter.filter$1(filter, [[$.$index$asx(measurements[i], "measured")]]);
      if (i >= measurements.length)
        throw $.ioore(i);
      $.$indexSet$ax(measurements[i], "kalman", $.$index$asx($.$index$asx(s.out.get$m(), 0), 0));
    }
    return measurements;
  },
  kalman$3$bailout: function(state0, measurements, mNoise, pNoise) {
    var s, filter, t1, i;
    s = $.KalmanModel$();
    filter = $.Kalman$(s);
    s.x = $.Matrix$fromList([[0]]);
    s.P = $.Matrix$fromList([[1000000000]]);
    s.u = $.Matrix$fromList([[0]]);
    s.B = $.Matrix$fromList([[0]]);
    s.F = $.Matrix$fromList([[1]]);
    s.H = $.Matrix$fromList([[1]]);
    s.Ez = $.Matrix$fromList([[mNoise]]);
    s.Ex = $.Matrix$fromList([[$.Gaussian_normal(0, pNoise)]]);
    s.I = $.Matrix$fromList([[1]]);
    for (t1 = $.getInterceptor$asx(measurements), i = 0; $.JSNumber_methods.$lt(i, t1.get$length(measurements)); ++i) {
      s.Ex = $.Matrix$fromList([[$.Gaussian_normal(0, pNoise)]]);
      filter.filter$1(filter, [[$.$index$asx(t1.$index(measurements, i), "measured")]]);
      $.$indexSet$ax(t1.$index(measurements, i), "kalman", $.$index$asx($.$index$asx(s.out.get$m(), 0), 0));
    }
    return measurements;
  },
  particles$4: function(measurements, meNoise, peNoise, pCount) {
    var mNoise, filter, t1, i, filtered;
    if (typeof measurements !== "string" && (typeof measurements !== "object" || measurements === null || measurements.constructor !== Array && !$.getInterceptor(measurements).$isJavaScriptIndexingBehavior))
      return this.particles$4$bailout(1, measurements, meNoise, peNoise, pCount);
    mNoise = new $.SimpleTest_particles_closure(meNoise);
    filter = $.Particles$($.ParticlesModel$(pCount, new $.SimpleTest_particles_closure0(mNoise), new $.SimpleTest_particles_closure1(mNoise), new $.SimpleTest_particles_closure2(), new $.SimpleTest_particles_closure3(peNoise), mNoise, new $.SimpleTest_particles_closure4(meNoise), new $.SimpleTest_particles_closure5()));
    if (0 >= measurements.length)
      throw $.ioore(0);
    t1 = measurements[0];
    $.$indexSet$ax(t1, "particles", $.$index$asx(t1, "measured"));
    if (0 >= measurements.length)
      throw $.ioore(0);
    t1 = $.$index$asx(measurements[0], "measured");
    if (0 >= measurements.length)
      throw $.ioore(0);
    filter.generate$2([t1], [$.$index$asx(measurements[0], "measured")]);
    for (t1 = filter.s, i = 1; i < measurements.length; ++i) {
      filter.move$0();
      if (i >= measurements.length)
        throw $.ioore(i);
      filter.weight$1(filter, [$.$index$asx(measurements[i], "measured")]);
      filter.resample$0();
      filtered = t1.mean$2(t1.particles, t1.weights);
      if (i >= measurements.length)
        throw $.ioore(i);
      $.$indexSet$ax(measurements[i], "particles", filtered);
    }
    return measurements;
  },
  particles$4$bailout: function(state0, measurements, meNoise, peNoise, pCount) {
    var mNoise, filter, t1, t2, i, filtered;
    mNoise = new $.SimpleTest_particles_closure(meNoise);
    filter = $.Particles$($.ParticlesModel$(pCount, new $.SimpleTest_particles_closure0(mNoise), new $.SimpleTest_particles_closure1(mNoise), new $.SimpleTest_particles_closure2(), new $.SimpleTest_particles_closure3(peNoise), mNoise, new $.SimpleTest_particles_closure4(meNoise), new $.SimpleTest_particles_closure5()));
    t1 = $.getInterceptor$asx(measurements);
    $.$indexSet$ax(t1.$index(measurements, 0), "particles", $.$index$asx(t1.$index(measurements, 0), "measured"));
    filter.generate$2([$.$index$asx(t1.$index(measurements, 0), "measured")], [$.$index$asx(t1.$index(measurements, 0), "measured")]);
    for (t2 = filter.s, i = 1; $.JSNumber_methods.$lt(i, t1.get$length(measurements)); ++i) {
      filter.move$0();
      filter.weight$1(filter, [$.$index$asx(t1.$index(measurements, i), "measured")]);
      filter.resample$0();
      filtered = t2.mean$2(t2.particles, t2.weights);
      $.$indexSet$ax(t1.$index(measurements, i), "particles", filtered);
    }
    return measurements;
  },
  particles1$4: function(measurements, meNoise, peNoise, pCount) {
    var mNoise, filter, t1, i, filtered;
    if (typeof measurements !== "string" && (typeof measurements !== "object" || measurements === null || measurements.constructor !== Array && !$.getInterceptor(measurements).$isJavaScriptIndexingBehavior))
      return this.particles1$4$bailout(1, measurements, meNoise, peNoise, pCount);
    mNoise = new $.SimpleTest_particles1_closure(meNoise);
    filter = $.Particles$($.ParticlesModel$(pCount, new $.SimpleTest_particles1_closure0(mNoise), new $.SimpleTest_particles1_closure1(mNoise), new $.SimpleTest_particles1_closure2(), new $.SimpleTest_particles1_closure3(peNoise), mNoise, new $.SimpleTest_particles1_closure4(meNoise), new $.SimpleTest_particles1_closure5()));
    if (0 >= measurements.length)
      throw $.ioore(0);
    t1 = measurements[0];
    $.$indexSet$ax(t1, "particles1", $.$index$asx(t1, "measured"));
    if (0 >= measurements.length)
      throw $.ioore(0);
    t1 = $.$index$asx(measurements[0], "measured");
    if (0 >= measurements.length)
      throw $.ioore(0);
    filter.generate$2([t1], [$.$index$asx(measurements[0], "measured")]);
    for (t1 = filter.s, i = 1; i < measurements.length; ++i) {
      filter.move$0();
      if (i >= measurements.length)
        throw $.ioore(i);
      filter.weight$1(filter, [$.$index$asx(measurements[i], "measured")]);
      filter.resample$0();
      filtered = t1.mean$2(t1.particles, t1.weights);
      if (i >= measurements.length)
        throw $.ioore(i);
      $.$indexSet$ax(measurements[i], "particles1", filtered);
    }
    return measurements;
  },
  particles1$4$bailout: function(state0, measurements, meNoise, peNoise, pCount) {
    var mNoise, filter, t1, t2, i, filtered;
    mNoise = new $.SimpleTest_particles1_closure(meNoise);
    filter = $.Particles$($.ParticlesModel$(pCount, new $.SimpleTest_particles1_closure0(mNoise), new $.SimpleTest_particles1_closure1(mNoise), new $.SimpleTest_particles1_closure2(), new $.SimpleTest_particles1_closure3(peNoise), mNoise, new $.SimpleTest_particles1_closure4(meNoise), new $.SimpleTest_particles1_closure5()));
    t1 = $.getInterceptor$asx(measurements);
    $.$indexSet$ax(t1.$index(measurements, 0), "particles1", $.$index$asx(t1.$index(measurements, 0), "measured"));
    filter.generate$2([$.$index$asx(t1.$index(measurements, 0), "measured")], [$.$index$asx(t1.$index(measurements, 0), "measured")]);
    for (t2 = filter.s, i = 1; $.JSNumber_methods.$lt(i, t1.get$length(measurements)); ++i) {
      filter.move$0();
      filter.weight$1(filter, [$.$index$asx(t1.$index(measurements, i), "measured")]);
      filter.resample$0();
      filtered = t2.mean$2(t2.particles, t2.weights);
      $.$indexSet$ax(t1.$index(measurements, i), "particles1", filtered);
    }
    return measurements;
  },
  SimpleTest$3: function(mNoise, pNoise, pCount) {
    var measurements, i, t1, t2;
    measurements = $.List_List($);
    for (i = 0; t1 = this.pNoise, i < 50; ++i)
      measurements.push($.makeLiteralMap(["real", 10 + $.Gaussian_normal(0, t1), "measured", 10 + $.Gaussian_normal(0, this.mNoise)]));
    t2 = this.pCount;
    this.graph$1(this.kalman$3(this.particles1$4(this.particles$4(measurements, this.mNoise, t1, t2), this.mNoise, this.pNoise, t2), this.mNoise, this.pNoise));
  }
};

$$.SimpleTest_particles_closure3 = {"": "Closure;peNoise_0",
  call$0: function() {
    return $.Gaussian_normal(0, this.peNoise_0);
  },
  $isFunction: true
};

$$.SimpleTest_particles_closure = {"": "Closure;meNoise_1",
  call$0: function() {
    return $.Gaussian_normal(0, this.meNoise_1);
  },
  $isFunction: true
};

$$.SimpleTest_particles_closure0 = {"": "Closure;mNoise_2",
  call$1: function(p) {
    var t1 = this.mNoise_2.call$0();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    $.$indexSet$ax(p, 0, 10 + t1);
  },
  $isFunction: true
};

$$.SimpleTest_particles_closure1 = {"": "Closure;mNoise_3",
  call$2: function(m, o) {
    return [$.$add$ns($.$index$asx(m, 0), this.mNoise_3.call$0())];
  },
  $isFunction: true
};

$$.SimpleTest_particles_closure4 = {"": "Closure;meNoise_4",
  call$2: function(m, p) {
    return $.Gaussian_gaussian($.$index$asx(m, 0), $.$index$asx(p, 0), this.meNoise_4);
  },
  $isFunction: true
};

$$.SimpleTest_particles_closure2 = {"": "Closure;",
  call$2: function(p, w) {
    var sum, i, t1;
    if (typeof p !== "string" && (typeof p !== "object" || p === null || p.constructor !== Array && !$.getInterceptor(p).$isJavaScriptIndexingBehavior))
      return this.call$2$bailout(1, p, w);
    if (typeof w !== "string" && (typeof w !== "object" || w === null || w.constructor !== Array && !$.getInterceptor(w).$isJavaScriptIndexingBehavior))
      return this.call$2$bailout(1, p, w);
    for (sum = 0, i = 0; i < p.length; ++i) {
      t1 = $.$index$asx(p[i], 0);
      if (i >= w.length)
        throw $.ioore(i);
      t1 = $.$mul$n(t1, w[i]);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      sum += t1;
    }
    return sum;
  },
  call$2$bailout: function(state0, p, w) {
    var t1, t2, sum, i, t3;
    for (t1 = $.getInterceptor$asx(p), t2 = $.getInterceptor$asx(w), sum = 0, i = 0; $.JSNumber_methods.$lt(i, t1.get$length(p)); ++i) {
      t3 = $.$mul$n($.$index$asx(t1.$index(p, i), 0), t2.$index(w, i));
      if (typeof t3 !== "number")
        throw $.iae(t3);
      sum += t3;
    }
    return sum;
  },
  $isFunction: true
};

$$.SimpleTest_particles_closure5 = {"": "Closure;",
  call$1: function(p) {
    return [$.$index$asx(p, 0)];
  },
  $isFunction: true
};

$$.SimpleTest_particles1_closure3 = {"": "Closure;peNoise_0",
  call$0: function() {
    return $.Gaussian_normal(0, this.peNoise_0);
  },
  $isFunction: true
};

$$.SimpleTest_particles1_closure = {"": "Closure;meNoise_1",
  call$0: function() {
    return $.Gaussian_normal(0, this.meNoise_1);
  },
  $isFunction: true
};

$$.SimpleTest_particles1_closure0 = {"": "Closure;mNoise_2",
  call$1: function(p) {
    var t1 = $.getInterceptor$asx(p);
    t1.$indexSet(p, 0, $.$add$ns(t1.$index(p, 0), this.mNoise_2.call$0()));
  },
  $isFunction: true
};

$$.SimpleTest_particles1_closure1 = {"": "Closure;mNoise_3",
  call$2: function(m, o) {
    return [$.$add$ns($.$index$asx(m, 0), this.mNoise_3.call$0())];
  },
  $isFunction: true
};

$$.SimpleTest_particles1_closure4 = {"": "Closure;meNoise_4",
  call$2: function(m, p) {
    return $.Gaussian_gaussian($.$index$asx(m, 0), $.$index$asx(p, 0), this.meNoise_4);
  },
  $isFunction: true
};

$$.SimpleTest_particles1_closure2 = {"": "Closure;",
  call$2: function(p, w) {
    var sum, i, t1;
    if (typeof p !== "string" && (typeof p !== "object" || p === null || p.constructor !== Array && !$.getInterceptor(p).$isJavaScriptIndexingBehavior))
      return this.call$2$bailout(1, p, w);
    if (typeof w !== "string" && (typeof w !== "object" || w === null || w.constructor !== Array && !$.getInterceptor(w).$isJavaScriptIndexingBehavior))
      return this.call$2$bailout(1, p, w);
    for (sum = 0, i = 0; i < p.length; ++i) {
      t1 = $.$index$asx(p[i], 0);
      if (i >= w.length)
        throw $.ioore(i);
      t1 = $.$mul$n(t1, w[i]);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      sum += t1;
    }
    return sum;
  },
  call$2$bailout: function(state0, p, w) {
    var t1, t2, sum, i, t3;
    for (t1 = $.getInterceptor$asx(p), t2 = $.getInterceptor$asx(w), sum = 0, i = 0; $.JSNumber_methods.$lt(i, t1.get$length(p)); ++i) {
      t3 = $.$mul$n($.$index$asx(t1.$index(p, i), 0), t2.$index(w, i));
      if (typeof t3 !== "number")
        throw $.iae(t3);
      sum += t3;
    }
    return sum;
  },
  $isFunction: true
};

$$.SimpleTest_particles1_closure5 = {"": "Closure;",
  call$1: function(p) {
    return [$.$index$asx(p, 0)];
  },
  $isFunction: true
};

$$.WalkTest = {"": "Object;",
  readFile$1: function(fl) {
    var fr, t1;
    fr = new FileReader();
    t1 = $.EventStreamProvider_loadend.forTarget$1(fr);
    $._EventStreamSubscription$(t1._target, t1._eventType, new $.WalkTest_readFile_closure(this, fr), t1._useCapture);
    fr.readAsText($.get$first$ax(fl));
  },
  draw$1: function(m) {
    var maps, data, kalman;
    maps = $.GoogleMaps$();
    data = $.List_List($);
    kalman = $.List_List($);
    $.List_List($);
    $.forEach$1$ax(m, new $.WalkTest_draw_closure(data, kalman));
    maps.draw$2(data, "#ff0000");
  },
  particles$1: function(measurements) {
    var mNoise, filter, t1, t2, i, filtered;
    if (typeof measurements !== "string" && (typeof measurements !== "object" || measurements === null || measurements.constructor !== Array && !$.getInterceptor(measurements).$isJavaScriptIndexingBehavior))
      return this.particles$1$bailout(1, measurements);
    mNoise = new $.WalkTest_particles_closure();
    filter = $.Particles$($.ParticlesModel$(10, new $.WalkTest_particles_closure0(), new $.WalkTest_particles_closure1(mNoise), new $.WalkTest_particles_closure2(), new $.WalkTest_particles_closure3(), mNoise, new $.WalkTest_particles_closure4(), new $.WalkTest_particles_closure5()));
    if (0 >= measurements.length)
      throw $.ioore(0);
    t1 = measurements[0];
    t2 = $.$index$asx($.$index$asx($.$index$asx(t1, "measured"), 0), 0);
    if (0 >= measurements.length)
      throw $.ioore(0);
    $.$indexSet$ax(t1, "particles", [t2, $.$index$asx($.$index$asx($.$index$asx(measurements[0], "measured"), 1), 0)]);
    if (1 >= measurements.length)
      throw $.ioore(1);
    t2 = measurements[1];
    t1 = $.$index$asx($.$index$asx($.$index$asx(t2, "measured"), 0), 0);
    if (1 >= measurements.length)
      throw $.ioore(1);
    $.$indexSet$ax(t2, "particles", [t1, $.$index$asx($.$index$asx($.$index$asx(measurements[1], "measured"), 1), 0)]);
    if (1 >= measurements.length)
      throw $.ioore(1);
    t1 = $.$index$asx(measurements[1], "measured");
    if (0 >= measurements.length)
      throw $.ioore(0);
    filter.generate$2(t1, $.$index$asx(measurements[0], "measured"));
    for (t1 = filter.s, i = 2; i < measurements.length; ++i) {
      filter.move$0();
      if (i >= measurements.length)
        throw $.ioore(i);
      filter.weight$1(filter, $.$index$asx(measurements[i], "measured"));
      filter.resample$0();
      filtered = t1.mean$2(t1.particles, t1.weights);
      if (i >= measurements.length)
        throw $.ioore(i);
      $.$indexSet$ax(measurements[i], "particles", filtered);
    }
    return measurements;
  },
  particles$1$bailout: function(state0, measurements) {
    var mNoise, filter, t1, t2, i, filtered;
    mNoise = new $.WalkTest_particles_closure();
    filter = $.Particles$($.ParticlesModel$(10, new $.WalkTest_particles_closure0(), new $.WalkTest_particles_closure1(mNoise), new $.WalkTest_particles_closure2(), new $.WalkTest_particles_closure3(), mNoise, new $.WalkTest_particles_closure4(), new $.WalkTest_particles_closure5()));
    t1 = $.getInterceptor$asx(measurements);
    $.$indexSet$ax(t1.$index(measurements, 0), "particles", [$.$index$asx($.$index$asx($.$index$asx(t1.$index(measurements, 0), "measured"), 0), 0), $.$index$asx($.$index$asx($.$index$asx(t1.$index(measurements, 0), "measured"), 1), 0)]);
    $.$indexSet$ax(t1.$index(measurements, 1), "particles", [$.$index$asx($.$index$asx($.$index$asx(t1.$index(measurements, 1), "measured"), 0), 0), $.$index$asx($.$index$asx($.$index$asx(t1.$index(measurements, 1), "measured"), 1), 0)]);
    filter.generate$2($.$index$asx(t1.$index(measurements, 1), "measured"), $.$index$asx(t1.$index(measurements, 0), "measured"));
    for (t2 = filter.s, i = 2; $.JSNumber_methods.$lt(i, t1.get$length(measurements)); ++i) {
      filter.move$0();
      filter.weight$1(filter, $.$index$asx(t1.$index(measurements, i), "measured"));
      filter.resample$0();
      filtered = t2.mean$2(t2.particles, t2.weights);
      $.$indexSet$ax(t1.$index(measurements, i), "particles", filtered);
    }
    return measurements;
  },
  WalkTest$0: function() {
    $.get$onClick$x($.query("#submit")).listen$1(new $.WalkTest_closure(this));
  }
};

$$.WalkTest_closure = {"": "Closure;this_0",
  call$1: function(data) {
    this.this_0.readFile$1($.get$files$x(document.querySelector("#file")));
  },
  $isFunction: true
};

$$.WalkTest_readFile_closure = {"": "Closure;this_1,fr_2",
  call$1: function(data) {
    var t1, t2;
    t1 = {};
    t1.measurements_0 = $.List_List($);
    $.forEach$1$ax($.split$1$s(this.fr_2.result, "\n"), new $.WalkTest_readFile__closure(t1));
    t2 = this.this_1;
    t1.measurements_0 = t2.particles$1(t1.measurements_0);
    $.Primitives_printString($.toString$0(t1.measurements_0));
    t2.draw$1(t1.measurements_0);
  },
  $isFunction: true
};

$$.WalkTest_readFile__closure = {"": "Closure;box_0",
  call$1: function(line) {
    var t1, args;
    t1 = $.getInterceptor$asx(line);
    if (t1.get$isEmpty(line) !== true) {
      args = t1.split$1(line, ",");
      t1 = $.getInterceptor$asx(args);
      if ($.$eq(t1.$index(args, 0), "0"))
        $.add$1$ax(this.box_0.measurements_0, $.makeLiteralMap(["measured", [[$.$mul$n($.Primitives_parseDouble(t1.$index(args, 3), null), 100000)], [$.$mul$n($.Primitives_parseDouble(t1.$index(args, 2), null), 100000)]]]));
    }
  },
  $isFunction: true
};

$$.WalkTest_draw_closure = {"": "Closure;data_0,kalman_1",
  call$1: function(mes) {
    var t1 = $.getInterceptor$asx(mes);
    this.data_0.push([$.$index$asx($.$index$asx(t1.$index(mes, "measured"), 0), 0), $.$index$asx($.$index$asx(t1.$index(mes, "measured"), 1), 0)]);
    if (t1.$index(mes, "kalman") != null)
      this.kalman_1.push([$.$index$asx($.$index$asx(t1.$index(mes, "kalman"), 0), 0), $.$index$asx($.$index$asx(t1.$index(mes, "kalman"), 1), 0)]);
    if (t1.$index(mes, "particles") != null)
      this.kalman_1.push([$.$index$asx(t1.$index(mes, "particles"), 0), $.$index$asx(t1.$index(mes, "particles"), 1)]);
  },
  $isFunction: true
};

$$.WalkTest_particles_closure3 = {"": "Closure;",
  call$0: function() {
    return $.Gaussian_normal(0, 1);
  },
  $isFunction: true
};

$$.WalkTest_particles_closure = {"": "Closure;",
  call$0: function() {
    return $.Gaussian_normal(0, 1);
  },
  $isFunction: true
};

$$.WalkTest_particles_closure0 = {"": "Closure;",
  call$1: function(p) {
    var t1, nx, ny;
    t1 = $.getInterceptor$asx(p);
    nx = $.$add$ns(t1.$index(p, 0), t1.$index(p, 2));
    ny = $.$add$ns(t1.$index(p, 1), t1.$index(p, 3));
    t1.$indexSet(p, 2, $.$sub$n(nx, t1.$index(p, 0)));
    t1.$indexSet(p, 3, $.$sub$n(ny, t1.$index(p, 1)));
    t1.$indexSet(p, 0, nx);
    t1.$indexSet(p, 1, ny);
    return p;
  },
  $isFunction: true
};

$$.WalkTest_particles_closure1 = {"": "Closure;mNoise_0",
  call$2: function(m, o) {
    var t1, t2, t3;
    t1 = $.getInterceptor$asx(m);
    t2 = this.mNoise_0;
    t3 = $.getInterceptor$asx(o);
    return [$.$add$ns($.$index$asx(t1.$index(m, 0), 0), t2.call$0()), $.$add$ns($.$index$asx(t1.$index(m, 1), 0), t2.call$0()), $.$sub$n($.$index$asx(t1.$index(m, 0), 0), $.$index$asx(t3.$index(o, 0), 0)), $.$sub$n($.$index$asx(t1.$index(m, 1), 0), $.$index$asx(t3.$index(o, 1), 0))];
  },
  $isFunction: true
};

$$.WalkTest_particles_closure4 = {"": "Closure;",
  call$2: function(m, p) {
    return $.Gaussian_gaussian($.$index$asx($.$index$asx(m, 0), 0), $.$index$asx(p, 0), 1);
  },
  $isFunction: true
};

$$.WalkTest_particles_closure2 = {"": "Closure;",
  call$2: function(p, w) {
    var m, i, t1, t2;
    if (typeof p !== "string" && (typeof p !== "object" || p === null || p.constructor !== Array && !$.getInterceptor(p).$isJavaScriptIndexingBehavior))
      return this.call$2$bailout(1, p, w);
    if (typeof w !== "string" && (typeof w !== "object" || w === null || w.constructor !== Array && !$.getInterceptor(w).$isJavaScriptIndexingBehavior))
      return this.call$2$bailout(1, p, w);
    m = [0, 0, 0, 0];
    for (i = 0; i < p.length; ++i) {
      if (0 >= m.length)
        throw $.ioore(0);
      t1 = m[0];
      t2 = $.$index$asx(p[i], 0);
      if (i >= w.length)
        throw $.ioore(i);
      t2 = $.$add$ns(t1, $.$mul$n(t2, w[i]));
      t1 = m.length;
      if (0 >= t1)
        throw $.ioore(0);
      m[0] = t2;
      if (1 >= t1)
        throw $.ioore(1);
      t1 = m[1];
      if (i >= p.length)
        throw $.ioore(i);
      t2 = $.$index$asx(p[i], 1);
      if (i >= w.length)
        throw $.ioore(i);
      t2 = $.$add$ns(t1, $.$mul$n(t2, w[i]));
      t1 = m.length;
      if (1 >= t1)
        throw $.ioore(1);
      m[1] = t2;
      if (2 >= t1)
        throw $.ioore(2);
      t1 = m[2];
      if (i >= p.length)
        throw $.ioore(i);
      t2 = $.$index$asx(p[i], 2);
      if (i >= w.length)
        throw $.ioore(i);
      t2 = $.$add$ns(t1, $.$mul$n(t2, w[i]));
      t1 = m.length;
      if (2 >= t1)
        throw $.ioore(2);
      m[2] = t2;
      if (3 >= t1)
        throw $.ioore(3);
      t1 = m[3];
      if (i >= p.length)
        throw $.ioore(i);
      t2 = $.$index$asx(p[i], 3);
      if (i >= w.length)
        throw $.ioore(i);
      t2 = $.$add$ns(t1, $.$mul$n(t2, w[i]));
      if (3 >= m.length)
        throw $.ioore(3);
      m[3] = t2;
    }
    return m;
  },
  call$2$bailout: function(state0, p, w) {
    var m, t1, t2, i, t3, t4;
    m = [0, 0, 0, 0];
    for (t1 = $.getInterceptor$asx(p), t2 = $.getInterceptor$asx(w), i = 0; $.JSNumber_methods.$lt(i, t1.get$length(p)); ++i) {
      if (0 >= m.length)
        throw $.ioore(0);
      t3 = $.$add$ns(m[0], $.$mul$n($.$index$asx(t1.$index(p, i), 0), t2.$index(w, i)));
      t4 = m.length;
      if (0 >= t4)
        throw $.ioore(0);
      m[0] = t3;
      if (1 >= t4)
        throw $.ioore(1);
      t4 = $.$add$ns(m[1], $.$mul$n($.$index$asx(t1.$index(p, i), 1), t2.$index(w, i)));
      t3 = m.length;
      if (1 >= t3)
        throw $.ioore(1);
      m[1] = t4;
      if (2 >= t3)
        throw $.ioore(2);
      t3 = $.$add$ns(m[2], $.$mul$n($.$index$asx(t1.$index(p, i), 2), t2.$index(w, i)));
      t4 = m.length;
      if (2 >= t4)
        throw $.ioore(2);
      m[2] = t3;
      if (3 >= t4)
        throw $.ioore(3);
      t4 = $.$add$ns(m[3], $.$mul$n($.$index$asx(t1.$index(p, i), 3), t2.$index(w, i)));
      if (3 >= m.length)
        throw $.ioore(3);
      m[3] = t4;
    }
    return m;
  },
  $isFunction: true
};

$$.WalkTest_particles_closure5 = {"": "Closure;",
  call$1: function(m) {
    var t1 = $.getInterceptor$asx(m);
    return [t1.$index(m, 0), t1.$index(m, 1), t1.$index(m, 2), t1.$index(m, 3)];
  },
  $isFunction: true
};

$$._initialize_closure = {"": "Closure;",
  call$1: function(_) {
    var t1;
    $._initialize();
    t1 = $.get$_proxiedObjectTable();
    t1._scopeIndices.push(t1._handleStack.length);
    $._jsEnterJavaScriptScope.callSync$1([]);
    return $.get$_proxiedObjectTable()._scopeIndices.length;
  },
  $isFunction: true
};

$$._initialize_closure0 = {"": "Closure;",
  call$1: function(args) {
    $.$index$asx(args, 0);
    $._jsExitJavaScriptScope.callSync$1([]);
    $.get$_proxiedObjectTable().exitScope$0();
    return;
  },
  $isFunction: true
};

$$._enterScopeIfNeeded_closure = {"": "Closure;depth_0",
  call$0: function() {
    $._jsExitJavaScriptScope.callSync$1([]);
    $.get$_proxiedObjectTable().exitScope$0();
    return;
  },
  $isFunction: true
};

$$.Callback = {"": "Object;_manualDispose,_liblib2$_id<,_liblib2$_callback",
  _initialize$1: function(manualDispose) {
    var t1, t2, t3, t4, id;
    this._manualDispose = manualDispose;
    t1 = $.get$_proxiedObjectTable();
    t2 = this._liblib2$_callback;
    $._enterScopeIfNeeded();
    t3 = t1._name + "-";
    t4 = t1._nextId;
    t1._nextId = t4 + 1;
    id = t3 + $.S(t4);
    t4 = t1._registry;
    t4.$indexSet(t4, id, t2);
    t1._handleStack.push(id);
    this._liblib2$_id = id;
    t1 = $.get$_proxiedObjectTable();
    t1 = t1._globalIds;
    t1.add$1(t1, this._liblib2$_id);
  },
  toJs$0: function() {
    return $.FunctionProxy$_internal($.get$_proxiedObjectTable()._liblib2$_port.toSendPort$0(), this._liblib2$_id);
  },
  Callback$once$2$withThis: function(f, withThis) {
    this._liblib2$_callback = new $.Callback$once_closure(this, f, withThis);
    this._initialize$1(false);
  },
  $isSerializable: true,
  $asSerializable: function() { return [$.FunctionProxy]; }
};

$$.Callback$once_closure = {"": "Closure;this_0,f_1,withThis_2",
  call$1: function(args) {
    var t1, t2, t3, t4;
    try {
      t1 = this.withThis_2 ? args : $.toList$0$ax($.skip$1$ax(args, 1));
      t1 = $.Primitives_applyFunction(this.f_1, t1, $.Function__toMangledNames(null));
      return t1;
    } finally {
      t1 = $.get$_proxiedObjectTable();
      t2 = this.this_0.get$_liblib2$_id();
      t3 = t1._registry;
      t3.$index(t3, t2);
      t4 = t1._globalIds;
      t4.remove$1(t4, t2);
      t3.remove$1(t3, t2);
      t1._deletedCount = t1._deletedCount + 1;
    }
  },
  $isFunction: true
};

$$._Undefined = {"": "Object;"};

$$.Proxy = {"": "Object;_liblib2$_port,_liblib2$_id<",
  toJs$0: function() {
    return this;
  },
  $index: function(_, arg) {
    return $.Proxy__forward(this, "[]", "method", [arg]);
  },
  $indexSet: function(_, key, value) {
    return $.Proxy__forward(this, "[]=", "method", [key, value]);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      t1 = true;
    else
      t1 = typeof other === "object" && other !== null && !!$.getInterceptor(other).$isProxy && $._jsPortEquals.callSync$1([$._serialize(this), $._serialize(other)]) === true;
    return t1;
  },
  toString$0: function(_) {
    var t1, exception;
    try {
      t1 = $.Proxy__forward(this, "toString", "method", []);
      return t1;
    } catch (exception) {
      $.unwrapException(exception);
      return $.Object.prototype.toString$0.call(this, this);
    }

  },
  noSuchMethod$1: function(_, invocation) {
    var symbol, member, t1, args, kind;
    symbol = invocation.memberName;
    member = symbol._liblib$_name;
    t1 = $.getInterceptor$asx(member);
    if (!$.$eq(t1.indexOf$1(member, "@"), -1))
      member = t1.substring$2(member, 0, t1.indexOf$1(member, "@"));
    args = invocation.get$positionalArguments();
    if (args == null)
      args = [];
    if (invocation.get$isGetter()) {
      t1 = $.getInterceptor$s(member);
      if (t1.startsWith$1(member, "get:") === true)
        member = t1.substring$1(member, 4);
      kind = "get";
    } else if (invocation.get$isSetter()) {
      t1 = $.getInterceptor$s(member);
      if (t1.endsWith$1(member, "=") === true)
        member = t1.substring$2(member, 0, $.$sub$n(t1.get$length(member), 1));
      t1 = $.getInterceptor$s(member);
      if (t1.startsWith$1(member, "set:") === true)
        member = t1.substring$1(member, 4);
      kind = "set";
    } else {
      t1 = $.getInterceptor$s(member);
      if (t1.startsWith$1(member, "get:") === true) {
        member = t1.substring$1(member, 4);
        kind = "get";
      } else if (t1.startsWith$1(member, "set:") === true) {
        member = t1.substring$1(member, 4);
        kind = "set";
      } else
        kind = t1.$eq(member, "call") ? "apply" : "method";
    }
    return $.Proxy__forward(this, member, kind, args);
  },
  $isProxy: true,
  $isSerializable: true,
  $asSerializable: function() { return [$.Proxy]; }
};

$$.FunctionProxy = {"": "Proxy;_liblib2$_port,_liblib2$_id",
  call$6: function(arg1, arg2, arg3, arg4, arg5, arg6) {
    return $.Proxy__forward(this, "", "apply", $._pruneUndefined(arg1, arg2, arg3, arg4, arg5, arg6));
  },
  call$0: function() {
    return this.call$6($.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined);
  },
  call$1: function(arg1) {
    return this.call$6(arg1, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined);
  },
  call$2: function(arg1, arg2) {
    return this.call$6(arg1, arg2, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined);
  },
  call$3: function(arg1, arg2, arg3) {
    return this.call$6(arg1, arg2, arg3, $.C__Undefined, $.C__Undefined, $.C__Undefined);
  },
  call$4: function(arg1, arg2, arg3, arg4) {
    return this.call$6(arg1, arg2, arg3, arg4, $.C__Undefined, $.C__Undefined);
  },
  call$5: function(arg1, arg2, arg3, arg4, arg5) {
    return this.call$6(arg1, arg2, arg3, arg4, arg5, $.C__Undefined);
  },
  $isFunctionProxy: true,
  $isFunction: true,
  $isSerializable: true,
  $asSerializable: function() { return [$.Proxy]; }
};

$$._ProxiedObjectTable = {"": "Object;_name,_nextId,_deletedCount,_registry<,_liblib2$_port,_globalIds,_handleStack,_scopeIndices",
  exitScope$0: function() {
    var t1, start, t2, t3, i, t4;
    t1 = this._scopeIndices;
    if (0 >= t1.length)
      throw $.ioore(0);
    start = t1.pop();
    if (start !== (start | 0))
      return this.exitScope$0$bailout(1, start);
    for (t1 = this._registry, t2 = this._handleStack, t3 = this._globalIds, i = start; t4 = t2.length, i < t4; ++i) {
      if (i < 0)
        throw $.ioore(i);
      if (!t3.contains$1(t3, t2[i])) {
        if (i >= t2.length)
          throw $.ioore(i);
        t1.remove$1(t1, t2[i]);
        this._deletedCount = this._deletedCount + 1;
      }
    }
    if (start !== t4)
      $.JSArray_methods.removeRange$2(t2, start, t4 - start);
  },
  exitScope$0$bailout: function(state0, start) {
    var t1, t2, t3, i;
    for (t1 = this._registry, t2 = this._handleStack, t3 = this._globalIds, i = start; $.$lt$n(i, t2.length) === true; ++i) {
      if (i >>> 0 !== i || i >= t2.length)
        throw $.ioore(i);
      if (!t3.contains$1(t3, t2[i])) {
        if (i >= t2.length)
          throw $.ioore(i);
        t1.remove$1(t1, t2[i]);
        this._deletedCount = this._deletedCount + 1;
      }
    }
    if (!$.$eq(start, t2.length)) {
      t1 = t2.length;
      if (typeof start !== "number")
        throw $.iae(start);
      $.JSArray_methods.removeRange$2(t2, start, t1 - start);
    }
  },
  add$1: function(_, x) {
    var t1, t2, id;
    $._enterScopeIfNeeded();
    t1 = this._name + "-";
    t2 = this._nextId;
    this._nextId = t2 + 1;
    id = t1 + $.S(t2);
    t2 = this._registry;
    t2.$indexSet(t2, id, x);
    this._handleStack.push(id);
    return id;
  },
  _ProxiedObjectTable$0: function() {
    this._liblib2$_port.receive$1(new $._ProxiedObjectTable_closure(this));
  }
};

$$._ProxiedObjectTable_closure = {"": "Closure;this_0",
  call$1: function(msg) {
    var receiver, method, args, func, result, e, exception, t1;
    try {
      receiver = $.$index$asx(this.this_0.get$_registry(), $.$index$asx(msg, 0));
      method = $.$index$asx(msg, 1);
      args = $.toList$0$ax($.map$1$ax($.$index$asx(msg, 2), $._deserialize$closure));
      if ($.$eq(method, "#call")) {
        func = $.propertyTypeCast(receiver, "$isFunction");
        result = $._serialize(func.call$1(args));
        return ["return", result];
      } else
        throw $.wrapException("Invocation unsupported on non-function Dart proxies");
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      return ["throws", $.S(e)];
    }

  },
  $isFunction: true
};

$$._deserialize_deserializeFunction = {"": "Closure;",
  call$1: function(message) {
    var t1, id, port;
    t1 = $.getInterceptor$asx(message);
    id = t1.$index(message, 1);
    port = t1.$index(message, 2);
    if ($.$eq(port, $.get$_proxiedObjectTable()._liblib2$_port.toSendPort$0())) {
      t1 = $.get$_proxiedObjectTable()._registry;
      return t1.$index(t1, id);
    } else
      return $.FunctionProxy$_internal(port, id);
  },
  $isFunction: true
};

$$._deserialize_deserializeObject = {"": "Closure;",
  call$1: function(message) {
    var t1, id, port;
    t1 = $.getInterceptor$asx(message);
    id = t1.$index(message, 1);
    port = t1.$index(message, 2);
    if ($.$eq(port, $.get$_proxiedObjectTable()._liblib2$_port.toSendPort$0())) {
      t1 = $.get$_proxiedObjectTable()._registry;
      return t1.$index(t1, id);
    } else
      return $.Proxy$_internal(port, id);
  },
  $isFunction: true
};

// Native classes
$$._HTMLElement = {"": "Element;"};

$$.AbstractWorker = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.AnchorElement = {"": "Element;type}",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {"": "Event;"};

$$.ApplicationCache = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.AreaElement = {"": "Element;"};

$$.Attr = {"": "Node;"};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "Element;"};

$$.BarInfo = {"": "Interceptor;"};

$$.BaseElement = {"": "Element;"};

$$.BeforeLoadEvent = {"": "Event;"};

$$.Blob = {"": "Interceptor;", $isBlob: true, $asBlob: null};

$$.BodyElement = {"": "Element;"};

$$.ButtonElement = {"": "Element;type},value="};

$$.CDataSection = {"": "Text;"};

$$.Canvas2DContextAttributes = {"": "Interceptor;"};

$$.CanvasElement = {"": "Element;"};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;"};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;"};

$$.CharacterData = {"": "Node;length="};

$$.CloseEvent = {"": "Event;"};

$$.Comment = {"": "CharacterData;"};

$$.Composition = {"": "Interceptor;"};

$$.CompositionEvent = {"": "UIEvent;"};

$$.ContentElement = {"": "Element;"};

$$.Coordinates = {"": "Interceptor;"};

$$.Crypto = {"": "Interceptor;"};

$$.Css = {"": "Interceptor;"};

$$.CssCharsetRule = {"": "CssRule;"};

$$.CssFilterRule = {"": "CssRule;"};

$$.CssFontFaceLoadEvent = {"": "Event;"};

$$.CssFontFaceRule = {"": "CssRule;"};

$$.CssHostRule = {"": "CssRule;"};

$$.CssImportRule = {"": "CssRule;"};

$$.CssKeyframeRule = {"": "CssRule;"};

$$.CssKeyframesRule = {"": "CssRule;"};

$$.CssMediaRule = {"": "CssRule;"};

$$.CssPageRule = {"": "CssRule;"};

$$.CssRegionRule = {"": "CssRule;"};

$$.CssRule = {"": "Interceptor;"};

$$.CssStyleDeclaration = {"": "Interceptor;length="};

$$.CssStyleRule = {"": "CssRule;"};

$$.CssStyleSheet = {"": "StyleSheet;"};

$$.CssSupportsRule = {"": "CssRule;"};

$$.CssUnknownRule = {"": "CssRule;"};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.CustomEvent = {"": "Event;detail=",
  $$dom_initCustomEvent$4: function(receiver, typeArg, canBubbleArg, cancelableArg, detailArg) {
    return receiver.initCustomEvent(typeArg, canBubbleArg, cancelableArg, detailArg);
  }
};

$$.DListElement = {"": "Element;"};

$$.DataListElement = {"": "Element;"};

$$.DataTransfer = {"": "Interceptor;"};

$$.DataTransferItem = {"": "Interceptor;"};

$$.DataTransferItemList = {"": "Interceptor;length=",
  add$2: function(receiver, data_OR_file, type) {
    return receiver.add(data_OR_file, type);
  },
  add$1: function($receiver, data_OR_file) {
    return $receiver.add(data_OR_file);
  }
};

$$.DetailsElement = {"": "Element;"};

$$.DeviceAcceleration = {"": "Interceptor;"};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;"};

$$.DeviceRotationRate = {"": "Interceptor;"};

$$.DialogElement = {"": "Element;"};

$$.DirectoryEntry = {"": "Entry;"};

$$.DirectoryReader = {"": "Interceptor;"};

$$.DivElement = {"": "Element;"};

$$.Document = {"": "Node;",
  register$2: function(receiver, $name, options) {
    var t1 = $ === options;
    if (t1)
      options = null;
    if (!t1)
      return receiver.webkitRegister($name, $.convertDartToNative_Dictionary(options));
    return receiver.webkitRegister($name);
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  },
  queryAll$1: function(receiver, selectors) {
    return $._FrozenElementList$_wrap(receiver.querySelectorAll(selectors));
  }
};

$$.DocumentFragment = {"": "Node;",
  get$children: function(receiver) {
    if (receiver._children == null)
      receiver._children = $.FilteredElementList$(receiver);
    return receiver._children;
  },
  set$innerHtml: function(receiver, value) {
    var t1, e, nodes;
    t1 = this.get$nodes(receiver);
    t1.clear$0(t1);
    e = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(e);
    t1.set$innerHtml(e, value);
    nodes = $.List_List$from(t1.get$nodes(e), false);
    t1 = this.get$nodes(receiver);
    t1.addAll$1(t1, nodes);
  }
};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.DomImplementation = {"": "Interceptor;"};

$$.DomParser = {"": "Interceptor;"};

$$.DomSettableTokenList = {"": "DomTokenList;"};

$$.DomStringList = {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.JSString]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSString]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.DomTokenList = {"": "Interceptor;length=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;$$dom_children:children=,id=,innerHtml:innerHTML},$$dom_className:className%",
  get$attributes: function(receiver) {
    return $._ElementAttributeMap$(receiver);
  },
  get$children: function(receiver) {
    return $._ChildrenElementList$_wrap(receiver);
  },
  get$classes: function(receiver) {
    return $._ElementCssClassSet$(receiver);
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  },
  $isElement: true,
  $asElement: null
};

$$.EmbedElement = {"": "Element;type}"};

$$.Entry = {"": "Interceptor;",
  _remove$2: function(receiver, successCallback, errorCallback) {
    return receiver.remove($.convertDartClosureToJS(successCallback, 0), $.convertDartClosureToJS(errorCallback, 1));
  },
  remove$0: function(receiver) {
    var completer = $._AsyncCompleter$();
    this._remove$2(receiver, new $.Entry_remove_closure(completer), new $.Entry_remove_closure0(completer));
    return completer.future;
  }
};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;",
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  }
};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventSource = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.EventTarget = {"": "Interceptor;",
  get$on: function(receiver) {
    return $.Events$(receiver);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.FieldSetElement = {"": "Element;"};

$$.File = {"": "Blob;", $isFile: true, $asFile: null};

$$.FileEntry = {"": "Entry;"};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FileList = {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isFileList: true,
  $asFileList: null,
  $isList: true,
  $asList: function() { return [$.File]; },
  $isIterable: true,
  $asIterable: function() { return [$.File]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.FileReader = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.FileSystem = {"": "Interceptor;"};

$$.FileWriter = {"": "EventTarget;length=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  write$1: function(receiver, data) {
    return receiver.write(data);
  }
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FontLoader = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.FormData = {"": "Interceptor;"};

$$.FormElement = {"": "Element;length="};

$$.Gamepad = {"": "Interceptor;id="};

$$.Geolocation = {"": "Interceptor;"};

$$.Geoposition = {"": "Interceptor;"};

$$.HRElement = {"": "Element;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "Element;"};

$$.HeadingElement = {"": "Element;"};

$$.History = {"": "Interceptor;length="};

$$.HtmlAllCollection = {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlCollection = {"": "Interceptor_ListMixin_ImmutableListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;"};

$$.HtmlElement = {"": "Element;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequest = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  }
};

$$.HttpRequestException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;"};

$$.HttpRequestUpload = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.IFrameElement = {"": "Element;"};

$$.ImageData = {"": "Interceptor;", $isImageData: true, $asImageData: null};

$$.ImageElement = {"": "Element;"};

$$.InputElement = {"": "Element;files=,type},value=", $isElement: true, $asElement: null};

$$.InputMethodContext = {"": "Interceptor;"};

$$.KeyboardEvent = {"": "UIEvent;"};

$$.KeygenElement = {"": "Element;"};

$$.LIElement = {"": "Element;type},value="};

$$.LabelElement = {"": "Element;"};

$$.LegendElement = {"": "Element;"};

$$.LinkElement = {"": "Element;type}"};

$$.Location = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.MapElement = {"": "Element;"};

$$.MediaController = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaElement = {"": "Element;"};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MediaKeyEvent = {"": "Event;"};

$$.MediaList = {"": "Interceptor;length="};

$$.MediaQueryList = {"": "Interceptor;"};

$$.MediaSource = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaStream = {"": "EventTarget;id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaStreamEvent = {"": "Event;"};

$$.MediaStreamTrack = {"": "EventTarget;id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MemoryInfo = {"": "Interceptor;"};

$$.MenuElement = {"": "Element;"};

$$.MessageChannel = {"": "Interceptor;"};

$$.MessageEvent = {"": "Event;"};

$$.MessagePort = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MetaElement = {"": "Element;"};

$$.Metadata = {"": "Interceptor;"};

$$.MeterElement = {"": "Element;value="};

$$.MidiConnectionEvent = {"": "Event;"};

$$.MidiMessageEvent = {"": "Event;"};

$$.MidiPort = {"": "EventTarget;id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MimeType = {"": "Interceptor;"};

$$.MimeTypeArray = {"": "Interceptor_ListMixin_ImmutableListMixin3;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.MimeType]; },
  $isIterable: true,
  $asIterable: function() { return [$.MimeType]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.ModElement = {"": "Element;"};

$$.MouseEvent = {"": "UIEvent;"};

$$.MutationEvent = {"": "Event;"};

$$.MutationObserver = {"": "Interceptor;"};

$$.MutationRecord = {"": "Interceptor;"};

$$.NamedFlow = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.NamedFlowCollection = {"": "Interceptor;length="};

$$.Navigator = {"": "Interceptor;"};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;",
  get$nodes: function(receiver) {
    return $._ChildNodeListLazy$(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.localName;
    if (t1 == null) {
      t1 = receiver.nodeValue;
      if (t1 == null)
        t1 = $.Interceptor.prototype.toString$0.call(this, receiver);
    }
    return t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  }
};

$$.NodeFilter = {"": "Interceptor;"};

$$.NodeIterator = {"": "Interceptor;"};

$$.NodeList = {"": "Interceptor_ListMixin_ImmutableListMixin4;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {"": "Node;"};

$$.Notification = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  cancel$0: function(receiver) {
    return receiver.cancel();
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  }
};

$$.NotificationCenter = {"": "Interceptor;"};

$$.OListElement = {"": "Element;type}"};

$$.ObjectElement = {"": "Element;type}"};

$$.OptGroupElement = {"": "Element;"};

$$.OptionElement = {"": "Element;value="};

$$.OutputElement = {"": "Element;value="};

$$.OverflowEvent = {"": "Event;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "Element;"};

$$.ParamElement = {"": "Element;value="};

$$.Path = {"": "Interceptor;"};

$$.Performance = {"": "EventTarget;"};

$$.PerformanceEntry = {"": "Interceptor;"};

$$.PerformanceMark = {"": "PerformanceEntry;"};

$$.PerformanceMeasure = {"": "PerformanceEntry;"};

$$.PerformanceNavigation = {"": "Interceptor;"};

$$.PerformanceResourceTiming = {"": "PerformanceEntry;"};

$$.PerformanceTiming = {"": "Interceptor;"};

$$.Plugin = {"": "Interceptor;length="};

$$.PluginArray = {"": "Interceptor_ListMixin_ImmutableListMixin5;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Plugin]; },
  $isIterable: true,
  $asIterable: function() { return [$.Plugin]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PopStateEvent = {"": "Event;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "Element;"};

$$.ProcessingInstruction = {"": "Node;"};

$$.ProgressElement = {"": "Element;value="};

$$.ProgressEvent = {"": "Event;"};

$$.QuoteElement = {"": "Element;"};

$$.Range = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RangeException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RtcDataChannel = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  }
};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfSender = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidate = {"": "Interceptor;"};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.RtcPeerConnection = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.RtcSessionDescription = {"": "Interceptor;"};

$$.RtcStatsReport = {"": "Interceptor;id="};

$$.RtcStatsResponse = {"": "Interceptor;"};

$$.Screen = {"": "Interceptor;"};

$$.ScriptElement = {"": "Element;type}"};

$$.ScriptProfile = {"": "Interceptor;"};

$$.ScriptProfileNode = {"": "Interceptor;",
  children$0: function(receiver) {
    return receiver.children();
  },
  get$children: function(receiver) {
    return new $.BoundClosure$i0(this, "children$0", receiver);
  }
};

$$.SecurityPolicy = {"": "Interceptor;"};

$$.SecurityPolicyViolationEvent = {"": "Event;"};

$$.SelectElement = {"": "Element;length=,value="};

$$.Selection = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.ShadowElement = {"": "Element;"};

$$.ShadowRoot = {"": "DocumentFragment;innerHtml:innerHTML}"};

$$.SourceBuffer = {"": "Interceptor;"};

$$.SourceBufferList = {"": "EventTarget_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isList: true,
  $asList: function() { return [$.SourceBuffer]; },
  $isIterable: true,
  $asIterable: function() { return [$.SourceBuffer]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SourceElement = {"": "Element;type}"};

$$.SpanElement = {"": "Element;"};

$$.SpeechGrammar = {"": "Interceptor;"};

$$.SpeechGrammarList = {"": "Interceptor_ListMixin_ImmutableListMixin6;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.SpeechGrammar]; },
  $isIterable: true,
  $asIterable: function() { return [$.SpeechGrammar]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechInputResult = {"": "Interceptor;"};

$$.SpeechRecognition = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.SpeechRecognitionAlternative = {"": "Interceptor;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.SpeechRecognitionResult = {"": "Interceptor;length="};

$$.SpeechSynthesis = {"": "Interceptor;",
  cancel$0: function(receiver) {
    return receiver.cancel();
  }
};

$$.SpeechSynthesisEvent = {"": "Event;"};

$$.SpeechSynthesisUtterance = {"": "EventTarget;"};

$$.SpeechSynthesisVoice = {"": "Interceptor;"};

$$.Storage = {"": "Interceptor;",
  $index: function(receiver, key) {
    return receiver.getItem(key);
  },
  $indexSet: function(receiver, key, value) {
    receiver.setItem(key, value);
  },
  forEach$1: function(receiver, f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = receiver.key(i);
      if (key == null)
        return;
      f.call$2(key, receiver.getItem(key));
    }
  },
  get$keys: function(receiver) {
    var keys = [];
    this.forEach$1(receiver, new $.Storage_keys_closure(keys));
    return keys;
  },
  get$values: function(receiver) {
    var values = [];
    this.forEach$1(receiver, new $.Storage_values_closure(values));
    return values;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  get$isEmpty: function(receiver) {
    return receiver.key(0) == null;
  },
  $isMap: true,
  $asMap: function() { return [$.JSString, $.JSString]; }
};

$$.StorageEvent = {"": "Event;"};

$$.StorageInfo = {"": "Interceptor;"};

$$.StorageQuota = {"": "Interceptor;"};

$$.StyleElement = {"": "Element;type}"};

$$.StyleMedia = {"": "Interceptor;"};

$$.StyleSheet = {"": "Interceptor;"};

$$.TableCaptionElement = {"": "Element;"};

$$.TableCellElement = {"": "Element;"};

$$.TableColElement = {"": "Element;"};

$$.TableElement = {"": "Element;"};

$$.TableRowElement = {"": "Element;"};

$$.TableSectionElement = {"": "Element;"};

$$.TemplateElement = {"": "Element;"};

$$.Text = {"": "CharacterData;"};

$$.TextAreaElement = {"": "Element;value="};

$$.TextEvent = {"": "UIEvent;"};

$$.TextMetrics = {"": "Interceptor;"};

$$.TextTrack = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.TextTrackCue = {"": "EventTarget;id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.TextTrackCueList = {"": "Interceptor_ListMixin_ImmutableListMixin7;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $asList: function() { return [$.TextTrackCue]; },
  $isIterable: true,
  $asIterable: function() { return [$.TextTrackCue]; }
};

$$.TextTrackList = {"": "EventTarget_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isList: true,
  $asList: function() { return [$.TextTrack]; },
  $isIterable: true,
  $asIterable: function() { return [$.TextTrack]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.TimeRanges = {"": "Interceptor;length="};

$$.TitleElement = {"": "Element;"};

$$.Touch = {"": "Interceptor;"};

$$.TouchEvent = {"": "UIEvent;"};

$$.TouchList = {"": "Interceptor_ListMixin_ImmutableListMixin8;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Touch]; },
  $isIterable: true,
  $asIterable: function() { return [$.Touch]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.TrackElement = {"": "Element;"};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.TreeWalker = {"": "Interceptor;"};

$$.UIEvent = {"": "Event;detail="};

$$.UListElement = {"": "Element;"};

$$.UnknownElement = {"": "Element;"};

$$.Url = {"": "Interceptor;"};

$$.ValidityState = {"": "Interceptor;"};

$$.VideoElement = {"": "MediaElement;"};

$$.WebSocket = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  }
};

$$.WheelEvent = {"": "MouseEvent;"};

$$.Window = {"": "EventTarget;",
  lookupPort$1: function(receiver, $name) {
    var t1, portStr, port;
    t1 = receiver.document.documentElement;
    t1.get$attributes;
    portStr = $._ElementAttributeMap$(t1)._element.getAttribute("dart-port:" + $name);
    if (portStr == null)
      return;
    port = $.parse(portStr, null);
    return $._JsDeserializer$0().deserialize$1(port);
  },
  registerPort$2: function(receiver, $name, port) {
    var serialized, t1, t2, output;
    serialized = $._JsSerializer$0().traverse$1(port);
    t1 = receiver.document.documentElement;
    t1.get$attributes;
    t1 = $._ElementAttributeMap$(t1);
    t2 = "dart-port:" + $name;
    output = $.StringBuffer$("");
    $._JsonStringifier$(output).stringifyValue$1(serialized);
    t1._element.setAttribute(t2, output._contents);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  }
};

$$.Worker = {"": "AbstractWorker;"};

$$.XPathEvaluator = {"": "Interceptor;"};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.XPathExpression = {"": "Interceptor;"};

$$.XPathNSResolver = {"": "Interceptor;"};

$$.XPathResult = {"": "Interceptor;"};

$$.XmlSerializer = {"": "Interceptor;"};

$$.XsltProcessor = {"": "Interceptor;"};

$$._CSSValue = {"": "Interceptor;"};

$$._ClientRect = {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "(" + $.S(receiver.left) + ", " + $.S(receiver.top) + ", " + $.S(receiver.width) + ", " + $.S(receiver.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = receiver.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = receiver.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = receiver.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = receiver.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  $isRect: true,
  $asRect: null
};

$$._ClientRectList = {"": "Interceptor_ListMixin_ImmutableListMixin9;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Rect]; },
  $isIterable: true,
  $asIterable: function() { return [$.Rect]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._CssRuleList = {"": "Interceptor_ListMixin_ImmutableListMixin10;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.CssRule]; },
  $isIterable: true,
  $asIterable: function() { return [$.CssRule]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._CssValueList = {"": "_CSSValue_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$._CSSValue]; },
  $isIterable: true,
  $asIterable: function() { return [$._CSSValue]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._DomPoint = {"": "Interceptor;"};

$$._EntryArray = {"": "Interceptor_ListMixin_ImmutableListMixin11;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Entry]; },
  $isIterable: true,
  $asIterable: function() { return [$.Entry]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._EntryArraySync = {"": "Interceptor_ListMixin_ImmutableListMixin12;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$._EntrySync]; },
  $isIterable: true,
  $asIterable: function() { return [$._EntrySync]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._EntrySync = {"": "Interceptor;"};

$$._GamepadList = {"": "Interceptor_ListMixin_ImmutableListMixin13;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Gamepad]; },
  $isIterable: true,
  $asIterable: function() { return [$.Gamepad]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._NamedNodeMap = {"": "Interceptor_ListMixin_ImmutableListMixin14;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._SpeechInputResultList = {"": "Interceptor_ListMixin_ImmutableListMixin15;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.SpeechInputResult]; },
  $isIterable: true,
  $asIterable: function() { return [$.SpeechInputResult]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._SpeechRecognitionResultList = {"": "Interceptor_ListMixin_ImmutableListMixin16;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.SpeechRecognitionResult]; },
  $isIterable: true,
  $asIterable: function() { return [$.SpeechRecognitionResult]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._StyleSheetList = {"": "Interceptor_ListMixin_ImmutableListMixin17;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.StyleSheet]; },
  $isIterable: true,
  $asIterable: function() { return [$.StyleSheet]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Cursor = {"": "Interceptor;"};

$$.CursorWithValue = {"": "Cursor;"};

$$.Database = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.IdbFactory = {"": "Interceptor;"};

$$.Index = {"": "Interceptor;"};

$$.KeyRange = {"": "Interceptor;"};

$$.ObjectStore = {"": "Interceptor;",
  add$2: function(receiver, value, key) {
    var request, e, stacktrace, t1, exception;
    try {
      request = null;
      if (key != null)
        request = this.$$dom_add$2(receiver, value, key);
      else
        request = this.$$dom_add$1(receiver, value);
      t1 = $._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $._StackTrace$(exception.stack);
      return $._FutureImpl$immediateError(e, stacktrace);
    }

  },
  add$1: function($receiver, value) {
    return this.add$2($receiver, value, null);
  },
  $$dom_add$2: function(receiver, value, key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (!t1)
      return receiver.add($._convertDartToNative_PrepareForStructuredClone(value), $._convertDartToNative_PrepareForStructuredClone(key));
    return receiver.add($._convertDartToNative_PrepareForStructuredClone(value));
  },
  $$dom_add$1: function($receiver, value) {
    return this.$$dom_add$2($receiver, value, $);
  }
};

$$.OpenDBRequest = {"": "Request;"};

$$.Request = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.Transaction = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;"};

$$.AltGlyphElement = {"": "TextPositioningElement;"};

$$.Angle = {"": "Interceptor;"};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedAngle = {"": "Interceptor;"};

$$.AnimatedBoolean = {"": "Interceptor;"};

$$.AnimatedEnumeration = {"": "Interceptor;"};

$$.AnimatedInteger = {"": "Interceptor;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimatedPreserveAspectRatio = {"": "Interceptor;"};

$$.AnimatedRect = {"": "Interceptor;"};

$$.AnimatedString = {"": "Interceptor;"};

$$.AnimatedTransformList = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;"};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.ElementInstance = {"": "EventTarget;",
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  }
};

$$.EllipseElement = {"": "StyledElement;"};

$$.FEBlendElement = {"": "StyledElement;"};

$$.FEColorMatrixElement = {"": "StyledElement;"};

$$.FEComponentTransferElement = {"": "StyledElement;"};

$$.FECompositeElement = {"": "StyledElement;"};

$$.FEConvolveMatrixElement = {"": "StyledElement;"};

$$.FEDiffuseLightingElement = {"": "StyledElement;"};

$$.FEDisplacementMapElement = {"": "StyledElement;"};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;"};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;"};

$$.FEImageElement = {"": "StyledElement;"};

$$.FEMergeElement = {"": "StyledElement;"};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;"};

$$.FEOffsetElement = {"": "StyledElement;"};

$$.FEPointLightElement = {"": "SvgElement;"};

$$.FESpecularLightingElement = {"": "StyledElement;"};

$$.FESpotLightElement = {"": "SvgElement;"};

$$.FETileElement = {"": "StyledElement;"};

$$.FETurbulenceElement = {"": "StyledElement;"};

$$.FilterElement = {"": "StyledElement;"};

$$.ForeignObjectElement = {"": "StyledElement;"};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;"};

$$.Length = {"": "Interceptor;"};

$$.LengthList = {"": "Interceptor_ListMixin_ImmutableListMixin18;",
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Length]; },
  $isIterable: true,
  $asIterable: function() { return [$.Length]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;"};

$$.Matrix0 = {"": "Interceptor;"};

$$.MetadataElement = {"": "SvgElement;"};

$$.Number = {"": "Interceptor;"};

$$.NumberList = {"": "Interceptor_ListMixin_ImmutableListMixin19;",
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Number]; },
  $isIterable: true,
  $asIterable: function() { return [$.Number]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PathElement = {"": "StyledElement;"};

$$.PathSeg = {"": "Interceptor;"};

$$.PathSegArcAbs = {"": "PathSeg;"};

$$.PathSegArcRel = {"": "PathSeg;"};

$$.PathSegClosePath = {"": "PathSeg;"};

$$.PathSegCurvetoCubicAbs = {"": "PathSeg;"};

$$.PathSegCurvetoCubicRel = {"": "PathSeg;"};

$$.PathSegCurvetoCubicSmoothAbs = {"": "PathSeg;"};

$$.PathSegCurvetoCubicSmoothRel = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticAbs = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticRel = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticSmoothAbs = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticSmoothRel = {"": "PathSeg;"};

$$.PathSegLinetoAbs = {"": "PathSeg;"};

$$.PathSegLinetoHorizontalAbs = {"": "PathSeg;"};

$$.PathSegLinetoHorizontalRel = {"": "PathSeg;"};

$$.PathSegLinetoRel = {"": "PathSeg;"};

$$.PathSegLinetoVerticalAbs = {"": "PathSeg;"};

$$.PathSegLinetoVerticalRel = {"": "PathSeg;"};

$$.PathSegList = {"": "Interceptor_ListMixin_ImmutableListMixin20;",
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.PathSeg]; },
  $isIterable: true,
  $asIterable: function() { return [$.PathSeg]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PathSegMovetoAbs = {"": "PathSeg;"};

$$.PathSegMovetoRel = {"": "PathSeg;"};

$$.PatternElement = {"": "StyledElement;"};

$$.Point = {"": "Interceptor;"};

$$.PointList = {"": "Interceptor;"};

$$.PolygonElement = {"": "StyledElement;"};

$$.PolylineElement = {"": "StyledElement;"};

$$.PreserveAspectRatio = {"": "Interceptor;"};

$$.RadialGradientElement = {"": "_GradientElement;"};

$$.Rect0 = {"": "Interceptor;"};

$$.RectElement = {"": "StyledElement;"};

$$.RenderingIntent = {"": "Interceptor;"};

$$.ScriptElement0 = {"": "SvgElement;type}"};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StringList = {"": "Interceptor_ListMixin_ImmutableListMixin21;",
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.JSString]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSString]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.StyleElement0 = {"": "SvgElement;type}"};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$classes: function(receiver) {
    if (receiver._cssClassSet == null)
      receiver._cssClassSet = $._AttributeClassSet$(receiver);
    return receiver._cssClassSet;
  },
  get$children: function(receiver) {
    return $.FilteredElementList$(receiver);
  },
  set$children: function(receiver, value) {
    var children = this.get$children(receiver);
    children.clear$0(children);
    children.addAll$1(children, value);
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    this.set$children(receiver, $.get$children$x($.$index$asx(t1.get$children(container), 0)));
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  }
};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;"};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;"};

$$.TextPositioningElement = {"": "TextContentElement;"};

$$.TitleElement0 = {"": "StyledElement;"};

$$.Transform = {"": "Interceptor;"};

$$.TransformList = {"": "Interceptor_ListMixin_ImmutableListMixin22;",
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $asList: function() { return [$.Transform]; },
  $isIterable: true,
  $asIterable: function() { return [$.Transform]; }
};

$$.UnitTypes = {"": "Interceptor;"};

$$.UseElement = {"": "StyledElement;"};

$$.ViewElement = {"": "SvgElement;"};

$$.ViewSpec = {"": "Interceptor;"};

$$.ZoomEvent = {"": "UIEvent;"};

$$._ElementInstanceList = {"": "Interceptor_ListMixin_ImmutableListMixin23;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver.item(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.ElementInstance]; },
  $isIterable: true,
  $asIterable: function() { return [$.ElementInstance]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._GradientElement = {"": "StyledElement;"};

$$._SVGColor = {"": "Interceptor;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.ByteBuffer = {"": "Interceptor;", $isByteBuffer: true, $asByteBuffer: null};

$$.TypedData = {"": "Interceptor;", $isTypedData: true, $asTypedData: null};

$$.ByteData = {"": "TypedData;"};

$$.Float32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Float64List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int16List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int8List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint16List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8ClampedList = {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout1(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.AnalyserNode = {"": "AudioNode;"};

$$.AudioBuffer = {"": "Interceptor;length="};

$$.AudioBufferSourceNode = {"": "AudioSourceNode;"};

$$.AudioContext = {"": "EventTarget;"};

$$.AudioDestinationNode = {"": "AudioNode;"};

$$.AudioListener = {"": "Interceptor;"};

$$.AudioNode = {"": "Interceptor;"};

$$.AudioParam = {"": "Interceptor;"};

$$.AudioProcessingEvent = {"": "Event;"};

$$.AudioSourceNode = {"": "AudioNode;"};

$$.BiquadFilterNode = {"": "AudioNode;"};

$$.ChannelMergerNode = {"": "AudioNode;"};

$$.ChannelSplitterNode = {"": "AudioNode;"};

$$.ConvolverNode = {"": "AudioNode;"};

$$.DelayNode = {"": "AudioNode;"};

$$.DynamicsCompressorNode = {"": "AudioNode;"};

$$.GainNode = {"": "AudioNode;"};

$$.MediaElementAudioSourceNode = {"": "AudioSourceNode;"};

$$.MediaStreamAudioDestinationNode = {"": "AudioSourceNode;"};

$$.MediaStreamAudioSourceNode = {"": "AudioSourceNode;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.OfflineAudioContext = {"": "AudioContext;"};

$$.OscillatorNode = {"": "AudioSourceNode;"};

$$.PannerNode = {"": "AudioNode;"};

$$.ScriptProcessorNode = {"": "AudioNode;"};

$$.WaveShaperNode = {"": "AudioNode;"};

$$.WaveTable = {"": "Interceptor;"};

$$.ActiveInfo = {"": "Interceptor;"};

$$.Buffer = {"": "Interceptor;"};

$$.CompressedTextureAtc = {"": "Interceptor;"};

$$.CompressedTexturePvrtc = {"": "Interceptor;"};

$$.CompressedTextureS3TC = {"": "Interceptor;"};

$$.ContextAttributes = {"": "Interceptor;"};

$$.ContextEvent = {"": "Event;"};

$$.DebugRendererInfo = {"": "Interceptor;"};

$$.DebugShaders = {"": "Interceptor;"};

$$.DepthTexture = {"": "Interceptor;"};

$$.ExtDrawBuffers = {"": "Interceptor;"};

$$.ExtTextureFilterAnisotropic = {"": "Interceptor;"};

$$.Framebuffer = {"": "Interceptor;"};

$$.LoseContext = {"": "Interceptor;"};

$$.OesElementIndexUint = {"": "Interceptor;"};

$$.OesStandardDerivatives = {"": "Interceptor;"};

$$.OesTextureFloat = {"": "Interceptor;"};

$$.OesTextureHalfFloat = {"": "Interceptor;"};

$$.OesVertexArrayObject = {"": "Interceptor;"};

$$.Program = {"": "Interceptor;"};

$$.Renderbuffer = {"": "Interceptor;"};

$$.RenderingContext = {"": "CanvasRenderingContext;"};

$$.Shader = {"": "Interceptor;"};

$$.ShaderPrecisionFormat = {"": "Interceptor;"};

$$.Texture = {"": "Interceptor;"};

$$.UniformLocation = {"": "Interceptor;"};

$$.VertexArrayObject = {"": "Interceptor;"};

$$.SqlDatabase = {"": "Interceptor;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

$$.SqlResultSet = {"": "Interceptor;"};

$$.SqlResultSetRowList = {"": "Interceptor_ListMixin_ImmutableListMixin24;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return $.convertNativeToDart_Dictionary(receiver.item(index));
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Map]; },
  $isIterable: true,
  $asIterable: function() { return [$.Map]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SqlTransaction = {"": "Interceptor;"};

// Bound closures
$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};

$$.BoundClosure$i0 = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  }
};

$$.Closure$_processWorkerMessage = {"": "Closure;call$2,$name"};

$$.Closure$_throwFormatException = {"": "Closure;call$1,$name"};

$$.Closure$wrapException = {"": "Closure;call$1,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name"};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name"};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name"};

$$.Closure$_asyncRunCallback = {"": "Closure;call$0,$name"};

$$.Closure$_nullDataHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullErrorHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullDoneHandler = {"": "Closure;call$0,$name"};

$$.Closure$main = {"": "Closure;call$0,$name"};

$$.Closure$_serializeDataTree = {"": "Closure;call$1,$name"};

$$.Closure$_serialize = {"": "Closure;call$1,$name"};

$$.Closure$_deserialize = {"": "Closure;call$1,$name"};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.getInterceptor(src).$isJavaScriptIndexingBehavior))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof srcStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.getInterceptor(dst).$isJavaScriptIndexingBehavior)
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof count !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var t1, i, j, t2, t3;
  t1 = $.getInterceptor$n(srcStart);
  if (t1.$lt(srcStart, dstStart) === true)
    for (i = $.$sub$n(t1.$add(srcStart, count), 1), j = $.$sub$n($.$add$ns(dstStart, count), 1), t1 = $.getInterceptor$asx(src); t2 = $.getInterceptor$n(i), t2.$ge(i, srcStart) === true; i = t2.$sub(i, 1), j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t2 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = $.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)) === true; i = t3.$add(i, 1), j = $.$add$ns(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element))
      return i;
  }
  return -1;
};

$.SubListIterable$ = function(_iterable, _start, _endOrLength) {
  return new $.SubListIterable(_iterable, _start, _endOrLength);
};

$.ListIterator$ = function(iterable) {
  return new $.ListIterator(iterable, $.get$length$asx(iterable), 0, null);
};

$.MappedIterable$ = function(_iterable, _f) {
  return new $.MappedIterable(_iterable, _f);
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.MappedListIterable$ = function(_source, _f) {
  return new $.MappedListIterable(_source, _f);
};

$.WhereIterable$ = function(_iterable, _f) {
  return new $.WhereIterable(_iterable, _f);
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.SkipIterable$ = function(_iterable, _skipCount) {
  var t1 = new $.SkipIterable(_iterable, _skipCount);
  t1.SkipIterable$2(_iterable, _skipCount);
  return t1;
};

$.SkipIterator$ = function(_iterator, _skipCount) {
  var t1 = new $.SkipIterator(_iterator, _skipCount);
  t1.SkipIterator$2(_iterator, _skipCount);
  return t1;
};

$.IterableMixinWorkaround_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0() === true;)
    f.call$1(t1.get$current());
};

$.IterableMixinWorkaround_joinList = function(list, separator) {
  var t1, buffer, i, str;
  if (typeof separator !== "string")
    return $.IterableMixinWorkaround_joinList$bailout(1, list, separator);
  t1 = $.getInterceptor$asx(list);
  if (t1.get$isEmpty(list) === true)
    return "";
  if (t1.get$length(list) === 1)
    return $.S(t1.$index(list, 0));
  buffer = $.StringBuffer$("");
  if ($.JSString_methods.get$isEmpty(separator))
    for (i = 0; $.JSNumber_methods.$lt(i, t1.get$length(list)); ++i) {
      str = t1.$index(list, i);
      str = $.S(str);
      buffer._contents = buffer._contents + str;
    }
  else {
    str = t1.$index(list, 0);
    str = $.S(str);
    buffer._contents = buffer._contents + str;
    for (i = 1; $.JSNumber_methods.$lt(i, t1.get$length(list)); ++i) {
      buffer._contents = buffer._contents + separator;
      str = t1.$index(list, i);
      str = $.S(str);
      buffer._contents = buffer._contents + str;
    }
  }
  return buffer._contents;
};

$.IterableMixinWorkaround_joinList$bailout = function(state0, list, separator) {
  var t1, buffer, i, str, t2;
  t1 = $.getInterceptor$asx(list);
  if (t1.get$isEmpty(list) === true)
    return "";
  if (t1.get$length(list) === 1)
    return $.S(t1.$index(list, 0));
  buffer = $.StringBuffer$("");
  if ($.get$isEmpty$asx(separator) === true)
    for (i = 0; $.JSNumber_methods.$lt(i, t1.get$length(list)); ++i) {
      str = t1.$index(list, i);
      str = $.S(str);
      buffer._contents = buffer._contents + str;
    }
  else {
    str = t1.$index(list, 0);
    str = $.S(str);
    buffer._contents = buffer._contents + str;
    for (t2 = typeof separator === "string", i = 1; $.JSNumber_methods.$lt(i, t1.get$length(list)); ++i) {
      str = t2 ? separator : $.S(separator);
      buffer._contents = buffer._contents + str;
      str = t1.$index(list, i);
      str = $.S(str);
      buffer._contents = buffer._contents + str;
    }
  }
  return buffer._contents;
};

$.IterableMixinWorkaround__rangeCheck = function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) === true || t1.$gt(start, list.length) === true)
    throw $.wrapException($.RangeError$range(start, 0, list.length));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) === true || t1.$gt(end, list.length) === true)
    throw $.wrapException($.RangeError$range(end, start, list.length));
};

$.IterableMixinWorkaround_setRangeList = function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0))
    return;
  if ($.$lt$n(skipCount, 0) === true)
    throw $.wrapException($.ArgumentError$(skipCount));
  otherStart = skipCount;
  otherList = from;
  if ($.$gt$n($.$add$ns(otherStart, $length), $.get$length$asx(otherList)) === true)
    throw $.wrapException($.StateError$("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
};

$.Symbol$unvalidated = function(_name) {
  return new $.Symbol(_name);
};

$.ToString__emitValue = function(i, result, visiting) {
  var t1, isList, t2, t3, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$x(result);
  t3.write$1(result, t2);
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    e = t2.get$current();
    if (!first)
      t3.write$1(result, ", ");
    $.ToString__emitObject(e, result, visiting);
  }
  t3.write$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable)) {
    o;
    if ($.ToString__containsRef(visiting, o))
      $.write$1$x(result, typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  } else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      $.write$1$x(result, "{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    $.write$1$x(result, o);
};

$.ToString__containsRef = function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString__emitPair = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$x(result);
  t3.write$1(result, "{");
  t1.first_0 = true;
  $.forEach$1$ax(m, new $.ToString__emitPair_closure(t1, result, visiting));
  t3.write$1(result, "}");
  t2.removeLast$0(visiting);
};

$.HashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key))
      return i;
  return -1;
};

$.HashMapKeyIterable$ = function(_map) {
  return new $.HashMapKeyIterable(_map);
};

$.HashMapKeyIterator$ = function(_map, _keys) {
  return new $.HashMapKeyIterator(_map, _keys, 0, null);
};

$.LinkedHashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key))
      return i;
  return -1;
};

$.LinkedHashMapCell$ = function(_key, _value) {
  return new $.LinkedHashMapCell(_key, _value, null, null);
};

$.LinkedHashMapKeyIterable$ = function(_map) {
  return new $.LinkedHashMapKeyIterable(_map);
};

$.LinkedHashMapKeyIterator$ = function(_map, _modifications) {
  var t1 = new $.LinkedHashMapKeyIterator(_map, _modifications, null, null);
  t1.LinkedHashMapKeyIterator$2(_map, _modifications);
  return t1;
};

$.HashSet__findBucketIndex = function(bucket, element) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i], element))
      return i;
  return -1;
};

$.HashSetIterator$ = function(_set, _elements) {
  return new $.HashSetIterator(_set, _elements, 0, null);
};

$.LinkedHashSet__findBucketIndex = function(bucket, element) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_liblib1$_element(), element))
      return i;
  return -1;
};

$.LinkedHashSetCell$ = function(_element) {
  return new $.LinkedHashSetCell(_element, null, null);
};

$.LinkedHashSetIterator$ = function(_set, _modifications) {
  var t1 = new $.LinkedHashSetIterator(_set, _modifications, null, null);
  t1.LinkedHashSetIterator$2(_set, _modifications);
  return t1;
};

$._symbolMapToStringMap = function(map) {
  var result;
  if (map == null)
    return;
  result = $.HashMap$();
  map.forEach$1(map, new $._symbolMapToStringMap_closure(result));
  return result;
};

$.Function__toMangledNames = function(namedArguments) {
  var result;
  if (namedArguments == null)
    return;
  result = $.makeLiteralMap([]);
  $.JSNull_methods.forEach$1(namedArguments, new $.Function__toMangledNames_closure(result));
  return result;
};

$._symbolMapToStringMap0 = function(map) {
  var result;
  if (map == null)
    return;
  result = $.HashMap$();
  map.forEach$1(map, new $._symbolMapToStringMap_closure0(result));
  return result;
};

$.getDispatchProperty = function(object) {
  return object[$.dispatchPropertyName];
};

$.setDispatchProperty = function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
};

$.getNativeInterceptor = function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
};

$.initializeDispatchProperty = function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, {i: jsObjectInterceptor, p: objectProto, e: null});
      return;
    }
  }
};

$.initializeDispatchProperty$bailout = function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, {i: jsObjectInterceptor, p: objectProto, e: null});
      return;
    }
  }
};

$.JsIsolateSink$fromPort = function(_port) {
  return new $.JsIsolateSink(false, _port);
};

$.startRootIsolate = function(entry) {
  var rootContext;
  $globalState = $._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._Manager$ = function(entry) {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue(), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2, values;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : $[functionName];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      values = $.Primitives_getProperty(sender, "expando$values");
      t1.remove$1(t1, values == null ? null : $.Primitives_getProperty(values, t2._getKey$0()));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $._StackTrace$(exception.stack);
      throw $.wrapException($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_closure(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkGrowable = function(list, reason) {
  if (!!list.fixed$length)
    throw $.wrapException($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException($.ArgumentError$(value));
  return res;
};

$.createInvocationMirror = function($name, internalName, type, $arguments, argumentNames) {
  return $.JSInvocationMirror$($.Symbol$unvalidated($name), internalName, type, $arguments, argumentNames);
};

$.JSInvocationMirror$ = function(memberName, _internalName, _kind, _arguments, _namedArgumentNames) {
  return new $.JSInvocationMirror(memberName, _internalName, _kind, _arguments, _namedArgumentNames, null);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.wrapException($.FormatException$(string));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException$closure;
  if (typeof source !== "string")
    $.throwExpression($.ArgumentError$(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        throw $.ioore(2);
      if (match[2] != null)
        return parseInt(source, 16);
      if (3 >= t1)
        throw $.ioore(3);
      if (match[3] != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    throw $.wrapException($.ArgumentError$("Radix is not an integer"));
    if ($.JSNull_methods.$lt(radix, 2) || $.JSNull_methods.$gt(radix, 36))
      throw $.wrapException($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    if (match != null) {
      t1 = false;
      if (t1)
        return parseInt(source, 10);
      if (!$.JSNull_methods.$lt(radix, 10)) {
        if (3 >= match.length)
          throw $.ioore(3);
        t1 = match[3] == null;
      } else
        t1 = true;
      if (t1) {
        if ($.JSNull_methods.$le(radix, 10)) {
          if (typeof radix !== "number")
            throw $.iae(radix);
          maxCharCode = 48 + radix - 1;
        } else {
          if (typeof radix !== "number")
            throw $.iae(radix);
          maxCharCode = 97 + radix - 10 - 1;
        }
        if (1 >= match.length)
          throw $.ioore(1);
        digitsPart = $.toLowerCase$0$s(match[1]);
        for (t1 = $.getInterceptor$asx(digitsPart), i = 0; $.JSNumber_methods.$lt(i, t1.get$length(digitsPart)); ++i)
          if ($.$gt$n(t1.codeUnitAt$1(digitsPart, i), maxCharCode) === true)
            return handleError.call$1(source);
      }
    }
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
};

$.Primitives_parseDouble = function(source, handleError) {
  var result;
  if (typeof source !== "string")
    $.throwExpression($.ArgumentError$(source));
  if (handleError == null)
    handleError = $.Primitives__throwFormatException$closure;
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if (isNaN(result) && !$.$eq(source, "NaN"))
    return handleError.call$1(source);
  return result;
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, i;
  a = [];
  for (t1 = $.JSArray_methods.get$iterator(codePoints); t1.moveNext$0();) {
    i = t1.get$current();
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException($.ArgumentError$(i));
    else
      i;
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + ($.JSNumber_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw $.wrapException($.ArgumentError$(i));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, i;
  for (t1 = $.JSArray_methods.get$iterator(charCodes); t1.moveNext$0();) {
    i = t1.get$current();
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException($.ArgumentError$(i));
    else
      i;
    if (i < 0)
      throw $.wrapException($.ArgumentError$(i));
    if (i > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.Primitives_getProperty = function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  return object[key];
};

$.Primitives_setProperty = function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  object[key] = value;
};

$.Primitives_applyFunction = function($function, positionalArguments, namedArguments) {
  var buffer, $arguments, t1, argumentCount, listOfNamedArguments, selectorName, jsFunction;
  buffer = $.StringBuffer$("");
  $arguments = [];
  if (positionalArguments != null) {
    t1 = $.get$length$asx(positionalArguments);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    argumentCount = 0 + t1;
    $.JSArray_methods.addAll$1($arguments, positionalArguments);
  } else
    argumentCount = 0;
  if (namedArguments != null) {
    namedArguments.get$isEmpty;
    t1 = namedArguments._length !== 0;
  } else
    t1 = false;
  if (t1) {
    namedArguments.get$keys;
    listOfNamedArguments = $.List_List$from($.LinkedHashMapKeyIterable$(namedArguments), true);
    namedArguments.get$length;
    argumentCount += namedArguments._length;
    listOfNamedArguments.sort();
    $.IterableMixinWorkaround_forEach(listOfNamedArguments, new $.Primitives_applyFunction_closure(namedArguments, buffer, $arguments));
  }
  selectorName = "call$" + $.S(argumentCount) + $.S(buffer);
  jsFunction = $function[selectorName];
  if (jsFunction == null)
    throw $.wrapException($.NoSuchMethodError$($function, selectorName, $arguments, $.makeLiteralMap([]), null));
  return jsFunction.apply($function, $arguments);
};

$.iae = function(argument) {
  throw $.wrapException($.ArgumentError$(argument));
};

$.ioore = function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.throwExpression($.ArgumentError$(index));
  throw $.wrapException($.RangeError$value(index));
};

$.wrapException = function(ex) {
  var wrapper = $.DartError$(ex == null ? $.C_NullThrownError : ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.throwExpression = function(ex) {
  throw $.wrapException(ex);
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") || t1.$eq(type, "called_non_callable") || t1.$eq(type, "non_object_property_call") || t1.$eq(type, "non_object_property_load");
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method"))
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1) {
      message;
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    }
    return $._ExceptionImplementation$(t1 ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$._StackTrace$ = function(_stack) {
  return new $._StackTrace(_stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$();
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1, result;
  t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0)) {
    result = isolate.eval$1(new $.invokeClosure_closure(closure));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 1)) {
    result = isolate.eval$1(new $.invokeClosure_closure0(closure, arg1));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 2)) {
    result = isolate.eval$1(new $.invokeClosure_closure1(closure, arg1, arg2));
    $globalState.topEventLoop.run$0();
    return result;
  } else
    throw $.wrapException($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
};

$.propertyTypeCast = function(value, property) {
  var t1;
  if (value == null || !!value[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + $.S(expectedType));
};

$.throwCyclicInit = function(staticName) {
  throw $.wrapException($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$._convertJsonToDart = function(json, reviver) {
  var revive = reviver == null ? new $._convertJsonToDart_closure() : reviver;
  return revive.call$2("", new $._convertJsonToDart_walk(revive).call$1(json));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  return $.constructorNameFallback(obj);
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.name;
    if (typeof $name === "string") {
      $name;
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    } else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.getFunctionForTypeNameOf = function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox$closure;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
};

$.toStringForNativeObject = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.defineNativeMethods = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
};

$.defineNativeMethodsNonleaf = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
};

$.defineNativeMethodsCommon = function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
};

$.defineNativeMethodsFinish = function() {
};

$.lookupDispatchRecord = function(obj) {
  var hasOwnPropertyFunction, tag, map, interceptor, secondTag;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $._getTypeNameOf.call$1(obj);
  map = $.interceptorsByTag;
  interceptor = hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null) {
      map = $.interceptorsByTag;
      interceptor = hasOwnPropertyFunction.call(map, secondTag) ? map[secondTag] : null;
    }
  }
  if (interceptor == null)
    interceptor = {__what: "interceptor not found", __tag: tag};
  if (true === $.leafTags[tag])
    return {i: interceptor, p: false, e: null};
  else
    return {i: interceptor, p: Object.getPrototypeOf(obj), e: null};
};

$.JSSyntaxRegExp$_globalVersionOf = function(other) {
  var t1, t2, t3;
  t1 = other.get$pattern(other);
  t2 = other.get$isMultiLine();
  t3 = other.get$isCaseSensitive();
  return new $.JSSyntaxRegExp(t1, t2, t3, $.JSSyntaxRegExp_makeNative(t1, t2, t3, true));
};

$.JSSyntaxRegExp_makeNative = function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  if (typeof pattern !== "string")
    $.throwExpression($.ArgumentError$(pattern));
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.wrapException($.FormatException$("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp$_globalVersionOf(re), _str, null);
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result._contents = result._contents + to;
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
};

$._attachStackTrace = function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
};

$.getAttachedStackTrace = function(o) {
  var t1, values;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  values = $.Primitives_getProperty(o, "expando$values");
  return values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
};

$._asyncRunCallback = function() {
  var callbacks, i, callback, remainingCallbacks, newCallbacks, exception;
  for (; $.get$_asyncCallbacks().length !== 0;) {
    callbacks = $.get$_asyncCallbacks();
    $._asyncCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(callbacks)) === true; i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(callbacks, i);
      $.$indexSet$ax(callbacks, i, null);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        i = $.$add$ns(i, 1);
        remainingCallbacks = $.sublist$1$ax(callbacks, i);
        newCallbacks = $.get$_asyncCallbacks();
        $._asyncCallbacks = [];
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), remainingCallbacks);
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), newCallbacks);
        $.Timer_run($._asyncRunCallback$closure);
        throw exception;
      }

    }
  }
  $._callbacksAreEnqueued = false;
};

$._AsyncCompleter$ = function() {
  return new $._AsyncCompleter($._FutureImpl$(), false);
};

$._SyncCompleter$ = function() {
  return new $._SyncCompleter($._FutureImpl$(), false);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl$immediateError = function(error, stackTrace) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediateError$2(error, stackTrace);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, t3, future, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    future = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0))
    return $._FutureImpl$immediate($.List_empty);
  t1.values_1 = $.List_List(t1.remaining_2);
  t1.completer_0 = $._AsyncCompleter$();
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._throwDelayed = function(error, stackTrace) {
  $.get$_asyncCallbacks().push(new $._throwDelayed_closure(error, stackTrace));
  if (!$._callbacksAreEnqueued) {
    $.Timer_run($._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  $._throwDelayed(error, null);
};

$._nullDoneHandler = function() {
};

$._asyncError = function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
};

$._runUserCode = function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $._StackTrace$(exception.stack);
    onError.call$1($._asyncError(e, s));
  }

};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_closure(subscription, future);
};

$._ForwardingStreamSubscription$ = function(_stream, onData, onError, onDone, _cancelOnError) {
  var t1 = new $._ForwardingStreamSubscription(_stream, _cancelOnError, null, onData, onError, onDone);
  t1._BaseStreamSubscription$3(onData, onError, onDone);
  t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, _cancelOnError);
  return t1;
};

$._MapStream$ = function(source, transform) {
  return new $._MapStream(transform, source);
};

$._SkipStream$ = function(source, count) {
  var t1 = new $._SkipStream(count, source);
  t1._SkipStream$2(source, count);
  return t1;
};

$.Timer_run = function(callback) {
  var milliseconds;
  $.get$Timer__runCallbacks().push(callback);
  if ($.get$Timer__runCallbacks().length === 1) {
    milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
    if (milliseconds < 0)
      milliseconds = 0;
    $.TimerImpl$(milliseconds, new $.Timer_run_closure());
  }
};

$.HashMap$ = function() {
  return new $.HashMap(0, null, null, null, null);
};

$.HashSet$ = function() {
  return new $.HashSet(0, null, null, null, null);
};

$.LinkedHashMap$ = function() {
  return new $.LinkedHashMap(0, null, null, null, null, null, 0);
};

$.LinkedHashSet$ = function() {
  return new $.LinkedHashSet(0, null, null, null, null, null, 0);
};

$.Queue_Queue = function() {
  return $.ListQueue$(null);
};

$.ListQueue$ = function(initialCapacity) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  t1.ListQueue$1(initialCapacity);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  return $.JSNull_methods.$and(number, $.JSNull_methods.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var nextNumber;
  number = $.JSNull_methods.$shl(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue) {
  return new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    t1 = $.JSString_methods.replaceAll$2(object, "\\", "\\\\");
    t1 = $.stringReplaceAllUnchecked(t1, "\n", "\\n");
    t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
    return "\"" + $.stringReplaceAllUnchecked(t1, "\"", "\\\"") + "\"";
  }
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.Expando$ = function($name) {
  return new $.Expando($name);
};

$.List_List = function($length) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.List_List$from = function(other, growable) {
  var list, t1, $length, fixedList, i;
  list = $.List_List($);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    fixedList[i] = list[i];
  }
  return fixedList;
};

$.Map_Map = function() {
  return $.HashMap$();
};

$.Object$ = function() {
  return new $.Object();
};

$.Set_Set = function() {
  return $.HashSet$();
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.query = function(selector) {
  return document.querySelector(selector);
};

$._getNewIsolateId = function() {
  if (!window.$dart$isolate$counter)
    window.$dart$isolate$counter = 1;
  return window.$dart$isolate$counter++;
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._MultiElementCssClassSet$ = function(_elementIterable) {
  var t1 = new $._MultiElementCssClassSet(_elementIterable, null);
  t1._MultiElementCssClassSet$1(_elementIterable);
  return t1;
};

$._ElementCssClassSet$ = function(_element) {
  return new $._ElementCssClassSet(_element);
};

$._EventStream$ = function(_target, _eventType, _useCapture) {
  return new $._EventStream(_target, _eventType, _useCapture);
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$._JsSerializer$0 = function() {
  return new $._JsSerializer0(0, $._MessageTraverserVisitedMap$0());
};

$._JsDeserializer$0 = function() {
  return new $._JsDeserializer0(null);
};

$._JsSendPortSync$ = function(_id) {
  return new $._JsSendPortSync(_id);
};

$._RemoteSendPortSync$ = function(_isolateId, _portId) {
  return new $._RemoteSendPortSync(_isolateId, _portId);
};

$._RemoteSendPortSync__call = function(isolateId, portId, message) {
  var t1, target, source, t2, output, e;
  t1 = {};
  target = "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
  source = target + "-result";
  t1.result_0 = null;
  t2 = $.Window_methods.get$on(window);
  t2 = t2.$index(t2, source);
  t2.get$first(t2).then$1(new $._RemoteSendPortSync__call_closure(t1));
  output = $.StringBuffer$("");
  $._JsonStringifier$(output).stringifyValue$1([source, message]);
  t2 = output._contents;
  e = document.createEvent("CustomEvent");
  $.$$dom_initCustomEvent$4$x(e, target, false, false, t2);
  window.dispatchEvent(e);
  return t1.result_0;
};

$._LocalSendPortSync$_internal = function(_receivePort) {
  return new $._LocalSendPortSync(_receivePort);
};

$.ReceivePortSync$ = function() {
  var t1 = new $.ReceivePortSync(null, null, null);
  t1.ReceivePortSync$0();
  return t1;
};

$.ReceivePortSync__isolateId = function() {
  if ($.ReceivePortSync__cachedIsolateId == null)
    $.ReceivePortSync__cachedIsolateId = $._getNewIsolateId();
  return $.ReceivePortSync__cachedIsolateId;
};

$.ReceivePortSync__getListenerName = function(isolateId, portId) {
  return "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
};

$.ReceivePortSync__lookup = function(isolateId, portId) {
  var t1;
  if ($.ReceivePortSync__cachedIsolateId == null)
    $.ReceivePortSync__cachedIsolateId = $._getNewIsolateId();
  if ($.$eq(isolateId, $.ReceivePortSync__cachedIsolateId)) {
    t1 = $.ReceivePortSync__portMap;
    return t1.$index(t1, portId).toSendPort$0();
  } else
    return $._RemoteSendPortSync$(isolateId, portId);
};

$._MessageTraverserVisitedMap$0 = function() {
  return new $._MessageTraverserVisitedMap0();
};

$._WrappedIterator$ = function(_iterator) {
  return new $._WrappedIterator(_iterator);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
};

$.convertNativeToDart_Dictionary = function(object) {
  var dict, t1, key;
  if (object == null)
    return;
  dict = $.makeLiteralMap([]);
  for (t1 = $.JSArray_methods.get$iterator(Object.getOwnPropertyNames(object)); t1.moveNext$0();) {
    key = t1.get$current();
    dict.$indexSet(dict, key, object[key]);
  }
  return dict;
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  dict.forEach$1(dict, new $.convertDartToNative_Dictionary_closure(object));
  return object;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var copies, copy;
  copies = [];
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
  new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, $.get$nodes$x(node));
};

$._convertNativeToDart_IDBAny = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, false);
};

$._completeRequest = function(request) {
  var completer, t1;
  completer = $._SyncCompleter$();
  request.get$onSuccess;
  t1 = $.EventStreamProvider_success.forTarget$1(request);
  $._EventStreamSubscription$(t1._target, t1._eventType, new $._completeRequest_closure(request, completer), t1._useCapture);
  request.get$onError;
  t1 = $.EventStreamProvider_error.forTarget$1(request);
  $._EventStreamSubscription$(t1._target, t1._eventType, new $._completeRequest_closure0(completer), t1._useCapture);
  return completer.future;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.JsonCyclicError$ = function(object) {
  return new $.JsonCyclicError(object, null);
};

$.parse = function(json, reviver) {
  var parsed, e, t1, exception;
  t1 = json;
  if (typeof t1 !== "string")
    throw $.wrapException($.ArgumentError$(json));
  parsed = null;
  try {
    parsed = JSON.parse(json);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.wrapException($.FormatException$(String(e)));
  }

  return $._convertJsonToDart(parsed, reviver);
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, []);
};

$._JsonStringifier_escape = function(sb, s) {
  var t1, $length, charCodes, needsEscape, i, charCode, t2, t3, str;
  t1 = $.getInterceptor$asx(s);
  $length = t1.get$length(s);
  charCodes = $.List_List($);
  for (needsEscape = false, i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
    charCode = t1.codeUnitAt$1(s, i);
    t2 = $.getInterceptor$n(charCode);
    if (t2.$lt(charCode, 32) === true) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t3 = $.$and$n(t2.$shr(charCode, 12), 15);
          if ($.$lt$n(t3, 10) === true) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t3 = $.$and$n(t2.$shr(charCode, 8), 15);
          if ($.$lt$n(t3, 10) === true) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t3 = $.$and$n(t2.$shr(charCode, 4), 15);
          if ($.$lt$n(t3, 10) === true) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t2 = t2.$and(charCode, 15);
          if ($.$lt$n(t2, 10) === true) {
            if (typeof t2 !== "number")
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== "number")
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          break;
      }
      needsEscape = true;
    } else if (t2.$eq(charCode, 34) || t2.$eq(charCode, 92)) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
  }
  if (needsEscape) {
    t1 = $.Primitives_stringFromCharCodes(!(charCodes.constructor === Array) ? $.List_List$from(charCodes, true) : charCodes);
    str = t1;
  } else
    str = s;
  str = typeof str === "string" ? str : $.S(str);
  sb._contents = sb._contents + str;
};

$.Random_Random = function(seed) {
  return $.C__Random;
};

$._AttributeClassSet$ = function(_element) {
  return new $._AttributeClassSet(_element);
};

$._Lists_indexOf = function(a, element, startIndex, endIndex) {
  var t1, i;
  t1 = $.getInterceptor$asx(a);
  if ($.JSInt_methods.$ge(startIndex, t1.get$length(a)))
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i)
    t1.$index(a, i);
  return -1;
};

$._Lists_getRange = function(a, start, end, accumulator) {
  var t1, i;
  if (typeof start !== "number")
    return $._Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $._Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.wrapException($.RangeError$value(start));
  if (end < start)
    throw $.wrapException($.RangeError$value(end));
  t1 = $.getInterceptor$asx(a);
  if ($.JSNumber_methods.$gt(end, t1.get$length(a)))
    throw $.wrapException($.RangeError$value(end));
  for (i = start; i < end; ++i)
    accumulator.push(t1.$index(a, i));
  return accumulator;
};

$._Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, t2, i;
  if ($.$lt$n(start, 0) === true)
    throw $.wrapException($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) === true)
    throw $.wrapException($.RangeError$value(end));
  t2 = $.getInterceptor$asx(a);
  if (t1.$gt(end, t2.get$length(a)) === true)
    throw $.wrapException($.RangeError$value(end));
  for (i = start; t1 = $.getInterceptor$n(i), t1.$lt(i, end) === true; i = t1.$add(i, 1))
    accumulator.push(t2.$index(a, i));
  return accumulator;
};

$.GoogleChats$ = function(listData, options, div) {
  var t1 = new $.GoogleChats(listData, options, div);
  t1.GoogleChats$3(listData, options, div);
  return t1;
};

$.GoogleMaps$ = function() {
  var t1 = new $.GoogleMaps(false, null, null);
  t1.GoogleMaps$0();
  return t1;
};

$.main = function() {
  $.initMenu();
  $.get$onClick$x(document.querySelector("#kalmanTest")).listen$1(new $.main_closure());
  $.get$onClick$x(document.querySelector("#simpleTest")).listen$1(new $.main_closure0());
  $.get$onClick$x(document.querySelector("#moveTest")).listen$1(new $.main_closure1());
  $.WalkTest$();
};

$.initMenu = function() {
  var i, t1, t2;
  for (i = 0; i < $.get$selected().length; ++i) {
    t1 = $.get$selected();
    if (i >= t1.length)
      throw $.ioore(i);
    t1[i] = "hide";
    t1 = $.get$activeTab();
    if (i >= t1.length)
      throw $.ioore(i);
    t1[i] = "";
  }
  t1 = new $.initMenu_select();
  t2 = $.HtmlDocument_methods.queryAll$1(document, ".tab");
  t2.forEach$1(t2, new $.initMenu_closure(t1));
  t1.call$1(0);
};

$.Kalman$ = function(s) {
  return new $.Kalman(s);
};

$.KalmanModel$ = function() {
  return new $.KalmanModel(null, null, null, null, null, null, null, null, null, null, null);
};

$.Particles$ = function(s) {
  return new $.Particles($.Random_Random(null), s);
};

$.ParticlesModel$ = function(count, move, generate, mean, aNoise, mNoise, weight, clone) {
  var t1 = new $.ParticlesModel(count, null, null, move, generate, mean, aNoise, mNoise, weight, clone, null);
  t1.ParticlesModel$8(count, move, generate, mean, aNoise, mNoise, weight, clone);
  return t1;
};

$.randn = function(mean, std) {
  var u, s, v, t1;
  if (typeof std !== "number")
    return $.randn$bailout(1, mean, std);
  if (std === 0)
    return 0;
  for (u = 1, s = 2; s >= 1;) {
    $.get$mathRand();
    u = Math.random() * 2 - 1;
    $.get$mathRand();
    v = Math.random() * 2 - 1;
    s = u * u + v * v;
  }
  t1 = -2 * Math.log(s) / s;
  return mean + u * Math.sqrt(t1) * std;
};

$.randn$bailout = function(state0, mean, std) {
  var u, s, v, t1;
  if ($.$eq(std, 0))
    return 0;
  for (u = 1, s = 2; s >= 1;) {
    $.get$mathRand();
    u = Math.random() * 2 - 1;
    $.get$mathRand();
    v = Math.random() * 2 - 1;
    s = u * u + v * v;
  }
  t1 = -2 * Math.log(s) / s;
  t1 = Math.sqrt(t1);
  if (typeof std !== "number")
    throw $.iae(std);
  return mean + u * t1 * std;
};

$.Gaussian_normal = function(mean, std) {
  var u, s, v, t1;
  if (typeof std !== "number")
    return $.Gaussian_normal$bailout(1, mean, std);
  if (std === 0)
    return 0;
  for (u = 1, s = 2; s >= 1;) {
    $.get$Gaussian_r();
    u = Math.random() * 2 - 1;
    $.get$Gaussian_r();
    v = Math.random() * 2 - 1;
    s = u * u + v * v;
  }
  t1 = -2 * Math.log(s) / s;
  return mean + u * Math.sqrt(t1) * std;
};

$.Gaussian_normal$bailout = function(state0, mean, std) {
  var u, s, v, t1;
  if ($.$eq(std, 0))
    return 0;
  for (u = 1, s = 2; s >= 1;) {
    $.get$Gaussian_r();
    u = Math.random() * 2 - 1;
    $.get$Gaussian_r();
    v = Math.random() * 2 - 1;
    s = u * u + v * v;
  }
  t1 = -2 * Math.log(s) / s;
  t1 = Math.sqrt(t1);
  if (typeof std !== "number")
    throw $.iae(std);
  return mean + u * t1 * std;
};

$.Gaussian_gaussian = function(x, mean, std) {
  var t1, t2;
  t1 = $.$mul$n(std, Math.sqrt(6.283185307179586));
  if (typeof t1 !== "number")
    throw $.iae(t1);
  t2 = $.$sub$n(x, mean);
  if (typeof t2 !== "number")
    $.throwExpression($.ArgumentError$(t2));
  t2 = Math.pow(t2, 2);
  if (typeof std !== "number")
    $.throwExpression($.ArgumentError$(std));
  t2 /= -2 * Math.pow(std, 2);
  return 1 / t1 * Math.pow(2.718281828459045, t2);
};

$.Matrix$ = function(rows, columns) {
  var t1 = new $.Matrix(null, rows, columns);
  t1.Matrix$2(rows, columns);
  return t1;
};

$.Matrix$fromList = function(values) {
  var t1 = new $.Matrix(null, null, null);
  t1.Matrix$fromList$1(values);
  return t1;
};

$.KalmanTest$ = function(mNoise, pNoise, Ex, Ez) {
  var t1 = new $.KalmanTest(pNoise, mNoise, Ex, Ez);
  t1.KalmanTest$4(mNoise, pNoise, Ex, Ez);
  return t1;
};

$.MoveTest$ = function(mNoise, pNoise, pCount) {
  var t1 = new $.MoveTest(pNoise, mNoise, pCount);
  t1.MoveTest$3(mNoise, pNoise, pCount);
  return t1;
};

$.SimpleTest$ = function(mNoise, pNoise, pCount) {
  var t1 = new $.SimpleTest(pNoise, mNoise, pCount);
  t1.SimpleTest$3(mNoise, pNoise, pCount);
  return t1;
};

$.WalkTest$ = function() {
  var t1 = new $.WalkTest();
  t1.WalkTest$0();
  return t1;
};

$._initialize = function() {
  var t1, exception, script;
  if ($._jsPortSync != null)
    return;
  try {
    t1 = window;
    $._jsPortSync = $.Window_methods.lookupPort$1(t1, "dart-js-context");
  } catch (exception) {
    $.unwrapException(exception);
  }

  if ($._jsPortSync == null) {
    script = document.createElement("script");
    t1 = $.getInterceptor$x(script);
    t1.set$type(script, "text/javascript");
    t1.set$innerHtml(script, "(function() {\n  // Proxy support for js.dart.\n\n  var globalContext = window;\n\n  // Support for binding the receiver (this) in proxied functions.\n  function bindIfFunction(f, _this) {\n    if (typeof(f) != \"function\") {\n      return f;\n    } else {\n      return new BoundFunction(_this, f);\n    }\n  }\n\n  function unbind(obj) {\n    if (obj instanceof BoundFunction) {\n      return obj.object;\n    } else {\n      return obj;\n    }\n  }\n\n  function getBoundThis(obj) {\n    if (obj instanceof BoundFunction) {\n      return obj._this;\n    } else {\n      return globalContext;\n    }\n  }\n\n  function BoundFunction(_this, object) {\n    this._this = _this;\n    this.object = object;\n  }\n\n  // Table for local objects and functions that are proxied.\n  function ProxiedObjectTable() {\n    // Name for debugging.\n    this.name = 'js-ref';\n\n    // Table from IDs to JS objects.\n    this.map = {};\n\n    // Generator for new IDs.\n    this._nextId = 0;\n\n    // Counter for deleted proxies.\n    this._deletedCount = 0;\n\n    // Flag for one-time initialization.\n    this._initialized = false;\n\n    // Ports for managing communication to proxies.\n    this.port = new ReceivePortSync();\n    this.sendPort = this.port.toSendPort();\n\n    // Set of IDs that are global.\n    // These will not be freed on an exitScope().\n    this.globalIds = {};\n\n    // Stack of scoped handles.\n    this.handleStack = [];\n\n    // Stack of active scopes where each value is represented by the size of\n    // the handleStack at the beginning of the scope.  When an active scope\n    // is popped, the handleStack is restored to where it was when the\n    // scope was entered.\n    this.scopeIndices = [];\n  }\n\n  // Number of valid IDs.  This is the number of objects (global and local)\n  // kept alive by this table.\n  ProxiedObjectTable.prototype.count = function () {\n    return Object.keys(this.map).length;\n  }\n\n  // Number of total IDs ever allocated.\n  ProxiedObjectTable.prototype.total = function () {\n    return this.count() + this._deletedCount;\n  }\n\n  // Adds an object to the table and return an ID for serialization.\n  ProxiedObjectTable.prototype.add = function (obj) {\n    if (this.scopeIndices.length == 0) {\n      throw \"Cannot allocate a proxy outside of a scope.\";\n    }\n    // TODO(vsm): Cache refs for each obj?\n    var ref = this.name + '-' + this._nextId++;\n    this.handleStack.push(ref);\n    this.map[ref] = obj;\n    return ref;\n  }\n\n  ProxiedObjectTable.prototype._initializeOnce = function () {\n    if (!this._initialized) {\n      this._initialize();\n      this._initialized = true;\n    }\n  }\n\n  // Enters a new scope for this table.\n  ProxiedObjectTable.prototype.enterScope = function() {\n    this._initializeOnce();\n    this.scopeIndices.push(this.handleStack.length);\n  }\n\n  // Invalidates all non-global IDs in the current scope and\n  // exit the current scope.\n  ProxiedObjectTable.prototype.exitScope = function() {\n    var start = this.scopeIndices.pop();\n    for (var i = start; i < this.handleStack.length; ++i) {\n      var key = this.handleStack[i];\n      if (!this.globalIds.hasOwnProperty(key)) {\n        delete this.map[this.handleStack[i]];\n        this._deletedCount++;\n      }\n    }\n    this.handleStack = this.handleStack.splice(0, start);\n  }\n\n  // Makes this ID globally scope.  It must be explicitly invalidated.\n  ProxiedObjectTable.prototype.globalize = function(id) {\n    this.globalIds[id] = true;\n  }\n\n  // Invalidates this ID, potentially freeing its corresponding object.\n  ProxiedObjectTable.prototype.invalidate = function(id) {\n    var old = this.get(id);\n    delete this.globalIds[id];\n    delete this.map[id];\n    this._deletedCount++;\n    return old;\n  }\n\n  // Gets the object or function corresponding to this ID.\n  ProxiedObjectTable.prototype.get = function (id) {\n    if (!this.map.hasOwnProperty(id)) {\n      throw 'Proxy ' + id + ' has been invalidated.'\n    }\n    return this.map[id];\n  }\n\n  ProxiedObjectTable.prototype._initialize = function () {\n    // Configure this table's port to forward methods, getters, and setters\n    // from the remote proxy to the local object.\n    var table = this;\n\n    this.port.receive(function (message) {\n      // TODO(vsm): Support a mechanism to register a handler here.\n      try {\n        var object = table.get(message[0]);\n        var receiver = unbind(object);\n        var member = message[1];\n        var kind = message[2];\n        var args = message[3].map(deserialize);\n        if (kind == 'get') {\n          // Getter.\n          var field = member;\n          if (field in receiver && args.length == 0) {\n            var result = bindIfFunction(receiver[field], receiver);\n            return [ 'return', serialize(result) ];\n          }\n        } else if (kind == 'set') {\n          // Setter.\n          var field = member;\n          if (args.length == 1) {\n            return [ 'return', serialize(receiver[field] = args[0]) ];\n          }\n        } else if (kind == 'apply') {\n          // Direct function invocation.\n          var _this = getBoundThis(object);\n          return [ 'return', serialize(receiver.apply(_this, args)) ];\n        } else if (member == '[]' && args.length == 1) {\n          // Index getter.\n          var result = bindIfFunction(receiver[args[0]], receiver);\n          return [ 'return', serialize(result) ];\n        } else if (member == '[]=' && args.length == 2) {\n          // Index setter.\n          return [ 'return', serialize(receiver[args[0]] = args[1]) ];\n        } else {\n          // Member function invocation.\n          var f = receiver[member];\n          if (f) {\n            var result = f.apply(receiver, args);\n            return [ 'return', serialize(result) ];\n          }\n        }\n        return [ 'none' ];\n      } catch (e) {\n        return [ 'throws', e.toString() ];\n      }\n    });\n  }\n\n  // Singleton for local proxied objects.\n  var proxiedObjectTable = new ProxiedObjectTable();\n\n  // DOM element serialization code.\n  var _localNextElementId = 0;\n  var _DART_ID = 'data-dart_id';\n  var _DART_TEMPORARY_ATTACHED = 'data-dart_temporary_attached';\n\n  function serializeElement(e) {\n    // TODO(vsm): Use an isolate-specific id.\n    var id;\n    if (e.hasAttribute(_DART_ID)) {\n      id = e.getAttribute(_DART_ID);\n    } else {\n      id = (_localNextElementId++).toString();\n      e.setAttribute(_DART_ID, id);\n    }\n    if (e !== document.documentElement) {\n      // Element must be attached to DOM to be retrieve in js part.\n      // Attach top unattached parent to avoid detaching parent of \"e\" when\n      // appending \"e\" directly to document. We keep count of elements\n      // temporarily attached to prevent detaching top unattached parent to\n      // early. This count is equals to the length of _DART_TEMPORARY_ATTACHED\n      // attribute. There could be other elements to serialize having the same\n      // top unattached parent.\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue + \"a\";\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          break;\n        }\n        if (top.parentNode == null) {\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, \"a\");\n          document.documentElement.appendChild(top);\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return id;\n  }\n\n  function deserializeElement(id) {\n    // TODO(vsm): Clear the attribute.\n    var list = document.querySelectorAll('[' + _DART_ID + '=\"' + id + '\"]');\n\n    if (list.length > 1) throw 'Non unique ID: ' + id;\n    if (list.length == 0) {\n      throw 'Element must be attached to the document: ' + id;\n    }\n    var e = list[0];\n    if (e !== document.documentElement) {\n      // detach temporary attached element\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue.substring(1);\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          // detach top only if no more elements have to be unserialized\n          if (top.getAttribute(_DART_TEMPORARY_ATTACHED).length === 0) {\n            top.removeAttribute(_DART_TEMPORARY_ATTACHED);\n            document.documentElement.removeChild(top);\n          }\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return e;\n  }\n\n\n  // Type for remote proxies to Dart objects.\n  function DartProxy(id, sendPort) {\n    this.id = id;\n    this.port = sendPort;\n  }\n\n  // Serializes JS types to SendPortSync format:\n  // - primitives -> primitives\n  // - sendport -> sendport\n  // - DOM element -> [ 'domref', element-id ]\n  // - Function -> [ 'funcref', function-id, sendport ]\n  // - Object -> [ 'objref', object-id, sendport ]\n  function serialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Non-proxied objects are serialized.\n      return message;\n    } else if (message instanceof Element &&\n        (message.ownerDocument == null || message.ownerDocument == document)) {\n      return [ 'domref', serializeElement(message) ];\n    } else if (message instanceof BoundFunction &&\n               typeof(message.object) == 'function') {\n      // Local function proxy.\n      return [ 'funcref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    } else if (typeof(message) == 'function') {\n      if ('_dart_id' in message) {\n        // Remote function proxy.\n        var remoteId = message._dart_id;\n        var remoteSendPort = message._dart_port;\n        return [ 'funcref', remoteId, remoteSendPort ];\n      } else {\n        // Local function proxy.\n        return [ 'funcref',\n                 proxiedObjectTable.add(message),\n                 proxiedObjectTable.sendPort ];\n      }\n    } else if (message instanceof DartProxy) {\n      // Remote object proxy.\n      return [ 'objref', message.id, message.port ];\n    } else {\n      // Local object proxy.\n      return [ 'objref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    }\n  }\n\n  function deserialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Serialized type.\n      return message;\n    }\n    var tag = message[0];\n    switch (tag) {\n      case 'funcref': return deserializeFunction(message);\n      case 'objref': return deserializeObject(message);\n      case 'domref': return deserializeElement(message[1]);\n    }\n    throw 'Unsupported serialized data: ' + message;\n  }\n\n  // Create a local function that forwards to the remote function.\n  function deserializeFunction(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local function.\n      return unbind(proxiedObjectTable.get(id));\n    } else {\n      // Remote function.  Forward to its port.\n      var f = function () {\n        var depth = enterScope();\n        try {\n          var args = Array.prototype.slice.apply(arguments);\n          args.splice(0, 0, this);\n          args = args.map(serialize);\n          var result = port.callSync([id, '#call', args]);\n          if (result[0] == 'throws') throw deserialize(result[1]);\n          return deserialize(result[1]);\n        } finally {\n          exitScope(depth);\n        }\n      };\n      // Cache the remote id and port.\n      f._dart_id = id;\n      f._dart_port = port;\n      return f;\n    }\n  }\n\n  // Creates a DartProxy to forwards to the remote object.\n  function deserializeObject(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local object.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote object.\n      return new DartProxy(id, port);\n    }\n  }\n\n  // Remote handler to construct a new JavaScript object given its\n  // serialized constructor and arguments.\n  function construct(args) {\n    args = args.map(deserialize);\n    var constructor = unbind(args[0]);\n    args = Array.prototype.slice.call(args, 1);\n\n    // Until 10 args, the 'new' operator is used. With more arguments we use a\n    // generic way that may not work, particulary when the constructor does not\n    // have an \"apply\" method.\n    var ret = null;\n    if (args.length === 0) {\n      ret = new constructor();\n    } else if (args.length === 1) {\n      ret = new constructor(args[0]);\n    } else if (args.length === 2) {\n      ret = new constructor(args[0], args[1]);\n    } else if (args.length === 3) {\n      ret = new constructor(args[0], args[1], args[2]);\n    } else if (args.length === 4) {\n      ret = new constructor(args[0], args[1], args[2], args[3]);\n    } else if (args.length === 5) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4]);\n    } else if (args.length === 6) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5]);\n    } else if (args.length === 7) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 8) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 9) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 10) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6], args[7], args[8], args[9]);\n    } else {\n      // Dummy Type with correct constructor.\n      var Type = function(){};\n      Type.prototype = constructor.prototype;\n  \n      // Create a new instance\n      var instance = new Type();\n  \n      // Call the original constructor.\n      ret = constructor.apply(instance, args);\n      ret = Object(ret) === ret ? ret : instance;\n    }\n    return serialize(ret);\n  }\n\n  // Remote handler to return the top-level JavaScript context.\n  function context(data) {\n    return serialize(globalContext);\n  }\n\n  // Remote handler to track number of live / allocated proxies.\n  function proxyCount() {\n    var live = proxiedObjectTable.count();\n    var total = proxiedObjectTable.total();\n    return [live, total];\n  }\n\n  // Return true if two JavaScript proxies are equal (==).\n  function proxyEquals(args) {\n    return deserialize(args[0]) == deserialize(args[1]);\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyInstanceof(args) {\n    var obj = unbind(deserialize(args[0]));\n    var type = unbind(deserialize(args[1]));\n    return obj instanceof type;\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyDeleteProperty(args) {\n    var obj = unbind(deserialize(args[0]));\n    var member = unbind(deserialize(args[1]));\n    delete obj[member];\n  }\n\n  function proxyConvert(args) {\n    return serialize(deserializeDataTree(args));\n  }\n\n  function deserializeDataTree(data) {\n    var type = data[0];\n    var value = data[1];\n    if (type === 'map') {\n      var obj = {};\n      for (var i = 0; i < value.length; i++) {\n        obj[value[i][0]] = deserializeDataTree(value[i][1]);\n      }\n      return obj;\n    } else if (type === 'list') {\n      var list = [];\n      for (var i = 0; i < value.length; i++) {\n        list.push(deserializeDataTree(value[i]));\n      }\n      return list;\n    } else /* 'simple' */ {\n      return deserialize(value);\n    }\n  }\n\n  function makeGlobalPort(name, f) {\n    var port = new ReceivePortSync();\n    port.receive(f);\n    window.registerPort(name, port.toSendPort());\n  }\n\n  // Enters a new scope in the JavaScript context.\n  function enterJavaScriptScope() {\n    proxiedObjectTable.enterScope();\n  }\n\n  // Enters a new scope in both the JavaScript and Dart context.\n  var _dartEnterScopePort = null;\n  function enterScope() {\n    enterJavaScriptScope();\n    if (!_dartEnterScopePort) {\n      _dartEnterScopePort = window.lookupPort('js-dart-enter-scope');\n    }\n    return _dartEnterScopePort.callSync([]);\n  }\n\n  // Exits the current scope (and invalidate local IDs) in the JavaScript\n  // context.\n  function exitJavaScriptScope() {\n    proxiedObjectTable.exitScope();\n  }\n\n  // Exits the current scope in both the JavaScript and Dart context.\n  var _dartExitScopePort = null;\n  function exitScope(depth) {\n    exitJavaScriptScope();\n    if (!_dartExitScopePort) {\n      _dartExitScopePort = window.lookupPort('js-dart-exit-scope');\n    }\n    return _dartExitScopePort.callSync([ depth ]);\n  }\n\n  makeGlobalPort('dart-js-context', context);\n  makeGlobalPort('dart-js-create', construct);\n  makeGlobalPort('dart-js-proxy-count', proxyCount);\n  makeGlobalPort('dart-js-equals', proxyEquals);\n  makeGlobalPort('dart-js-instanceof', proxyInstanceof);\n  makeGlobalPort('dart-js-delete-property', proxyDeleteProperty);\n  makeGlobalPort('dart-js-convert', proxyConvert);\n  makeGlobalPort('dart-js-enter-scope', enterJavaScriptScope);\n  makeGlobalPort('dart-js-exit-scope', exitJavaScriptScope);\n  makeGlobalPort('dart-js-globalize', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.globalize(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n  makeGlobalPort('dart-js-invalidate', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.invalidate(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n})();\n");
    t1 = $.get$nodes$x(document.body);
    t1.add$1(t1, script);
    $._jsPortSync = $.Window_methods.lookupPort$1(window, "dart-js-context");
  }
  $._jsPortCreate = $.Window_methods.lookupPort$1(window, "dart-js-create");
  $._jsPortProxyCount = $.Window_methods.lookupPort$1(window, "dart-js-proxy-count");
  $._jsPortEquals = $.Window_methods.lookupPort$1(window, "dart-js-equals");
  $._jsPortInstanceof = $.Window_methods.lookupPort$1(window, "dart-js-instanceof");
  $._jsPortDeleteProperty = $.Window_methods.lookupPort$1(window, "dart-js-delete-property");
  $._jsPortConvert = $.Window_methods.lookupPort$1(window, "dart-js-convert");
  $._jsEnterJavaScriptScope = $.Window_methods.lookupPort$1(window, "dart-js-enter-scope");
  $._jsExitJavaScriptScope = $.Window_methods.lookupPort$1(window, "dart-js-exit-scope");
  $._jsGlobalize = $.Window_methods.lookupPort$1(window, "dart-js-globalize");
  $._jsInvalidate = $.Window_methods.lookupPort$1(window, "dart-js-invalidate");
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_closure());
  $._dartEnterDartScope = t1;
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_closure0());
  $._dartExitDartScope = t1;
  $.Window_methods.registerPort$2(window, "js-dart-enter-scope", $._dartEnterDartScope.toSendPort$0());
  $.Window_methods.registerPort$2(window, "js-dart-exit-scope", $._dartExitDartScope.toSendPort$0());
};

$.context = function() {
  $._enterScopeIfNeeded();
  return $._deserialize($._jsPortSync.callSync$1([]));
};

$._enterScopeIfNeeded = function() {
  var t1, depth;
  if ($.get$_proxiedObjectTable()._scopeIndices.length === 0) {
    $._initialize();
    t1 = $.get$_proxiedObjectTable();
    t1._scopeIndices.push(t1._handleStack.length);
    $._jsEnterJavaScriptScope.callSync$1([]);
    depth = $.get$_proxiedObjectTable()._scopeIndices.length;
    $.get$_asyncCallbacks().push(new $._enterScopeIfNeeded_closure(depth));
    if (!$._callbacksAreEnqueued) {
      $.Timer_run($._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  }
};

$.map = function(data) {
  $._enterScopeIfNeeded();
  return $._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(data)));
};

$.Callback$once = function(f, withThis) {
  var t1 = new $.Callback(null, null, null);
  t1.Callback$once$2$withThis(f, withThis);
  return t1;
};

$._pruneUndefined = function(arg1, arg2, arg3, arg4, arg5, arg6) {
  var args, index;
  args = [arg1, arg2, arg3, arg4, arg5, arg6];
  index = $.Arrays_indexOf(args, $.C__Undefined, 0, args.length);
  if (index < 0)
    return args;
  return $.JSArray_methods.sublist$2(args, 0, index);
};

$.Proxy_Proxy$withArgList = function($constructor, $arguments) {
  var t1, serialized;
  $._enterScopeIfNeeded();
  t1 = [$constructor];
  $.JSArray_methods.addAll$1(t1, $arguments);
  t1 = $.JSArray_methods.map$1(t1, $._serialize$closure);
  serialized = t1.toList$0(t1);
  return $._deserialize($._jsPortCreate.callSync$1(serialized));
};

$.Proxy__serializeDataTree = function(data) {
  var entries, t1, t2, key;
  if (typeof data === "object" && data !== null && !!$.getInterceptor(data).$isMap) {
    entries = $.List_List($);
    for (t1 = $.getInterceptor$x(data), t2 = $.get$iterator$ax(t1.get$keys(data)); t2.moveNext$0() === true;) {
      key = t2.get$current();
      entries.push([key, $.Proxy__serializeDataTree(t1.$index(data, key))]);
    }
    return ["map", entries];
  } else if (typeof data === "object" && data !== null && (data.constructor === Array || !!$.getInterceptor(data).$isIterable)) {
    t1 = $.map$1$ax(data, $.Proxy__serializeDataTree$closure);
    return ["list", t1.toList$0(t1)];
  } else
    return ["simple", $._serialize(data)];
};

$.Proxy$_internal = function(_port, _id) {
  return new $.Proxy(_port, _id);
};

$.Proxy__forward = function(receiver, member, kind, args) {
  var t1, result;
  $._enterScopeIfNeeded();
  t1 = $.map$1$ax(args, $._serialize$closure);
  result = receiver._liblib2$_port.callSync$1([receiver._liblib2$_id, member, kind, t1.toList$0(t1)]);
  t1 = $.getInterceptor$asx(result);
  switch (t1.$index(result, 0)) {
    case "return":
      return $._deserialize(t1.$index(result, 1));
    case "throws":
      throw $.wrapException($._deserialize(t1.$index(result, 1)));
    case "none":
      throw $.wrapException($.NoSuchMethodError$(receiver, member, args, $.makeLiteralMap([]), null));
    default:
      throw $.wrapException("Invalid return value");
  }
};

$.FunctionProxy$_internal = function(port, id) {
  return new $.FunctionProxy(port, id);
};

$._ProxiedObjectTable$ = function() {
  var t1, t2, t3, t4;
  t1 = $.makeLiteralMap([]);
  t2 = $.ReceivePortSync$();
  t3 = $.List_List($);
  t4 = $.List_List($);
  t4 = new $._ProxiedObjectTable("dart-ref", 0, 0, t1, t2, $.Set_Set(), t3, t4);
  t4._ProxiedObjectTable$0();
  return t4;
};

$._serialize = function(message) {
  var t1, t2, t3, id;
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isSendPortSync)
    return message;
  else {
    if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isElement) {
      t1 = message.ownerDocument;
      t1 = t1 == null || t1 === document;
    } else
      t1 = false;
    if (t1)
      return ["domref", $._serializeElement(message)];
    else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isFunctionProxy)
      return ["funcref", message._liblib2$_id, message._liblib2$_port];
    else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isProxy)
      return ["objref", message._liblib2$_id, message._liblib2$_port];
    else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isSerializable)
      return $._serialize(message.toJs$0());
    else {
      t1 = $.get$_proxiedObjectTable();
      $._enterScopeIfNeeded();
      t2 = t1._name + "-";
      t3 = t1._nextId;
      t1._nextId = t3 + 1;
      id = t2 + $.S(t3);
      t3 = t1._registry;
      t3.$indexSet(t3, id, message);
      t1._handleStack.push(id);
      return ["objref", id, $.get$_proxiedObjectTable()._liblib2$_port.toSendPort$0()];
    }
  }
};

$._deserialize = function(message) {
  var t1 = $.getInterceptor(message);
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isSendPortSync)
    return message;
  switch (t1.$index(message, 0)) {
    case "funcref":
      return new $._deserialize_deserializeFunction().call$1(message);
    case "objref":
      return new $._deserialize_deserializeObject().call$1(message);
    case "domref":
      return $._deserializeElement(t1.$index(message, 1));
  }
  throw $.wrapException("Unsupported serialized data: " + $.S(message));
};

$._serializeElement = function(e) {
  var id, t1, $top, newValue, top0;
  if ($._ElementAttributeMap$(e)._element.hasAttribute("data-dart_id") === true)
    id = $._ElementAttributeMap$(e)._element.getAttribute("data-dart_id");
  else {
    t1 = $._localNextElementId;
    $._localNextElementId = $.$add$ns(t1, 1);
    id = "dart-" + $.S(t1);
    $._ElementAttributeMap$(e)._element.setAttribute("data-dart_id", id);
  }
  if (e !== document.documentElement)
    for ($top = e; true; $top = top0) {
      $top.get$attributes;
      if ($._ElementAttributeMap$($top)._element.hasAttribute("data-dart_temporary_attached") === true) {
        $top.get$attributes;
        newValue = $.$add$ns($._ElementAttributeMap$($top)._element.getAttribute("data-dart_temporary_attached"), "a");
        $top.get$attributes;
        $._ElementAttributeMap$($top)._element.setAttribute("data-dart_temporary_attached", newValue);
        break;
      }
      top0 = $top.parentElement;
      if (top0 == null) {
        $top.get$attributes;
        $._ElementAttributeMap$($top)._element.setAttribute("data-dart_temporary_attached", "a");
        t1 = $.get$children$x(document.documentElement);
        t1.add$1(t1, $top);
        break;
      }
      t1 = document.documentElement;
      if (top0 == null ? t1 == null : top0 === t1)
        break;
    }
  return id;
};

$._deserializeElement = function(id) {
  var t1, list, e, $top, t2, newValue;
  t1 = "[data-dart_id=\"" + $.S(id) + "\"]";
  list = $.HtmlDocument_methods.queryAll$1(document, t1);
  if (list.get$length(list) > 1)
    throw $.wrapException("Non unique ID: " + $.S(id));
  if (list.get$length(list) === 0)
    throw $.wrapException("Only elements attached to document can be serialized: " + $.S(id));
  e = list.$index(list, 0);
  if (e !== document.documentElement)
    for ($top = e; true;) {
      t1 = $.getInterceptor$x($top);
      t2 = t1.get$attributes($top);
      if (t2.containsKey$1(t2, "data-dart_temporary_attached") === true) {
        t2 = t1.get$attributes($top);
        newValue = $.substring$1$s(t2.$index(t2, "data-dart_temporary_attached"), 1);
        t2 = t1.get$attributes($top);
        t2.$indexSet(t2, "data-dart_temporary_attached", newValue);
        t2 = t1.get$attributes($top);
        if (t2.$index(t2, "data-dart_temporary_attached").length === 0) {
          t2 = t1.get$attributes($top);
          t2.remove$1(t2, "data-dart_temporary_attached");
          t1.remove$0($top);
        }
        break;
      }
      $top = $top.parentElement;
      t1 = document.documentElement;
      if ($top == null ? t1 == null : $top === t1)
        break;
    }
  return e;
};

$.dispatch = function() {
  var total, t1, dirty;
  if ($._watchers == null)
    return;
  total = 0;
  do {
    for (t1 = $.JSNull_methods.get$iterator($._watchers), dirty = false; t1.moveNext$0() === true;)
      if (t1.get$current().compareAndNotify$0() === true)
        dirty = true;
    if (dirty) {
      ++total;
      t1 = total < 10;
    } else
      t1 = false;
  } while (t1);
  if (total === 10)
    $.Primitives_printString("Possible loop in watchers propagation, stopped dispatch.");
};

$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.Primitives__throwFormatException$closure = new $.Closure$_throwFormatException($.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$._nullDataHandler$closure = new $.Closure$_nullDataHandler($._nullDataHandler, "_nullDataHandler$closure");
$._nullErrorHandler$closure = new $.Closure$_nullErrorHandler($._nullErrorHandler, "_nullErrorHandler$closure");
$._nullDoneHandler$closure = new $.Closure$_nullDoneHandler($._nullDoneHandler, "_nullDoneHandler$closure");
$.main$closure = new $.Closure$main($.main, "main$closure");
$.Proxy__serializeDataTree$closure = new $.Closure$_serializeDataTree($.Proxy__serializeDataTree, "Proxy__serializeDataTree$closure");
$._serialize$closure = new $.Closure$_serialize($._serialize, "_serialize$closure");
$._deserialize$closure = new $.Closure$_deserialize($._deserialize, "_deserialize$closure");
$.C_NullThrownError = new $.NullThrownError();
$.EventStreamProvider_success = new $.EventStreamProvider("success");
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.Window_methods = $.Window.prototype;
$.EventStreamProvider_click = new $.EventStreamProvider("click");
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.JSNull_methods = $.JSNull.prototype;
$.C_CloseToken = new $.CloseToken();
$.NodeList_methods = $.NodeList.prototype;
$.JSInt_methods = $.JSInt.prototype;
$.JSArray_methods = $.JSArray.prototype;
$.C__Random = new $._Random();
$.HtmlDocument_methods = $.HtmlDocument.prototype;
$.Float32List_methods = $.Float32List.prototype;
$.Duration_0 = new $.Duration(0);
$.EventStreamProvider_loadend = new $.EventStreamProvider("loadend");
$.EventStreamProvider_error = new $.EventStreamProvider("error");
$.C__Undefined = new $._Undefined();
$.Expando__keyCount = 0;
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$._callbacksAreEnqueued = false;
$.ReceivePortSync__portMap = null;
$.ReceivePortSync__portIdCount = null;
$.ReceivePortSync__cachedIsolateId = null;
$.active = 0;
$._jsPortSync = null;
$._jsPortCreate = null;
$._jsPortProxyCount = null;
$._jsPortEquals = null;
$._jsPortInstanceof = null;
$._jsPortDeleteProperty = null;
$._jsPortConvert = null;
$._jsEnterJavaScriptScope = null;
$._jsExitJavaScriptScope = null;
$._jsGlobalize = null;
$._jsInvalidate = null;
$._dartEnterDartScope = null;
$._dartExitDartScope = null;
$._localNextElementId = 0;
$._watchers = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_initCustomEvent$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).$$dom_initCustomEvent$4(receiver, a0, a1, a2, a3);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$shr$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shr(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return $.getInterceptor$n(receiver).$xor(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.cancel$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).cancel$0(receiver);
};
$.clone$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).clone$0(receiver);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$$$dom_className$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_className(receiver);
};
$.get$attributes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$attributes(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$detail$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$detail(receiver);
};
$.get$files$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$files(receiver);
};
$.get$first$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$first(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$onClick$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClick(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.get$values$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$values(receiver);
};
$.indexOf$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
};
$.join$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).join$1(receiver, a0);
};
$.load$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).load$3(receiver, a0, a1, a2);
};
$.map$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).map$1(receiver, a0);
};
$.modify$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).modify$1(receiver, a0);
};
$.preventDefault$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).preventDefault$0(receiver);
};
$.register$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).register$2(receiver, a0, a1);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.send$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).send$1(receiver, a0);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$$$dom_className$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$$$dom_className(receiver, value);
};
$.set$length$asx = function(receiver, value) {
  return $.getInterceptor$asx(receiver).set$length(receiver, value);
};
$.skip$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.substring$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).substring$1(receiver, a0);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toLowerCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.trim$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).trim$0(receiver);
};
$.write$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).write$1(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return $.Expando$(null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return $.Expando$("asynchronous error");
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "selected", "selected", "get$selected", function() {
  return $.List_List(10);
});
Isolate.$lazy($, "activeTab", "activeTab", "get$activeTab", function() {
  return $.List_List(10);
});
Isolate.$lazy($, "mathRand", "mathRand", "get$mathRand", function() {
  return $.Random_Random(123);
});
Isolate.$lazy($, "r", "Gaussian_r", "get$Gaussian_r", function() {
  return $.Random_Random(123);
});
Isolate.$lazy($, "_proxiedObjectTable", "_proxiedObjectTable", "get$_proxiedObjectTable", function() {
  return $._ProxiedObjectTable$();
});
// Native classes
$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethodsNonleaf("AbstractWorker", $.AbstractWorker);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("ApplicationCache|DOMApplicationCache|OfflineResourceList", $.ApplicationCache);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("Attr", $.Attr);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("BarInfo", $.BarInfo);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethodsNonleaf("Blob", $.Blob);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("Canvas2DContextAttributes", $.Canvas2DContextAttributes);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("Composition", $.Composition);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("Coordinates", $.Coordinates);

$.defineNativeMethods("Crypto", $.Crypto);

$.defineNativeMethods("CSS", $.Css);

$.defineNativeMethods("CSSCharsetRule", $.CssCharsetRule);

$.defineNativeMethods("WebKitCSSFilterRule", $.CssFilterRule);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CSSFontFaceRule", $.CssFontFaceRule);

$.defineNativeMethods("CSSHostRule", $.CssHostRule);

$.defineNativeMethods("CSSImportRule", $.CssImportRule);

$.defineNativeMethods("WebKitCSSKeyframeRule", $.CssKeyframeRule);

$.defineNativeMethods("WebKitCSSKeyframesRule", $.CssKeyframesRule);

$.defineNativeMethods("CSSMediaRule", $.CssMediaRule);

$.defineNativeMethods("CSSPageRule", $.CssPageRule);

$.defineNativeMethods("WebKitCSSRegionRule", $.CssRegionRule);

$.defineNativeMethodsNonleaf("CSSRule", $.CssRule);

$.defineNativeMethods("CSSStyleDeclaration", $.CssStyleDeclaration);

$.defineNativeMethods("CSSStyleRule", $.CssStyleRule);

$.defineNativeMethods("CSSStyleSheet", $.CssStyleSheet);

$.defineNativeMethods("CSSSupportsRule", $.CssSupportsRule);

$.defineNativeMethods("CSSUnknownRule", $.CssUnknownRule);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("Clipboard", $.DataTransfer);

$.defineNativeMethods("DataTransferItem", $.DataTransferItem);

$.defineNativeMethods("DataTransferItemList", $.DataTransferItemList);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceAcceleration", $.DeviceAcceleration);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("DeviceRotationRate", $.DeviceRotationRate);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("DirectoryEntry", $.DirectoryEntry);

$.defineNativeMethods("DirectoryReader", $.DirectoryReader);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethods("DOMImplementation", $.DomImplementation);

$.defineNativeMethods("DOMParser", $.DomParser);

$.defineNativeMethods("DOMSettableTokenList", $.DomSettableTokenList);

$.defineNativeMethods("DOMStringList", $.DomStringList);

$.defineNativeMethodsNonleaf("DOMTokenList", $.DomTokenList);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethodsNonleaf("Entry", $.Entry);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethods("EventSource", $.EventSource);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("File", $.File);

$.defineNativeMethods("FileEntry", $.FileEntry);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FileList", $.FileList);

$.defineNativeMethods("FileReader", $.FileReader);

$.defineNativeMethods("DOMFileSystem", $.FileSystem);

$.defineNativeMethods("FileWriter", $.FileWriter);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("FontLoader", $.FontLoader);

$.defineNativeMethods("FormData", $.FormData);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("Gamepad", $.Gamepad);

$.defineNativeMethods("Geolocation", $.Geolocation);

$.defineNativeMethods("Geoposition", $.Geoposition);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethods("History", $.History);

$.defineNativeMethods("HTMLAllCollection", $.HtmlAllCollection);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequest", $.HttpRequest);

$.defineNativeMethods("XMLHttpRequestException", $.HttpRequestException);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("XMLHttpRequestUpload", $.HttpRequestUpload);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("ImageData", $.ImageData);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("InputMethodContext", $.InputMethodContext);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("Location", $.Location);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethods("MediaController", $.MediaController);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaList", $.MediaList);

$.defineNativeMethods("MediaQueryList", $.MediaQueryList);

$.defineNativeMethods("MediaSource", $.MediaSource);

$.defineNativeMethods("MediaStream", $.MediaStream);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrack", $.MediaStreamTrack);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("MemoryInfo", $.MemoryInfo);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageChannel", $.MessageChannel);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("MessagePort", $.MessagePort);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("Metadata", $.Metadata);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("MIDIConnectionEvent", $.MidiConnectionEvent);

$.defineNativeMethods("MIDIMessageEvent", $.MidiMessageEvent);

$.defineNativeMethods("MIDIPort", $.MidiPort);

$.defineNativeMethods("MimeType", $.MimeType);

$.defineNativeMethods("MimeTypeArray", $.MimeTypeArray);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("MutationObserver|WebKitMutationObserver", $.MutationObserver);

$.defineNativeMethods("MutationRecord", $.MutationRecord);

$.defineNativeMethods("WebKitNamedFlow", $.NamedFlow);

$.defineNativeMethods("WebKitNamedFlowCollection", $.NamedFlowCollection);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeFilter", $.NodeFilter);

$.defineNativeMethods("NodeIterator", $.NodeIterator);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("Notification", $.Notification);

$.defineNativeMethods("NotificationCenter", $.NotificationCenter);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("Path", $.Path);

$.defineNativeMethods("Performance", $.Performance);

$.defineNativeMethodsNonleaf("PerformanceEntry", $.PerformanceEntry);

$.defineNativeMethods("PerformanceMark", $.PerformanceMark);

$.defineNativeMethods("PerformanceMeasure", $.PerformanceMeasure);

$.defineNativeMethods("PerformanceNavigation", $.PerformanceNavigation);

$.defineNativeMethods("PerformanceResourceTiming", $.PerformanceResourceTiming);

$.defineNativeMethods("PerformanceTiming", $.PerformanceTiming);

$.defineNativeMethods("Plugin", $.Plugin);

$.defineNativeMethods("PluginArray", $.PluginArray);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("Range", $.Range);

$.defineNativeMethods("RangeException", $.RangeException);

$.defineNativeMethods("RTCDataChannel", $.RtcDataChannel);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFSender", $.RtcDtmfSender);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidate", $.RtcIceCandidate);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("RTCPeerConnection", $.RtcPeerConnection);

$.defineNativeMethods("RTCSessionDescription", $.RtcSessionDescription);

$.defineNativeMethods("RTCStatsReport", $.RtcStatsReport);

$.defineNativeMethods("RTCStatsResponse", $.RtcStatsResponse);

$.defineNativeMethods("Screen", $.Screen);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("ScriptProfile", $.ScriptProfile);

$.defineNativeMethods("ScriptProfileNode", $.ScriptProfileNode);

$.defineNativeMethods("SecurityPolicy", $.SecurityPolicy);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("Selection", $.Selection);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("SourceBuffer", $.SourceBuffer);

$.defineNativeMethods("SourceBufferList", $.SourceBufferList);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechGrammar", $.SpeechGrammar);

$.defineNativeMethods("SpeechGrammarList", $.SpeechGrammarList);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechInputResult", $.SpeechInputResult);

$.defineNativeMethods("SpeechRecognition", $.SpeechRecognition);

$.defineNativeMethods("SpeechRecognitionAlternative", $.SpeechRecognitionAlternative);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("SpeechRecognitionResult", $.SpeechRecognitionResult);

$.defineNativeMethods("SpeechSynthesis", $.SpeechSynthesis);

$.defineNativeMethods("SpeechSynthesisEvent", $.SpeechSynthesisEvent);

$.defineNativeMethods("SpeechSynthesisUtterance", $.SpeechSynthesisUtterance);

$.defineNativeMethods("SpeechSynthesisVoice", $.SpeechSynthesisVoice);

$.defineNativeMethods("Storage", $.Storage);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("StorageInfo", $.StorageInfo);

$.defineNativeMethods("StorageQuota", $.StorageQuota);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("StyleMedia", $.StyleMedia);

$.defineNativeMethodsNonleaf("StyleSheet", $.StyleSheet);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("TextMetrics", $.TextMetrics);

$.defineNativeMethods("TextTrack", $.TextTrack);

$.defineNativeMethods("TextTrackCue", $.TextTrackCue);

$.defineNativeMethods("TextTrackCueList", $.TextTrackCueList);

$.defineNativeMethods("TextTrackList", $.TextTrackList);

$.defineNativeMethods("TimeRanges", $.TimeRanges);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("Touch", $.Touch);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("TouchList", $.TouchList);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent|WebKitTransitionEvent", $.TransitionEvent);

$.defineNativeMethods("TreeWalker", $.TreeWalker);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("URL", $.Url);

$.defineNativeMethods("ValidityState", $.ValidityState);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("WebSocket", $.WebSocket);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("Worker", $.Worker);

$.defineNativeMethods("XPathEvaluator", $.XPathEvaluator);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("XPathExpression", $.XPathExpression);

$.defineNativeMethods("XPathNSResolver", $.XPathNSResolver);

$.defineNativeMethods("XPathResult", $.XPathResult);

$.defineNativeMethods("XMLSerializer", $.XmlSerializer);

$.defineNativeMethods("XSLTProcessor", $.XsltProcessor);

$.defineNativeMethodsNonleaf("CSSValue", $._CSSValue);

$.defineNativeMethods("ClientRect", $._ClientRect);

$.defineNativeMethods("ClientRectList", $._ClientRectList);

$.defineNativeMethods("CSSRuleList", $._CssRuleList);

$.defineNativeMethods("CSSValueList", $._CssValueList);

$.defineNativeMethods("WebKitPoint", $._DomPoint);

$.defineNativeMethods("EntryArray", $._EntryArray);

$.defineNativeMethods("EntryArraySync", $._EntryArraySync);

$.defineNativeMethods("EntrySync", $._EntrySync);

$.defineNativeMethods("GamepadList", $._GamepadList);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("SpeechInputResultList", $._SpeechInputResultList);

$.defineNativeMethods("SpeechRecognitionResultList", $._SpeechRecognitionResultList);

$.defineNativeMethods("StyleSheetList", $._StyleSheetList);

$.defineNativeMethodsNonleaf("IDBCursor", $.Cursor);

$.defineNativeMethods("IDBCursorWithValue", $.CursorWithValue);

$.defineNativeMethods("IDBDatabase", $.Database);

$.defineNativeMethods("IDBFactory", $.IdbFactory);

$.defineNativeMethods("IDBIndex", $.Index);

$.defineNativeMethods("IDBKeyRange", $.KeyRange);

$.defineNativeMethods("IDBObjectStore", $.ObjectStore);

$.defineNativeMethods("IDBOpenDBRequest", $.OpenDBRequest);

$.defineNativeMethodsNonleaf("IDBRequest", $.Request);

$.defineNativeMethods("IDBTransaction", $.Transaction);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAngle", $.Angle);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedAngle", $.AnimatedAngle);

$.defineNativeMethods("SVGAnimatedBoolean", $.AnimatedBoolean);

$.defineNativeMethods("SVGAnimatedEnumeration", $.AnimatedEnumeration);

$.defineNativeMethods("SVGAnimatedInteger", $.AnimatedInteger);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedPreserveAspectRatio", $.AnimatedPreserveAspectRatio);

$.defineNativeMethods("SVGAnimatedRect", $.AnimatedRect);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethods("SVGAnimatedTransformList", $.AnimatedTransformList);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGElementInstance", $.ElementInstance);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLength", $.Length);

$.defineNativeMethods("SVGLengthList", $.LengthList);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMatrix", $.Matrix0);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGNumber", $.Number);

$.defineNativeMethods("SVGNumberList", $.NumberList);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethodsNonleaf("SVGPathSeg", $.PathSeg);

$.defineNativeMethods("SVGPathSegArcAbs", $.PathSegArcAbs);

$.defineNativeMethods("SVGPathSegArcRel", $.PathSegArcRel);

$.defineNativeMethods("SVGPathSegClosePath", $.PathSegClosePath);

$.defineNativeMethods("SVGPathSegCurvetoCubicAbs", $.PathSegCurvetoCubicAbs);

$.defineNativeMethods("SVGPathSegCurvetoCubicRel", $.PathSegCurvetoCubicRel);

$.defineNativeMethods("SVGPathSegCurvetoCubicSmoothAbs", $.PathSegCurvetoCubicSmoothAbs);

$.defineNativeMethods("SVGPathSegCurvetoCubicSmoothRel", $.PathSegCurvetoCubicSmoothRel);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticAbs", $.PathSegCurvetoQuadraticAbs);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticRel", $.PathSegCurvetoQuadraticRel);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticSmoothAbs", $.PathSegCurvetoQuadraticSmoothAbs);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticSmoothRel", $.PathSegCurvetoQuadraticSmoothRel);

$.defineNativeMethods("SVGPathSegLinetoAbs", $.PathSegLinetoAbs);

$.defineNativeMethods("SVGPathSegLinetoHorizontalAbs", $.PathSegLinetoHorizontalAbs);

$.defineNativeMethods("SVGPathSegLinetoHorizontalRel", $.PathSegLinetoHorizontalRel);

$.defineNativeMethods("SVGPathSegLinetoRel", $.PathSegLinetoRel);

$.defineNativeMethods("SVGPathSegLinetoVerticalAbs", $.PathSegLinetoVerticalAbs);

$.defineNativeMethods("SVGPathSegLinetoVerticalRel", $.PathSegLinetoVerticalRel);

$.defineNativeMethods("SVGPathSegList", $.PathSegList);

$.defineNativeMethods("SVGPathSegMovetoAbs", $.PathSegMovetoAbs);

$.defineNativeMethods("SVGPathSegMovetoRel", $.PathSegMovetoRel);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPoint", $.Point);

$.defineNativeMethods("SVGPointList", $.PointList);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGPreserveAspectRatio", $.PreserveAspectRatio);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRect", $.Rect0);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGRenderingIntent", $.RenderingIntent);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStringList", $.StringList);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGTransform", $.Transform);

$.defineNativeMethods("SVGTransformList", $.TransformList);

$.defineNativeMethods("SVGUnitTypes", $.UnitTypes);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGViewSpec", $.ViewSpec);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethods("SVGElementInstanceList", $._ElementInstanceList);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethods("SVGColor", $._SVGColor);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("ArrayBuffer", $.ByteBuffer);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("DataView", $.ByteData);

$.defineNativeMethods("Float32Array", $.Float32List);

$.defineNativeMethods("Float64Array", $.Float64List);

$.defineNativeMethods("Int16Array", $.Int16List);

$.defineNativeMethods("Int32Array", $.Int32List);

$.defineNativeMethods("Int8Array", $.Int8List);

$.defineNativeMethods("Uint16Array", $.Uint16List);

$.defineNativeMethods("Uint32Array", $.Uint32List);

$.defineNativeMethods("Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);

$.defineNativeMethods("AnalyserNode", $.AnalyserNode);

$.defineNativeMethods("AudioBuffer", $.AudioBuffer);

$.defineNativeMethods("AudioBufferSourceNode", $.AudioBufferSourceNode);

$.defineNativeMethodsNonleaf("AudioContext", $.AudioContext);

$.defineNativeMethods("AudioDestinationNode", $.AudioDestinationNode);

$.defineNativeMethods("AudioListener", $.AudioListener);

$.defineNativeMethodsNonleaf("AudioNode", $.AudioNode);

$.defineNativeMethods("AudioParam", $.AudioParam);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethodsNonleaf("AudioSourceNode", $.AudioSourceNode);

$.defineNativeMethods("BiquadFilterNode", $.BiquadFilterNode);

$.defineNativeMethods("ChannelMergerNode", $.ChannelMergerNode);

$.defineNativeMethods("ChannelSplitterNode", $.ChannelSplitterNode);

$.defineNativeMethods("ConvolverNode", $.ConvolverNode);

$.defineNativeMethods("DelayNode", $.DelayNode);

$.defineNativeMethods("DynamicsCompressorNode", $.DynamicsCompressorNode);

$.defineNativeMethods("GainNode", $.GainNode);

$.defineNativeMethods("MediaElementAudioSourceNode", $.MediaElementAudioSourceNode);

$.defineNativeMethods("MediaStreamAudioDestinationNode", $.MediaStreamAudioDestinationNode);

$.defineNativeMethods("MediaStreamAudioSourceNode", $.MediaStreamAudioSourceNode);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("OfflineAudioContext", $.OfflineAudioContext);

$.defineNativeMethods("OscillatorNode", $.OscillatorNode);

$.defineNativeMethods("PannerNode", $.PannerNode);

$.defineNativeMethods("ScriptProcessorNode", $.ScriptProcessorNode);

$.defineNativeMethods("WaveShaperNode", $.WaveShaperNode);

$.defineNativeMethods("WaveTable", $.WaveTable);

$.defineNativeMethods("WebGLActiveInfo", $.ActiveInfo);

$.defineNativeMethods("WebGLBuffer", $.Buffer);

$.defineNativeMethods("WebGLCompressedTextureATC", $.CompressedTextureAtc);

$.defineNativeMethods("WebGLCompressedTexturePVRTC", $.CompressedTexturePvrtc);

$.defineNativeMethods("WebGLCompressedTextureS3TC", $.CompressedTextureS3TC);

$.defineNativeMethods("WebGLContextAttributes", $.ContextAttributes);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("WebGLDebugRendererInfo", $.DebugRendererInfo);

$.defineNativeMethods("WebGLDebugShaders", $.DebugShaders);

$.defineNativeMethods("WebGLDepthTexture", $.DepthTexture);

$.defineNativeMethods("EXTDrawBuffers", $.ExtDrawBuffers);

$.defineNativeMethods("EXTTextureFilterAnisotropic", $.ExtTextureFilterAnisotropic);

$.defineNativeMethods("WebGLFramebuffer", $.Framebuffer);

$.defineNativeMethods("WebGLLoseContext", $.LoseContext);

$.defineNativeMethods("OESElementIndexUint", $.OesElementIndexUint);

$.defineNativeMethods("OESStandardDerivatives", $.OesStandardDerivatives);

$.defineNativeMethods("OESTextureFloat", $.OesTextureFloat);

$.defineNativeMethods("OESTextureHalfFloat", $.OesTextureHalfFloat);

$.defineNativeMethods("OESVertexArrayObject", $.OesVertexArrayObject);

$.defineNativeMethods("WebGLProgram", $.Program);

$.defineNativeMethods("WebGLRenderbuffer", $.Renderbuffer);

$.defineNativeMethods("WebGLRenderingContext", $.RenderingContext);

$.defineNativeMethods("WebGLShader", $.Shader);

$.defineNativeMethods("WebGLShaderPrecisionFormat", $.ShaderPrecisionFormat);

$.defineNativeMethods("WebGLTexture", $.Texture);

$.defineNativeMethods("WebGLUniformLocation", $.UniformLocation);

$.defineNativeMethods("WebGLVertexArrayObjectOES", $.VertexArrayObject);

$.defineNativeMethods("Database", $.SqlDatabase);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

$.defineNativeMethods("SQLResultSet", $.SqlResultSet);

$.defineNativeMethods("SQLResultSetRowList", $.SqlResultSetRowList);

$.defineNativeMethods("SQLTransaction", $.SqlTransaction);


var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main$closure); });
      } else {
        $.startRootIsolate($.main$closure);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main$closure); });
  } else {
    $.startRootIsolate($.main$closure);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        isolateProperties[cls] = defineClass(name, cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    var objectClassObject = collectedClasses.Object, shortNames = "get$m,get$p,call$0,call$1,call$2,call$3,call$4,draw$1,draw$2,eval$1,get$sb,then$1,get$Map,get$_id,get$_key,get$maps,listen$1,lookup$1,toJson$0,get$_next,process$0,set$_next,_onError$1,callSync$1,get$LatLng,get$_state,get$_value,get$google,moveNext$0,readFile$1,set$_state,set$_value,visitMap$1,_callback$2,_dispatch$1,get$ROADMAP,get$current,particles$1,set$_handle,visitList$1,_sendError$1,_sendValue$1,catchError$1,get$Polyline,toSendPort$0,unregister$1,_setGlobals$0,get$LineChart,get$MapTypeId,get$_callback,get$_contents,get$_duration,get$_previous,get$_registry,get$_workerId,readClasses$0,set$_contents,set$_previous,get$_isolateId,runIteration$0,_checkReplyTo$1,get$_futurePort,visitSendPort$1,get$_liblib2$_id,get$_receivePort,visitPrimitive$1,get$_liblib$_name,get$_nextListener,get$_subscription,get$visualization,set$_nextListener,set$_subscription,visitCloseToken$1,_liblib5$_onData$1,arrayToDataTable$1,compareAndNotify$0,get$_cancelOnError,visitIsolateSink$1,visitSendPortSync$1,_liblib0$_callback$1,deserializeSendPort$1,get$_liblib1$_element,get$_resultOrListeners,deserializeCloseToken$1,deserializeIsolateSink$1".split(","), longNames = "m,p,call,call,call,call,call,draw,draw,eval,sb,then,Map,_id,_key,maps,listen,lookup,toJson,_next,process,_next=,_onError,callSync,LatLng,_state,_value,google,moveNext,readFile,_state=,_value=,visitMap,_callback,_dispatch,ROADMAP,current,particles,_handle=,visitList,_sendError,_sendValue,catchError,Polyline,toSendPort,unregister,_setGlobals,LineChart,MapTypeId,_callback,_contents,_duration,_previous,_registry,_workerId,readClasses,_contents=,_previous=,_isolateId,runIteration,_checkReplyTo,_futurePort,visitSendPort,_id,_receivePort,visitPrimitive,_name,_nextListener,_subscription,visualization,_nextListener=,_subscription=,visitCloseToken,_onData,arrayToDataTable,compareAndNotify,_cancelOnError,visitIsolateSink,visitSendPortSync,_callback,deserializeSendPort,_element,_resultOrListeners,deserializeCloseToken,deserializeIsolateSink".split(",");
    for (var j = 0; j < shortNames.length; j++) {
      var type = 0;
      var short = shortNames[j];
      if (short[0] == "g")
        type = 1;
      if (short[0] == "s")
        type = 2;
      objectClassObject[short] = Function("return this.noSuchMethod$1(this,$.createInvocationMirror('" + longNames[j] + "','" + short + "'," + type + ",Array.prototype.slice.call(arguments" + "),[]))");
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=filters.dart.js.map
